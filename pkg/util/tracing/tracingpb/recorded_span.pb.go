// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/tracing/tracingpb/recorded_span.proto

package tracingpb

import (
	fmt "fmt"
	github_com_cockroachdb_redact "github.com/cockroachdb/redact"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LogRecord is a log message recorded in a traced span.
type LogRecord struct {
	// Time of the log record.
	Time time.Time `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time"`
	// The log message.
	Message github_com_cockroachdb_redact.RedactableString `protobuf:"bytes,3,opt,name=message,proto3,customtype=github.com/cockroachdb/redact.RedactableString" json:"message"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{0}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

type LogRecord_Field struct {
	Key   string                                         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value github_com_cockroachdb_redact.RedactableString `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cockroachdb/redact.RedactableString" json:"value"`
}

func (m *LogRecord_Field) Reset()         { *m = LogRecord_Field{} }
func (m *LogRecord_Field) String() string { return proto.CompactTextString(m) }
func (*LogRecord_Field) ProtoMessage()    {}
func (*LogRecord_Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{0, 0}
}
func (m *LogRecord_Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord_Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogRecord_Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord_Field.Merge(m, src)
}
func (m *LogRecord_Field) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord_Field) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord_Field.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord_Field proto.InternalMessageInfo

// StructuredRecord is a structured message recorded in a traced span.
type StructuredRecord struct {
	// Time of the structured record.
	Time    time.Time  `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time"`
	Payload *types.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *StructuredRecord) Reset()         { *m = StructuredRecord{} }
func (m *StructuredRecord) String() string { return proto.CompactTextString(m) }
func (*StructuredRecord) ProtoMessage()    {}
func (*StructuredRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{1}
}
func (m *StructuredRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructuredRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StructuredRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredRecord.Merge(m, src)
}
func (m *StructuredRecord) XXX_Size() int {
	return m.Size()
}
func (m *StructuredRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredRecord proto.InternalMessageInfo

// OperationMetadata captures information corresponding to the operation that
// a span is started with.
type OperationMetadata struct {
	// Duration represents the total time spent by spans tracing the operation.
	Duration time.Duration `protobuf:"varint,1,opt,name=duration,proto3,casttype=time.Duration" json:"duration,omitempty"`
	// Count represents the number of spans tracing the operation.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// ContainsUnfinished is true if the OperationMetadata contains information
	// about unfinished spans tracing the operation.
	ContainsUnfinished bool `protobuf:"varint,3,opt,name=contains_unfinished,json=containsUnfinished,proto3" json:"contains_unfinished,omitempty"`
}

func (m *OperationMetadata) Reset()      { *m = OperationMetadata{} }
func (*OperationMetadata) ProtoMessage() {}
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{2}
}
func (m *OperationMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OperationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationMetadata.Merge(m, src)
}
func (m *OperationMetadata) XXX_Size() int {
	return m.Size()
}
func (m *OperationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_OperationMetadata proto.InternalMessageInfo

// RecordedSpan is the data recorded by a trace span. It
// needs to be able to cross RPC boundaries so that the
// complete recording of the trace can be constructed.
type RecordedSpan struct {
	// ID of the trace; spans that are part of the same hierarchy share
	// the same trace ID.
	TraceID TraceID `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3,customtype=TraceID" json:"trace_id"`
	// ID of the span.
	SpanID SpanID `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3,customtype=SpanID" json:"span_id"`
	// ID of the parent span.
	ParentSpanID SpanID `protobuf:"varint,3,opt,name=parent_span_id,json=parentSpanId,proto3,customtype=SpanID" json:"parent_span_id"`
	// Operation name.
	Operation string `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	// tag_groups describes tags associated with the span, potentially in a
	// shallow structured hierarchy.
	//
	// A span may have at most one "anonymous" tag group, that is, a tag group
	// without a Name. This is not enforced in the protobuf definition, but is
	// expected in code.
	//
	// The tags in an anonymous group are not necessarily related, and should
	// instead be treated as independent, top-level items. These tags are
	// stored in a tag group for convenience.
	TagGroups []TagGroup `protobuf:"bytes,18,rep,name=tag_groups,json=tagGroups,proto3" json:"tag_groups"`
	// Time when the span was started.
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// The span's duration, measured from start to Finish().
	//
	// A span whose recording is collected before it's finished will have the
	// duration set as the "time of collection - start time". Such a span will
	// have an "unfinished" tag and a `finished` boolean value of false in this
	// recording.
	Duration time.Duration `protobuf:"bytes,8,opt,name=duration,proto3,stdduration" json:"duration"`
	// Events logged in the span.
	Logs []LogRecord `protobuf:"bytes,9,rep,name=logs,proto3" json:"logs"`
	// verbose indicates whether the span was recording in verbose mode at the
	// time the recording was produced.
	//
	// This field is deprecated; it can be removed in 23.1. Use recording_mode
	// instead.
	Verbose bool `protobuf:"varint,16,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// recording_mode indicates the recording mode of the span at the the
	// recording was produced.
	RecordingMode RecordingMode `protobuf:"varint,17,opt,name=recording_mode,json=recordingMode,proto3,enum=cockroach.util.tracing.tracingpb.RecordingMode" json:"recording_mode,omitempty"`
	// The ID of the goroutine on which the span was created.
	GoroutineID uint64 `protobuf:"varint,12,opt,name=goroutine_id,json=goroutineId,proto3" json:"goroutine_id,omitempty"`
	// True if the span has been Finish()ed, false otherwise.
	Finished bool `protobuf:"varint,13,opt,name=finished,proto3" json:"finished,omitempty"`
	// StructuredRecords contains StructuredRecord events recorded either in this
	// span, or in children spans that have finished while our span was not
	// recording verbosely.
	//
	// A StructuredRecord wraps the Payload with a RecordedAt timestamp to expose
	// information about when this event occurred.
	StructuredRecords []StructuredRecord `protobuf:"bytes,14,rep,name=structured_records,json=structuredRecords,proto3" json:"structured_records"`
	// structured_records_size_bytes represents the total size of the logs in
	// structured_records.
	StructuredRecordsSizeBytes int64 `protobuf:"varint,20,opt,name=structured_records_size_bytes,json=structuredRecordsSizeBytes,proto3" json:"structured_records_size_bytes,omitempty"`
	// ChildrenMetadata is a mapping from operation to the aggregated metadata of
	// that operation.
	//
	// When a child of this span is Finish()ed, it updates the map with all the
	// children in its Recording. ChildrenMetadata therefore provides a bucketed
	// view of the various operations that are being traced as part of a span.
	ChildrenMetadata map[string]OperationMetadata `protobuf:"bytes,19,rep,name=children_metadata,json=childrenMetadata,proto3" json:"children_metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RecordedSpan) Reset()      { *m = RecordedSpan{} }
func (*RecordedSpan) ProtoMessage() {}
func (*RecordedSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{3}
}
func (m *RecordedSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordedSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecordedSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordedSpan.Merge(m, src)
}
func (m *RecordedSpan) XXX_Size() int {
	return m.Size()
}
func (m *RecordedSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordedSpan.DiscardUnknown(m)
}

var xxx_messageInfo_RecordedSpan proto.InternalMessageInfo

type TagGroup struct {
	// May be empty. If so, indicates that contained Tags should be treated as
	// top-level.
	//
	// If a value is instead present here, indicates that this group is a
	// structured collection of related tags.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags []Tag  `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags"`
}

func (m *TagGroup) Reset()         { *m = TagGroup{} }
func (m *TagGroup) String() string { return proto.CompactTextString(m) }
func (*TagGroup) ProtoMessage()    {}
func (*TagGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{4}
}
func (m *TagGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TagGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagGroup.Merge(m, src)
}
func (m *TagGroup) XXX_Size() int {
	return m.Size()
}
func (m *TagGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TagGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TagGroup proto.InternalMessageInfo

type Tag struct {
	// key is the name of the tag. This is a safe value.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value of the tag. This is NOT a safe value.
	// It may contain PII or other sensitive information.
	// TODO(knz): we should deprecate this field, and define
	// a new value field with type RedactableString.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{5}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

// NormalizedSpan is a representation of a RecordedSpan from a trace with all
// its children embedded, recursively. This JSON serialization of this proto is
// used in the system.statement_diagnostics.trace column.
//
// See RecordedSpan for the description of the fields.
type NormalizedSpan struct {
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// Deprecated. Avoid new uses. Prefer tag_groups.
	// TODO(benbardin): Deprecate the tags field for 23.1.
	Tags              map[string]string            `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TagGroups         []TagGroup                   `protobuf:"bytes,8,rep,name=tag_groups,json=tagGroups,proto3" json:"tag_groups"`
	StartTime         time.Time                    `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	Duration          time.Duration                `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration"`
	Logs              []LogRecord                  `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs"`
	StructuredRecords []StructuredRecord           `protobuf:"bytes,7,rep,name=structured_records,json=structuredRecords,proto3" json:"structured_records"`
	ChildrenMetadata  map[string]OperationMetadata `protobuf:"bytes,9,rep,name=children_metadata,json=childrenMetadata,proto3" json:"children_metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Children          []NormalizedSpan             `protobuf:"bytes,6,rep,name=children,proto3" json:"children"`
}

func (m *NormalizedSpan) Reset()         { *m = NormalizedSpan{} }
func (m *NormalizedSpan) String() string { return proto.CompactTextString(m) }
func (*NormalizedSpan) ProtoMessage()    {}
func (*NormalizedSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{6}
}
func (m *NormalizedSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalizedSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NormalizedSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalizedSpan.Merge(m, src)
}
func (m *NormalizedSpan) XXX_Size() int {
	return m.Size()
}
func (m *NormalizedSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalizedSpan.DiscardUnknown(m)
}

var xxx_messageInfo_NormalizedSpan proto.InternalMessageInfo

type CapturedStack struct {
	// Stack is the strack trace, or distinct prefix of the stack trace if a previous
	// capture of this stack is also being recorded.
	Stack string `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
	// SharedSuffix indicates the length of the elided suffix of this stack that
	// was identical to the previous capture of this stack.
	SharedSuffix int32 `protobuf:"varint,2,opt,name=shared_suffix,json=sharedSuffix,proto3" json:"shared_suffix,omitempty"`
	// SharedLines indicated how many newlines were in the elided shared suffix.
	SharedLines int32 `protobuf:"varint,3,opt,name=shared_lines,json=sharedLines,proto3" json:"shared_lines,omitempty"`
	// Age indicates the duration prior to being recorded that this stack was captured.
	Age time.Duration `protobuf:"varint,4,opt,name=age,proto3,casttype=time.Duration" json:"age,omitempty"`
}

func (m *CapturedStack) Reset()      { *m = CapturedStack{} }
func (*CapturedStack) ProtoMessage() {}
func (*CapturedStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b7b35ae7ab4ca8, []int{7}
}
func (m *CapturedStack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapturedStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CapturedStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapturedStack.Merge(m, src)
}
func (m *CapturedStack) XXX_Size() int {
	return m.Size()
}
func (m *CapturedStack) XXX_DiscardUnknown() {
	xxx_messageInfo_CapturedStack.DiscardUnknown(m)
}

var xxx_messageInfo_CapturedStack proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogRecord)(nil), "cockroach.parser.util.tracing.tracingpb.LogRecord")
	proto.RegisterType((*LogRecord_Field)(nil), "cockroach.parser.util.tracing.tracingpb.LogRecord.Field")
	proto.RegisterType((*StructuredRecord)(nil), "cockroach.parser.util.tracing.tracingpb.StructuredRecord")
	proto.RegisterType((*OperationMetadata)(nil), "cockroach.parser.util.tracing.tracingpb.OperationMetadata")
	proto.RegisterType((*RecordedSpan)(nil), "cockroach.parser.util.tracing.tracingpb.RecordedSpan")
	proto.RegisterMapType((map[string]OperationMetadata)(nil), "cockroach.parser.util.tracing.tracingpb.RecordedSpan.ChildrenMetadataEntry")
	proto.RegisterType((*TagGroup)(nil), "cockroach.parser.util.tracing.tracingpb.TagGroup")
	proto.RegisterType((*Tag)(nil), "cockroach.parser.util.tracing.tracingpb.Tag")
	proto.RegisterType((*NormalizedSpan)(nil), "cockroach.parser.util.tracing.tracingpb.NormalizedSpan")
	proto.RegisterMapType((map[string]OperationMetadata)(nil), "cockroach.parser.util.tracing.tracingpb.NormalizedSpan.ChildrenMetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "cockroach.parser.util.tracing.tracingpb.NormalizedSpan.TagsEntry")
	proto.RegisterType((*CapturedStack)(nil), "cockroach.parser.util.tracing.tracingpb.CapturedStack")
}

func init() {
	proto.RegisterFile("util/tracing/tracingpb/recorded_span.proto", fileDescriptor_e9b7b35ae7ab4ca8)
}

var fileDescriptor_e9b7b35ae7ab4ca8 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x17, 0x15, 0x25, 0x4a, 0xa2, 0x46, 0xb2, 0x43, 0x4f, 0xfc, 0x01, 0x8c, 0xf0, 0x55, 0x72, 0x95,
	0x16, 0x30, 0x52, 0x84, 0x6a, 0x15, 0xb4, 0x0d, 0xd2, 0x45, 0x10, 0xc5, 0x49, 0x20, 0xc1, 0x79,
	0x80, 0x72, 0xbb, 0x28, 0x50, 0x10, 0x23, 0x72, 0x4c, 0x13, 0x96, 0x38, 0x04, 0x67, 0x98, 0x46,
	0x46, 0xd7, 0xed, 0xb2, 0x59, 0x7a, 0xd9, 0x9f, 0xe3, 0x65, 0x96, 0x41, 0x17, 0x6e, 0x2b, 0xff,
	0x8b, 0x6e, 0x5a, 0xcc, 0x70, 0x48, 0xdb, 0x92, 0x0c, 0xd9, 0x70, 0x80, 0xae, 0x34, 0x8f, 0x7b,
	0xee, 0x3d, 0x73, 0x1f, 0x47, 0x04, 0x77, 0x62, 0xe6, 0x8f, 0xda, 0x2c, 0x42, 0x8e, 0x1f, 0x78,
	0xe9, 0x6f, 0x38, 0x6c, 0x47, 0xd8, 0x21, 0x91, 0x8b, 0x5d, 0x9b, 0x86, 0x28, 0x30, 0xc3, 0x88,
	0x30, 0x02, 0x37, 0x1c, 0xe2, 0xec, 0x47, 0x04, 0x39, 0x7b, 0x26, 0x47, 0x99, 0xd2, 0xda, 0xcc,
	0x50, 0xf5, 0x75, 0x8f, 0x78, 0x44, 0x18, 0xb7, 0xf9, 0x2a, 0xc1, 0xd5, 0x6f, 0x79, 0x84, 0x78,
	0x23, 0xdc, 0x16, 0xbb, 0x61, 0xbc, 0xdb, 0x46, 0xc1, 0x44, 0x5e, 0x35, 0x67, 0xaf, 0x98, 0x3f,
	0xc6, 0x94, 0xa1, 0x71, 0x28, 0x0d, 0x1a, 0xb3, 0x06, 0x6e, 0x1c, 0x21, 0xe6, 0x13, 0xc9, 0xa9,
	0xfe, 0xc9, 0x05, 0xfc, 0x53, 0x6e, 0xc2, 0xaa, 0xf5, 0x73, 0x1e, 0x54, 0xb6, 0x89, 0x67, 0x89,
	0x47, 0xc1, 0xfb, 0x40, 0xe5, 0x61, 0x0c, 0x65, 0x43, 0xd9, 0xac, 0x76, 0xea, 0x66, 0x12, 0xc2,
	0x4c, 0x43, 0x98, 0x3b, 0x29, 0x87, 0xae, 0x76, 0x74, 0xdc, 0xcc, 0xbd, 0xfd, 0xa3, 0xa9, 0x58,
	0x02, 0x01, 0x5f, 0x81, 0xf2, 0x18, 0x53, 0x8a, 0x3c, 0x6c, 0x14, 0x36, 0x94, 0xcd, 0x4a, 0xf7,
	0x2b, 0x6e, 0xf0, 0xfb, 0x71, 0xd3, 0xf4, 0x7c, 0xb6, 0x17, 0x0f, 0x4d, 0x87, 0x8c, 0xdb, 0x59,
	0x96, 0x5c, 0x9e, 0x46, 0x17, 0x39, 0xcc, 0xb4, 0xc4, 0x0f, 0x1a, 0x8e, 0xf0, 0x80, 0x45, 0x7e,
	0xe0, 0x59, 0xa9, 0x9b, 0xba, 0x07, 0x8a, 0x4f, 0x7d, 0x3c, 0x72, 0xa1, 0x0e, 0x0a, 0xfb, 0x78,
	0x22, 0x38, 0x55, 0x2c, 0xbe, 0x84, 0xdb, 0xa0, 0xf8, 0x1a, 0x8d, 0x62, 0x6c, 0xe4, 0xaf, 0x15,
	0x2a, 0x71, 0xd2, 0x57, 0xb5, 0xbc, 0x5e, 0x68, 0xfd, 0x04, 0xf4, 0x01, 0x8b, 0x62, 0x87, 0xc5,
	0x11, 0x76, 0xaf, 0x9d, 0x0e, 0x13, 0x94, 0x43, 0x34, 0x19, 0x11, 0xe4, 0x0a, 0x8e, 0xd5, 0xce,
	0xfa, 0x1c, 0xf8, 0x51, 0x30, 0xb1, 0x52, 0xa3, 0xd6, 0xaf, 0x0a, 0x58, 0x7b, 0x19, 0xe2, 0xa4,
	0x80, 0xcf, 0x31, 0x43, 0x2e, 0x62, 0x08, 0xde, 0x05, 0x5a, 0x5a, 0x54, 0xc1, 0xa1, 0xd0, 0x5d,
	0xfb, 0xfb, 0xb8, 0xb9, 0xc2, 0x23, 0x98, 0x5b, 0xf2, 0xc2, 0xca, 0x4c, 0xe0, 0x3a, 0x28, 0x3a,
	0x24, 0x0e, 0x98, 0x08, 0x59, 0xb0, 0x92, 0x0d, 0x6c, 0x83, 0x9b, 0x0e, 0x09, 0x18, 0xf2, 0x03,
	0x6a, 0xc7, 0xc1, 0xae, 0x1f, 0xf8, 0x74, 0x0f, 0xbb, 0xa2, 0x4a, 0x9a, 0x05, 0xd3, 0xab, 0x6f,
	0xb3, 0x9b, 0x07, 0xea, 0xe1, 0x6f, 0xcd, 0x5c, 0xeb, 0x1f, 0x0d, 0xd4, 0x2c, 0xd9, 0xea, 0x83,
	0x10, 0x05, 0xf0, 0x4b, 0xa0, 0xf1, 0xd6, 0xc1, 0xb6, 0xef, 0x0a, 0x32, 0x6a, 0xb7, 0x2e, 0xf3,
	0x5e, 0xde, 0xe1, 0xe7, 0xbd, 0xad, 0xe9, 0xe9, 0xd2, 0x2a, 0x0b, 0xdb, 0x9e, 0x0b, 0xbf, 0x00,
	0x65, 0x3e, 0x28, 0x1c, 0x95, 0x17, 0x28, 0x43, 0xa2, 0x4a, 0xdc, 0xab, 0x00, 0xc9, 0x95, 0x55,
	0xe2, 0x86, 0x3d, 0x17, 0x6e, 0x81, 0xd5, 0x10, 0x45, 0x38, 0x60, 0x76, 0x8a, 0x2c, 0x08, 0x64,
	0x63, 0x0e, 0x59, 0x7b, 0x25, 0xec, 0x24, 0xbe, 0x16, 0x9e, 0xee, 0x5c, 0xf8, 0x7f, 0x50, 0x21,
	0x69, 0x46, 0x0d, 0x55, 0x34, 0xcf, 0xe9, 0x01, 0x7c, 0x09, 0x00, 0x43, 0x9e, 0xed, 0x45, 0x24,
	0x0e, 0xa9, 0x01, 0x37, 0x0a, 0x9b, 0xd5, 0xce, 0x1d, 0x73, 0xd9, 0x18, 0x9b, 0x3b, 0xc8, 0x7b,
	0xc6, 0x21, 0x5d, 0x95, 0x73, 0xb1, 0x2a, 0x4c, 0xee, 0x29, 0x7c, 0x0c, 0x00, 0x65, 0x28, 0x62,
	0xb6, 0xe8, 0x98, 0xf2, 0x15, 0x3a, 0xa6, 0x22, 0x70, 0xfc, 0x06, 0x3e, 0x3c, 0x53, 0x70, 0x4d,
	0xb8, 0xb8, 0x35, 0xe7, 0x22, 0x2d, 0x7c, 0xe2, 0xe1, 0x90, 0x7b, 0x38, 0x6d, 0x81, 0x27, 0x40,
	0x1d, 0x11, 0x8f, 0x1a, 0x15, 0xf1, 0xa0, 0xcf, 0x96, 0x3f, 0x28, 0x9b, 0x7d, 0xf9, 0x22, 0x01,
	0x87, 0x06, 0x28, 0xbf, 0xc6, 0xd1, 0x90, 0x50, 0x6c, 0xe8, 0xa2, 0x4f, 0xd2, 0x2d, 0xfc, 0x0e,
	0xac, 0x26, 0x02, 0xe8, 0x07, 0x9e, 0x3d, 0x26, 0x2e, 0x36, 0xd6, 0x36, 0x94, 0xcd, 0xd5, 0x4e,
	0x7b, 0x79, 0x28, 0x2b, 0xc5, 0x3d, 0x27, 0x2e, 0xb6, 0x56, 0xa2, 0xb3, 0x5b, 0xd8, 0x01, 0x35,
	0x8f, 0x44, 0x24, 0x66, 0x7e, 0x20, 0x3a, 0xac, 0x26, 0x2a, 0x7e, 0x63, 0x7a, 0xdc, 0xac, 0x3e,
	0x4b, 0xcf, 0x7b, 0x5b, 0x56, 0x35, 0x33, 0xea, 0xb9, 0xb0, 0x0e, 0xb4, 0xac, 0x9d, 0x57, 0x04,
	0xcd, 0x6c, 0x0f, 0x3d, 0x00, 0x69, 0x36, 0xce, 0x76, 0x12, 0x8b, 0x1a, 0xab, 0x22, 0x2d, 0x9d,
	0xe5, 0x5c, 0x67, 0xa5, 0x40, 0x66, 0x67, 0x8d, 0xce, 0x9c, 0x53, 0xf8, 0x08, 0x7c, 0x34, 0x1f,
	0xc8, 0xa6, 0xfe, 0x01, 0xb6, 0x87, 0x13, 0x86, 0xa9, 0xb1, 0x2e, 0x86, 0xb1, 0x3e, 0x87, 0x1c,
	0xf8, 0x07, 0xb8, 0xcb, 0x2d, 0xe0, 0x8f, 0x60, 0xcd, 0xd9, 0xf3, 0x47, 0x6e, 0x84, 0x03, 0x7b,
	0x2c, 0x67, 0xdf, 0xb8, 0x29, 0xa8, 0x6e, 0x5d, 0x36, 0xad, 0xc9, 0x90, 0x9a, 0x8f, 0xa5, 0x9f,
	0x54, 0x42, 0x9e, 0x04, 0x2c, 0x9a, 0x48, 0xf2, 0xba, 0x33, 0x73, 0x59, 0x7f, 0x03, 0xfe, 0xb7,
	0x10, 0xb0, 0x40, 0x72, 0x7b, 0x67, 0x25, 0xb7, 0xda, 0xb9, 0xb7, 0x9c, 0xd7, 0x9c, 0x9c, 0x49,
	0xbd, 0x7d, 0x90, 0xbf, 0xaf, 0x24, 0x1a, 0xd3, 0x57, 0xb5, 0xa2, 0x5e, 0xea, 0xab, 0x5a, 0x49,
	0x2f, 0xf7, 0x55, 0x0d, 0xe8, 0xd5, 0xbe, 0xaa, 0x55, 0xf5, 0x5a, 0x5f, 0xd5, 0x6e, 0xe8, 0x7a,
	0xcb, 0x06, 0x5a, 0x3a, 0x6e, 0x10, 0x02, 0x35, 0x40, 0x52, 0x89, 0x2b, 0x96, 0x58, 0xc3, 0x87,
	0x40, 0x65, 0xc8, 0xa3, 0x46, 0x5e, 0x64, 0xea, 0xd3, 0x4b, 0x0d, 0x6f, 0xda, 0xe5, 0x1c, 0xd8,
	0xba, 0x0b, 0x0a, 0x3b, 0xc8, 0x5b, 0xf0, 0xd8, 0xf5, 0x73, 0xff, 0x2f, 0x92, 0x77, 0xeb, 0x97,
	0x32, 0x58, 0x7d, 0x41, 0xa2, 0x31, 0x1a, 0xf9, 0x07, 0x52, 0x13, 0xcf, 0x69, 0x8c, 0x32, 0xab,
	0x31, 0x2f, 0xce, 0x11, 0x7c, 0xb0, 0x9c, 0xe0, 0x79, 0xef, 0x9c, 0x2f, 0x15, 0xf5, 0x48, 0xf8,
	0xce, 0x68, 0x96, 0xf6, 0xa1, 0x35, 0xab, 0x70, 0x7d, 0xcd, 0x52, 0xaf, 0xa3, 0x59, 0xc5, 0xeb,
	0x69, 0xd6, 0xe2, 0x89, 0x2f, 0x7f, 0xf8, 0x89, 0x9f, 0x2c, 0x1a, 0xd7, 0x44, 0x70, 0x9f, 0x5e,
	0xb9, 0xc6, 0x57, 0x1a, 0x58, 0x68, 0x01, 0x2d, 0x3d, 0x33, 0x4a, 0x22, 0xe2, 0xe7, 0x57, 0x8d,
	0x28, 0x7d, 0x67, 0x7e, 0xea, 0x5f, 0x83, 0x4a, 0xd6, 0x68, 0x97, 0x9d, 0x05, 0x3e, 0xc3, 0xff,
	0x9d, 0x7a, 0xb4, 0x0e, 0x15, 0xb0, 0xf2, 0x18, 0x85, 0xa2, 0x2a, 0x03, 0x86, 0x9c, 0x7d, 0xce,
	0x92, 0xf2, 0x85, 0x0c, 0x9a, 0x6c, 0xe0, 0x6d, 0xb0, 0x42, 0xf7, 0x10, 0x6f, 0x07, 0x1a, 0xef,
	0xee, 0xfa, 0x6f, 0x44, 0xf8, 0xa2, 0x55, 0x4b, 0x0e, 0x07, 0xe2, 0x0c, 0x7e, 0x0c, 0xe4, 0xde,
	0x1e, 0xf9, 0x01, 0xa6, 0x62, 0x0c, 0x8a, 0x56, 0x35, 0x39, 0xdb, 0xe6, 0x47, 0xf0, 0x36, 0x28,
	0xf0, 0x0f, 0x5b, 0xf5, 0xa2, 0x4f, 0x30, 0x7e, 0x9b, 0x48, 0x5a, 0xf7, 0x87, 0xa3, 0xbf, 0x1a,
	0xb9, 0xa3, 0x69, 0x43, 0x79, 0x37, 0x6d, 0x28, 0xef, 0xa7, 0x0d, 0xe5, 0xcf, 0x69, 0x43, 0x79,
	0x7b, 0xd2, 0xc8, 0xbd, 0x3b, 0x69, 0xe4, 0xde, 0x9f, 0x34, 0x72, 0xdf, 0x7f, 0x73, 0xc1, 0x57,
	0x6a, 0xb6, 0x6e, 0x87, 0xfb, 0x5e, 0x7b, 0xf1, 0xc7, 0xfb, 0xb0, 0x24, 0x46, 0xea, 0xde, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x55, 0xcb, 0x88, 0xc0, 0x9d, 0x0c, 0x00, 0x00,
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRecordedSpan(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LogRecord_Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord_Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord_Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StructuredRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructuredRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StructuredRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintRecordedSpan(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContainsUnfinished {
		i--
		if m.ContainsUnfinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Duration != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordedSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordedSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordedSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructuredRecordsSizeBytes != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.StructuredRecordsSizeBytes))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ChildrenMetadata) > 0 {
		keysForChildrenMetadata := make([]string, 0, len(m.ChildrenMetadata))
		for k := range m.ChildrenMetadata {
			keysForChildrenMetadata = append(keysForChildrenMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForChildrenMetadata)
		for iNdEx := len(keysForChildrenMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ChildrenMetadata[string(keysForChildrenMetadata[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForChildrenMetadata[iNdEx])
			copy(dAtA[i:], keysForChildrenMetadata[iNdEx])
			i = encodeVarintRecordedSpan(dAtA, i, uint64(len(keysForChildrenMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRecordedSpan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.TagGroups) > 0 {
		for iNdEx := len(m.TagGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TagGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.RecordingMode != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.RecordingMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Verbose {
		i--
		if m.Verbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.StructuredRecords) > 0 {
		for iNdEx := len(m.StructuredRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StructuredRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Finished {
		i--
		if m.Finished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.GoroutineID != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.GoroutineID))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Duration != 0 {
		n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintRecordedSpan(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x42
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintRecordedSpan(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x3a
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x22
	}
	if m.ParentSpanID != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.ParentSpanID))
		i--
		dAtA[i] = 0x18
	}
	if m.SpanID != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.SpanID))
		i--
		dAtA[i] = 0x10
	}
	if m.TraceID != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.TraceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TagGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NormalizedSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalizedSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalizedSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildrenMetadata) > 0 {
		keysForChildrenMetadata := make([]string, 0, len(m.ChildrenMetadata))
		for k := range m.ChildrenMetadata {
			keysForChildrenMetadata = append(keysForChildrenMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForChildrenMetadata)
		for iNdEx := len(keysForChildrenMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ChildrenMetadata[string(keysForChildrenMetadata[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForChildrenMetadata[iNdEx])
			copy(dAtA[i:], keysForChildrenMetadata[iNdEx])
			i = encodeVarintRecordedSpan(dAtA, i, uint64(len(keysForChildrenMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRecordedSpan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.TagGroups) > 0 {
		for iNdEx := len(m.TagGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TagGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.StructuredRecords) > 0 {
		for iNdEx := len(m.StructuredRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StructuredRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecordedSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Duration != 0 {
		n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintRecordedSpan(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x22
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintRecordedSpan(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x1a
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRecordedSpan(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintRecordedSpan(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRecordedSpan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CapturedStack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapturedStack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CapturedStack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Age != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x20
	}
	if m.SharedLines != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.SharedLines))
		i--
		dAtA[i] = 0x18
	}
	if m.SharedSuffix != 0 {
		i = encodeVarintRecordedSpan(dAtA, i, uint64(m.SharedSuffix))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stack) > 0 {
		i -= len(m.Stack)
		copy(dAtA[i:], m.Stack)
		i = encodeVarintRecordedSpan(dAtA, i, uint64(len(m.Stack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecordedSpan(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecordedSpan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovRecordedSpan(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	return n
}

func (m *LogRecord_Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	return n
}

func (m *StructuredRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovRecordedSpan(uint64(l))
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	return n
}

func (m *OperationMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovRecordedSpan(uint64(m.Duration))
	}
	if m.Count != 0 {
		n += 1 + sovRecordedSpan(uint64(m.Count))
	}
	if m.ContainsUnfinished {
		n += 2
	}
	return n
}

func (m *RecordedSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TraceID != 0 {
		n += 1 + sovRecordedSpan(uint64(m.TraceID))
	}
	if m.SpanID != 0 {
		n += 1 + sovRecordedSpan(uint64(m.SpanID))
	}
	if m.ParentSpanID != 0 {
		n += 1 + sovRecordedSpan(uint64(m.ParentSpanID))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovRecordedSpan(uint64(l))
	if m.Duration != 0 {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if m.GoroutineID != 0 {
		n += 1 + sovRecordedSpan(uint64(m.GoroutineID))
	}
	if m.Finished {
		n += 2
	}
	if len(m.StructuredRecords) > 0 {
		for _, e := range m.StructuredRecords {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if m.Verbose {
		n += 3
	}
	if m.RecordingMode != 0 {
		n += 2 + sovRecordedSpan(uint64(m.RecordingMode))
	}
	if len(m.TagGroups) > 0 {
		for _, e := range m.TagGroups {
			l = e.Size()
			n += 2 + l + sovRecordedSpan(uint64(l))
		}
	}
	if len(m.ChildrenMetadata) > 0 {
		for k, v := range m.ChildrenMetadata {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovRecordedSpan(uint64(len(k))) + 1 + l + sovRecordedSpan(uint64(l))
			n += mapEntrySize + 2 + sovRecordedSpan(uint64(mapEntrySize))
		}
	}
	if m.StructuredRecordsSizeBytes != 0 {
		n += 2 + sovRecordedSpan(uint64(m.StructuredRecordsSizeBytes))
	}
	return n
}

func (m *TagGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	return n
}

func (m *NormalizedSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRecordedSpan(uint64(len(k))) + 1 + len(v) + sovRecordedSpan(uint64(len(v)))
			n += mapEntrySize + 1 + sovRecordedSpan(uint64(mapEntrySize))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovRecordedSpan(uint64(l))
	if m.Duration != 0 {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if len(m.StructuredRecords) > 0 {
		for _, e := range m.StructuredRecords {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if len(m.TagGroups) > 0 {
		for _, e := range m.TagGroups {
			l = e.Size()
			n += 1 + l + sovRecordedSpan(uint64(l))
		}
	}
	if len(m.ChildrenMetadata) > 0 {
		for k, v := range m.ChildrenMetadata {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovRecordedSpan(uint64(len(k))) + 1 + l + sovRecordedSpan(uint64(l))
			n += mapEntrySize + 1 + sovRecordedSpan(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CapturedStack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stack)
	if l > 0 {
		n += 1 + l + sovRecordedSpan(uint64(l))
	}
	if m.SharedSuffix != 0 {
		n += 1 + sovRecordedSpan(uint64(m.SharedSuffix))
	}
	if m.SharedLines != 0 {
		n += 1 + sovRecordedSpan(uint64(m.SharedLines))
	}
	if m.Age != 0 {
		n += 1 + sovRecordedSpan(uint64(m.Age))
	}
	return n
}

func sovRecordedSpan(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozRecordedSpan(x uint64) (n int) {
	return sovRecordedSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = github_com_cockroachdb_redact.RedactableString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecord_Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = github_com_cockroachdb_redact.RedactableString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructuredRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructuredRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructuredRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &types.Any{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainsUnfinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContainsUnfinished = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordedSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordedSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordedSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			m.TraceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceID |= TraceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= SpanID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanID", wireType)
			}
			m.ParentSpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanID |= SpanID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, LogRecord{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineID", wireType)
			}
			m.GoroutineID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoroutineID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finished = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StructuredRecords = append(m.StructuredRecords, StructuredRecord{})
			if err := m.StructuredRecords[len(m.StructuredRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verbose = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordingMode", wireType)
			}
			m.RecordingMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordingMode |= RecordingMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagGroups = append(m.TagGroups, TagGroup{})
			if err := m.TagGroups[len(m.TagGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChildrenMetadata == nil {
				m.ChildrenMetadata = make(map[string]OperationMetadata)
			}
			var mapkey string
			mapvalue := &OperationMetadata{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecordedSpan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OperationMetadata{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRecordedSpan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChildrenMetadata[mapkey] = *mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredRecordsSizeBytes", wireType)
			}
			m.StructuredRecordsSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StructuredRecordsSizeBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalizedSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalizedSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalizedSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecordedSpan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRecordedSpan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, LogRecord{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, NormalizedSpan{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StructuredRecords = append(m.StructuredRecords, StructuredRecord{})
			if err := m.StructuredRecords[len(m.StructuredRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagGroups = append(m.TagGroups, TagGroup{})
			if err := m.TagGroups[len(m.TagGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChildrenMetadata == nil {
				m.ChildrenMetadata = make(map[string]OperationMetadata)
			}
			var mapkey string
			mapvalue := &OperationMetadata{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecordedSpan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecordedSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OperationMetadata{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRecordedSpan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRecordedSpan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChildrenMetadata[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapturedStack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapturedStack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapturedStack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedSuffix", wireType)
			}
			m.SharedSuffix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedSuffix |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedLines", wireType)
			}
			m.SharedLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedLines |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecordedSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecordedSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecordedSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordedSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecordedSpan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecordedSpan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecordedSpan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecordedSpan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecordedSpan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecordedSpan = fmt.Errorf("proto: unexpected end of group")
)

