// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/admission/admissionpb/admission_stats.proto

package admissionpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AdmissionWorkQueueStats is recorded for work items waiting in the admission
// work queue.
type AdmissionWorkQueueStats struct {
	// WaitDurationNanos is the time spent waiting.
	WaitDurationNanos time.Duration `protobuf:"varint,1,opt,name=wait_duration_nanos,json=waitDurationNanos,proto3,casttype=time.Duration" json:"wait_duration_nanos,omitempty"`
	// QueueKind is the string name of the admission queue kind.
	QueueKind string `protobuf:"bytes,2,opt,name=queue_kind,json=queueKind,proto3" json:"queue_kind,omitempty"`
	// DeadlineExceededCount counts the number of times -- usually zero or one
	// unless the stats are an aggregate -- that the deadline was exceeded while
	// waiting in the queue.
	DeadlineExceededCount int32 `protobuf:"varint,5,opt,name=deadline_exceeded_count,json=deadlineExceededCount,proto3" json:"deadline_exceeded_count,omitempty"`
	// WorkPriority is the integer representation of work priority, or if the
	// AdmissionWorkQueueStats represents an aggregation of stats, the minimum of
	// the priorities across the aggregated stats.
	WorkPriority int32 `protobuf:"varint,6,opt,name=work_priority,json=workPriority,proto3" json:"work_priority,omitempty"`
}

func (m *AdmissionWorkQueueStats) Reset()      { *m = AdmissionWorkQueueStats{} }
func (*AdmissionWorkQueueStats) ProtoMessage() {}
func (*AdmissionWorkQueueStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_695e7752d0aa7c6e, []int{0}
}
func (m *AdmissionWorkQueueStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdmissionWorkQueueStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdmissionWorkQueueStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdmissionWorkQueueStats.Merge(m, src)
}
func (m *AdmissionWorkQueueStats) XXX_Size() int {
	return m.Size()
}
func (m *AdmissionWorkQueueStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AdmissionWorkQueueStats.DiscardUnknown(m)
}

var xxx_messageInfo_AdmissionWorkQueueStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AdmissionWorkQueueStats)(nil), "cockroach.parser.util.admission.admissionpb.AdmissionWorkQueueStats")
}

func init() {
	proto.RegisterFile("util/admission/admissionpb/admission_stats.proto", fileDescriptor_695e7752d0aa7c6e)
}

var fileDescriptor_695e7752d0aa7c6e = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x73, 0x36, 0x2d, 0xed, 0x61, 0xa1, 0x8d, 0x4a, 0x83, 0xe0, 0xb5, 0xa8, 0x43, 0xa7,
	0x44, 0x10, 0x1c, 0x5c, 0xa4, 0x55, 0x97, 0x0a, 0xa2, 0x75, 0x10, 0x5c, 0xc2, 0x25, 0x77, 0xa4,
	0x47, 0xda, 0xbb, 0x78, 0xb9, 0x50, 0xfd, 0x16, 0x8e, 0x8e, 0x7e, 0x9c, 0x8e, 0x1d, 0x3b, 0x89,
	0xa6, 0x9b, 0x1f, 0xc1, 0x49, 0x2e, 0xf6, 0x8f, 0x8b, 0xdb, 0x73, 0xcf, 0xf3, 0x7b, 0xde, 0x83,
	0xf7, 0x85, 0x47, 0xa9, 0x62, 0x43, 0x17, 0x93, 0x11, 0x4b, 0x12, 0x26, 0xf8, 0x5a, 0xc5, 0xfe,
	0x5a, 0x7b, 0x89, 0xc2, 0x2a, 0x71, 0x62, 0x29, 0x94, 0xb0, 0x0e, 0x03, 0x11, 0x44, 0x52, 0xe0,
	0x60, 0xe0, 0xe8, 0xae, 0xb3, 0xa2, 0x9c, 0x3f, 0xdd, 0xdd, 0xed, 0x50, 0x84, 0x22, 0x2f, 0xb8,
	0x5a, 0xfd, 0x76, 0xf7, 0xbf, 0x00, 0x6c, 0x74, 0x96, 0xd4, 0xbd, 0x90, 0xd1, 0x6d, 0x4a, 0x53,
	0x7a, 0xa7, 0xa7, 0x5b, 0x1d, 0xb8, 0x35, 0xc6, 0x4c, 0x79, 0x24, 0x95, 0x58, 0xe9, 0x4f, 0x39,
	0xe6, 0x22, 0xb1, 0x41, 0x0b, 0xb4, 0x0b, 0xdd, 0xfa, 0xf7, 0x7b, 0xb3, 0xaa, 0xd8, 0x88, 0x3a,
	0x17, 0x8b, 0xb8, 0x5f, 0xd7, 0xf4, 0xf2, 0x75, 0xad, 0x59, 0x6b, 0x0f, 0xc2, 0x47, 0x3d, 0xd0,
	0x8b, 0x18, 0x27, 0xf6, 0x46, 0x0b, 0xb4, 0x2b, 0xfd, 0x4a, 0xee, 0x5c, 0x31, 0x4e, 0xac, 0x13,
	0xd8, 0x20, 0x14, 0x93, 0x21, 0xe3, 0xd4, 0xa3, 0x4f, 0x01, 0xa5, 0x84, 0x12, 0x2f, 0x10, 0x29,
	0x57, 0x76, 0xb1, 0x05, 0xda, 0xc5, 0xfe, 0xce, 0x32, 0xbe, 0x5c, 0xa4, 0xe7, 0x3a, 0xb4, 0x0e,
	0x60, 0x75, 0x2c, 0x64, 0xe4, 0xc5, 0x92, 0x09, 0xc9, 0xd4, 0xb3, 0x5d, 0xca, 0xe9, 0x4d, 0x6d,
	0xde, 0x2c, 0xbc, 0x53, 0xf3, 0xf5, 0xad, 0x69, 0xf4, 0xcc, 0x72, 0xa1, 0x66, 0xf6, 0xcc, 0xb2,
	0x59, 0x2b, 0x76, 0xf1, 0xe4, 0x13, 0x19, 0x93, 0x0c, 0x81, 0x69, 0x86, 0xc0, 0x2c, 0x43, 0xe0,
	0x23, 0x43, 0xe0, 0x65, 0x8e, 0x8c, 0xe9, 0x1c, 0x19, 0xb3, 0x39, 0x32, 0x1e, 0xce, 0x42, 0xa6,
	0x06, 0xa9, 0xef, 0x04, 0x62, 0xe4, 0xae, 0xb6, 0x4a, 0xfc, 0xb5, 0x76, 0xe3, 0x28, 0x74, 0xff,
	0xbf, 0x90, 0x5f, 0xca, 0xd7, 0x7a, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xd1, 0x36, 0x12,
	0xc6, 0x01, 0x00, 0x00,
}

func (m *AdmissionWorkQueueStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdmissionWorkQueueStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdmissionWorkQueueStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkPriority != 0 {
		i = encodeVarintAdmissionStats(dAtA, i, uint64(m.WorkPriority))
		i--
		dAtA[i] = 0x30
	}
	if m.DeadlineExceededCount != 0 {
		i = encodeVarintAdmissionStats(dAtA, i, uint64(m.DeadlineExceededCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.QueueKind) > 0 {
		i -= len(m.QueueKind)
		copy(dAtA[i:], m.QueueKind)
		i = encodeVarintAdmissionStats(dAtA, i, uint64(len(m.QueueKind)))
		i--
		dAtA[i] = 0x12
	}
	if m.WaitDurationNanos != 0 {
		i = encodeVarintAdmissionStats(dAtA, i, uint64(m.WaitDurationNanos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmissionStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmissionStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdmissionWorkQueueStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaitDurationNanos != 0 {
		n += 1 + sovAdmissionStats(uint64(m.WaitDurationNanos))
	}
	l = len(m.QueueKind)
	if l > 0 {
		n += 1 + l + sovAdmissionStats(uint64(l))
	}
	if m.DeadlineExceededCount != 0 {
		n += 1 + sovAdmissionStats(uint64(m.DeadlineExceededCount))
	}
	if m.WorkPriority != 0 {
		n += 1 + sovAdmissionStats(uint64(m.WorkPriority))
	}
	return n
}

func sovAdmissionStats(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozAdmissionStats(x uint64) (n int) {
	return sovAdmissionStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdmissionWorkQueueStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmissionStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdmissionWorkQueueStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdmissionWorkQueueStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitDurationNanos", wireType)
			}
			m.WaitDurationNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitDurationNanos |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmissionStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmissionStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineExceededCount", wireType)
			}
			m.DeadlineExceededCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadlineExceededCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPriority", wireType)
			}
			m.WorkPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmissionStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmissionStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmissionStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmissionStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmissionStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmissionStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmissionStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmissionStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmissionStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmissionStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmissionStats = fmt.Errorf("proto: unexpected end of group")
)

