// Code generated by pkg/sql/lexbase/allkeywords. DO NOT EDIT.

package lexbase

var KeywordsCategories = map[string]string{
"abs": "U",
"bigint": "U",
"boolean": "U",
"ceiling": "U",
"date": "U",
"datetime": "U",
"decimal": "U",
"double": "U",
"exists": "U",
"false": "U",
"flag": "U",
"floor": "U",
"integer": "U",
"is": "U",
"keyvalue": "U",
"last": "U",
"lax": "U",
"like_regex": "U",
"null": "U",
"number": "U",
"size": "U",
"starts": "U",
"strict": "U",
"string": "U",
"time": "U",
"timestamp": "U",
"timestamp_tz": "U",
"time_tz": "U",
"to": "U",
"true": "U",
"type": "U",
"unknown": "U",
"with": "U",
}

// KeywordNames contains all keywords sorted, so that pg_get_keywords returns
// deterministic results.
var KeywordNames = []string{
"abs",
"bigint",
"boolean",
"ceiling",
"date",
"datetime",
"decimal",
"double",
"exists",
"false",
"flag",
"floor",
"integer",
"is",
"keyvalue",
"last",
"lax",
"like_regex",
"null",
"number",
"size",
"starts",
"strict",
"string",
"time",
"timestamp",
"timestamp_tz",
"time_tz",
"to",
"true",
"type",
"unknown",
"with",
}

// GetKeywordID returns the lex id of the SQL keyword k or IDENT if k is
// not a keyword.
func GetKeywordID(k string) int32 {
	// The previous implementation generated a map that did a string ->
	// id lookup. Various ideas were benchmarked and the implementation below
	// was the fastest of those, between 3% and 10% faster (at parsing, so the
	// scanning speedup is even more) than the map implementation.
	switch k {
	case "abs": return ABS
	case "bigint": return BIGINT
	case "boolean": return BOOLEAN
	case "ceiling": return CEILING
	case "date": return DATE
	case "datetime": return DATETIME
	case "decimal": return DECIMAL
	case "double": return DOUBLE
	case "exists": return EXISTS
	case "false": return FALSE
	case "flag": return FLAG
	case "floor": return FLOOR
	case "integer": return INTEGER
	case "is": return IS
	case "keyvalue": return KEYVALUE
	case "last": return LAST
	case "lax": return LAX
	case "like_regex": return LIKE_REGEX
	case "null": return NULL
	case "number": return NUMBER
	case "size": return SIZE
	case "starts": return STARTS
	case "strict": return STRICT
	case "string": return STRING
	case "time": return TIME
	case "timestamp": return TIMESTAMP
	case "timestamp_tz": return TIMESTAMP_TZ
	case "time_tz": return TIME_TZ
	case "to": return TO
	case "true": return TRUE
	case "type": return TYPE
	case "unknown": return UNKNOWN
	case "with": return WITH
	default: return IDENT
	}
}
