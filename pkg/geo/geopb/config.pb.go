// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geo/geopb/config.proto

package geopb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Config is the information used to tune one instance of a geospatial index.
// Each SQL index will have its own config.
//
// At the moment, only one major indexing strategy is implemented (S2 cells).
type Config struct {
	S2Geography *S2GeographyConfig `protobuf:"bytes,1,opt,name=s2_geography,json=s2Geography,proto3" json:"s2_geography,omitempty"`
	S2Geometry  *S2GeometryConfig  `protobuf:"bytes,2,opt,name=s2_geometry,json=s2Geometry,proto3" json:"s2_geometry,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c5614d57d337886, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

// S2Config is the required information to tune one instance of an S2 cell
// backed geospatial index. For advanced users only -- the defaults should be
// good enough.
//
// TODO(sumeer): Based on experiments, reduce the knobs below by making the
// covering self-tuning.
type S2Config struct {
	// MinLevel is the minimum cell level stored in the index. If left unset, it
	// defaults to 0.
	MinLevel int32 `protobuf:"varint,1,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	// MaxLevel is the maximum cell level stored in the index. If left unset, it
	// defaults to 30.
	MaxLevel int32 `protobuf:"varint,2,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	// `MaxLevel-MinLevel` must be an exact multiple of LevelMod. If left unset,
	// it defaults to 1.
	LevelMod int32 `protobuf:"varint,3,opt,name=level_mod,json=levelMod,proto3" json:"level_mod,omitempty"`
	// MaxCells is a soft hint for the maximum number of entries used to store a
	// single geospatial object. If left unset, it defaults to 4.
	MaxCells int32 `protobuf:"varint,4,opt,name=max_cells,json=maxCells,proto3" json:"max_cells,omitempty"`
}

func (m *S2Config) Reset()         { *m = S2Config{} }
func (m *S2Config) String() string { return proto.CompactTextString(m) }
func (*S2Config) ProtoMessage()    {}
func (*S2Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c5614d57d337886, []int{1}
}
func (m *S2Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *S2Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2Config.Merge(m, src)
}
func (m *S2Config) XXX_Size() int {
	return m.Size()
}
func (m *S2Config) XXX_DiscardUnknown() {
	xxx_messageInfo_S2Config.DiscardUnknown(m)
}

var xxx_messageInfo_S2Config proto.InternalMessageInfo

type S2GeographyConfig struct {
	S2Config *S2Config `protobuf:"bytes,1,opt,name=s2_config,json=s2Config,proto3" json:"s2_config,omitempty"`
}

func (m *S2GeographyConfig) Reset()         { *m = S2GeographyConfig{} }
func (m *S2GeographyConfig) String() string { return proto.CompactTextString(m) }
func (*S2GeographyConfig) ProtoMessage()    {}
func (*S2GeographyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c5614d57d337886, []int{2}
}
func (m *S2GeographyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2GeographyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *S2GeographyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2GeographyConfig.Merge(m, src)
}
func (m *S2GeographyConfig) XXX_Size() int {
	return m.Size()
}
func (m *S2GeographyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_S2GeographyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_S2GeographyConfig proto.InternalMessageInfo

type S2GeometryConfig struct {
	// The rectangle bounds of the plane that will be efficiently indexed. Shapes
	// should rarely exceed these bounds.
	MinX     float64   `protobuf:"fixed64,1,opt,name=min_x,json=minX,proto3" json:"min_x,omitempty"`
	MaxX     float64   `protobuf:"fixed64,2,opt,name=max_x,json=maxX,proto3" json:"max_x,omitempty"`
	MinY     float64   `protobuf:"fixed64,3,opt,name=min_y,json=minY,proto3" json:"min_y,omitempty"`
	MaxY     float64   `protobuf:"fixed64,4,opt,name=max_y,json=maxY,proto3" json:"max_y,omitempty"`
	S2Config *S2Config `protobuf:"bytes,5,opt,name=s2_config,json=s2Config,proto3" json:"s2_config,omitempty"`
}

func (m *S2GeometryConfig) Reset()         { *m = S2GeometryConfig{} }
func (m *S2GeometryConfig) String() string { return proto.CompactTextString(m) }
func (*S2GeometryConfig) ProtoMessage()    {}
func (*S2GeometryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c5614d57d337886, []int{3}
}
func (m *S2GeometryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2GeometryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *S2GeometryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2GeometryConfig.Merge(m, src)
}
func (m *S2GeometryConfig) XXX_Size() int {
	return m.Size()
}
func (m *S2GeometryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_S2GeometryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_S2GeometryConfig proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Config)(nil), "cockroach.parser.geo.geoindex.Config")
	proto.RegisterType((*S2Config)(nil), "cockroach.parser.geo.geoindex.S2Config")
	proto.RegisterType((*S2GeographyConfig)(nil), "cockroach.parser.geo.geoindex.S2GeographyConfig")
	proto.RegisterType((*S2GeometryConfig)(nil), "cockroach.parser.geo.geoindex.S2GeometryConfig")
}

func init() { proto.RegisterFile("geo/geopb/config.proto", fileDescriptor_6c5614d57d337886) }

var fileDescriptor_6c5614d57d337886 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xbd, 0x6e, 0xfa, 0x30,
	0x1c, 0x8c, 0xf9, 0x03, 0x0a, 0xe6, 0x3f, 0xb4, 0x69, 0x85, 0xa2, 0x56, 0x32, 0x88, 0x89, 0x2e,
	0x89, 0x94, 0x6e, 0x48, 0x5d, 0xca, 0x50, 0x55, 0xa2, 0x52, 0x05, 0x0b, 0x74, 0x89, 0xf2, 0xe1,
	0x9a, 0x88, 0x24, 0x8e, 0x12, 0x5a, 0x25, 0x7b, 0x1f, 0xa0, 0x8f, 0xc0, 0xce, 0x8b, 0x30, 0x32,
	0x32, 0xb6, 0x61, 0xe9, 0x63, 0x54, 0x71, 0x9c, 0xa0, 0x7e, 0x0e, 0x1d, 0x22, 0xfd, 0x7c, 0x77,
	0xbf, 0xd3, 0x9d, 0x63, 0xd8, 0x22, 0x98, 0xaa, 0x04, 0xd3, 0xc0, 0x54, 0x2d, 0xea, 0xdf, 0x3b,
	0x44, 0x09, 0x42, 0xba, 0xa0, 0x52, 0xcb, 0xa2, 0xd6, 0x3c, 0xa4, 0x86, 0x35, 0x53, 0x08, 0xa6,
	0xd9, 0xe7, 0xf8, 0x36, 0x8e, 0x4f, 0x8e, 0x09, 0x25, 0x94, 0x49, 0xd4, 0x6c, 0xca, 0xd5, 0xdd,
	0x15, 0x80, 0xf5, 0x01, 0x5b, 0x97, 0x86, 0xf0, 0x7f, 0xa4, 0xe9, 0x04, 0x53, 0x12, 0x1a, 0xc1,
	0x2c, 0x91, 0x41, 0x07, 0xf4, 0x9a, 0xda, 0x99, 0xf2, 0xbd, 0x9f, 0x32, 0xd6, 0xae, 0x0a, 0x69,
	0x6e, 0x30, 0x6a, 0x46, 0x7b, 0x48, 0xba, 0x86, 0xcd, 0xdc, 0xcd, 0xc3, 0x8b, 0x30, 0x91, 0x2b,
	0xcc, 0xac, 0xf7, 0xab, 0x19, 0x53, 0x72, 0x2f, 0x18, 0x95, 0x48, 0x5f, 0x5c, 0x2f, 0xdb, 0xe0,
	0x6d, 0xd9, 0x06, 0xdd, 0x27, 0x00, 0xc5, 0xb1, 0xc6, 0xf3, 0x9e, 0xc2, 0x86, 0xe7, 0xf8, 0xba,
	0x8b, 0x1f, 0xb1, 0xcb, 0xc2, 0xd6, 0x46, 0xa2, 0xe7, 0xf8, 0xc3, 0xec, 0xcc, 0x48, 0x23, 0xe6,
	0x64, 0x85, 0x93, 0x46, 0x5c, 0x92, 0x8c, 0xd0, 0x3d, 0x6a, 0xcb, 0xff, 0x72, 0x92, 0x01, 0x37,
	0xd4, 0x2e, 0x36, 0x2d, 0xec, 0xba, 0x91, 0x5c, 0x2d, 0x37, 0x07, 0xd9, 0xb9, 0x5f, 0x65, 0x31,
	0x26, 0xf0, 0xf0, 0x4b, 0x7b, 0xe9, 0x02, 0x36, 0x22, 0x4d, 0xcf, 0x7f, 0x05, 0xbf, 0xbb, 0xce,
	0xcf, 0x75, 0x79, 0x4d, 0x31, 0xe2, 0x13, 0x77, 0x5e, 0x01, 0x78, 0xf0, 0xf9, 0x2e, 0xa4, 0x23,
	0x58, 0xcb, 0x8a, 0xc6, 0xcc, 0x15, 0x8c, 0xaa, 0x9e, 0xe3, 0x4f, 0x18, 0x68, 0xc4, 0x7a, 0xcc,
	0xca, 0x65, 0xa0, 0x11, 0x4f, 0x0a, 0x65, 0xc2, 0x4a, 0xe5, 0xca, 0x69, 0xa1, 0x4c, 0x58, 0x99,
	0x5c, 0x39, 0xfd, 0x98, 0xb6, 0xf6, 0xb7, 0xb4, 0x97, 0xb7, 0xeb, 0x57, 0x24, 0xac, 0x53, 0x04,
	0x36, 0x29, 0x02, 0xdb, 0x14, 0x81, 0x97, 0x14, 0x81, 0xe7, 0x1d, 0x12, 0x36, 0x3b, 0x24, 0x6c,
	0x77, 0x48, 0xb8, 0x53, 0x88, 0xb3, 0x98, 0x3d, 0x98, 0x8a, 0x45, 0x3d, 0xb5, 0x74, 0xb7, 0xcd,
	0xfd, 0xac, 0x06, 0x73, 0xa2, 0x96, 0x2f, 0xd9, 0xac, 0xb3, 0x57, 0x79, 0xfe, 0x1e, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0xdc, 0x45, 0x29, 0xdd, 0x02, 0x00, 0x00,
}

func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S2Geography.Equal(that1.S2Geography) {
		return false
	}
	if !this.S2Geometry.Equal(that1.S2Geometry) {
		return false
	}
	return true
}
func (this *S2Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2Config)
	if !ok {
		that2, ok := that.(S2Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinLevel != that1.MinLevel {
		return false
	}
	if this.MaxLevel != that1.MaxLevel {
		return false
	}
	if this.LevelMod != that1.LevelMod {
		return false
	}
	if this.MaxCells != that1.MaxCells {
		return false
	}
	return true
}
func (this *S2GeographyConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2GeographyConfig)
	if !ok {
		that2, ok := that.(S2GeographyConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S2Config.Equal(that1.S2Config) {
		return false
	}
	return true
}
func (this *S2GeometryConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2GeometryConfig)
	if !ok {
		that2, ok := that.(S2GeometryConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinX != that1.MinX {
		return false
	}
	if this.MaxX != that1.MaxX {
		return false
	}
	if this.MinY != that1.MinY {
		return false
	}
	if this.MaxY != that1.MaxY {
		return false
	}
	if !this.S2Config.Equal(that1.S2Config) {
		return false
	}
	return true
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2Geometry != nil {
		{
			size, err := m.S2Geometry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.S2Geography != nil {
		{
			size, err := m.S2Geography.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxCells != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxCells))
		i--
		dAtA[i] = 0x20
	}
	if m.LevelMod != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.LevelMod))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxLevel != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.MinLevel != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MinLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2GeographyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2GeographyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2GeographyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2Config != nil {
		{
			size, err := m.S2Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2GeometryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2GeometryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2GeometryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2Config != nil {
		{
			size, err := m.S2Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxY != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxY))))
		i--
		dAtA[i] = 0x21
	}
	if m.MinY != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinY))))
		i--
		dAtA[i] = 0x19
	}
	if m.MaxX != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxX))))
		i--
		dAtA[i] = 0x11
	}
	if m.MinX != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinX))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S2Geography != nil {
		l = m.S2Geography.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.S2Geometry != nil {
		l = m.S2Geometry.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *S2Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLevel != 0 {
		n += 1 + sovConfig(uint64(m.MinLevel))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovConfig(uint64(m.MaxLevel))
	}
	if m.LevelMod != 0 {
		n += 1 + sovConfig(uint64(m.LevelMod))
	}
	if m.MaxCells != 0 {
		n += 1 + sovConfig(uint64(m.MaxCells))
	}
	return n
}

func (m *S2GeographyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S2Config != nil {
		l = m.S2Config.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *S2GeometryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinX != 0 {
		n += 9
	}
	if m.MaxX != 0 {
		n += 9
	}
	if m.MinY != 0 {
		n += 9
	}
	if m.MaxY != 0 {
		n += 9
	}
	if m.S2Config != nil {
		l = m.S2Config.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Config) GetValue() interface{} {
	if this.S2Geography != nil {
		return this.S2Geography
	}
	if this.S2Geometry != nil {
		return this.S2Geometry
	}
	return nil
}

func (this *Config) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *S2GeographyConfig:
		this.S2Geography = vt
	case *S2GeometryConfig:
		this.S2Geometry = vt
	default:
		return false
	}
	return true
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2Geography", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2Geography == nil {
				m.S2Geography = &S2GeographyConfig{}
			}
			if err := m.S2Geography.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2Geometry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2Geometry == nil {
				m.S2Geometry = &S2GeometryConfig{}
			}
			if err := m.S2Geometry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMod", wireType)
			}
			m.LevelMod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelMod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCells", wireType)
			}
			m.MaxCells = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCells |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2GeographyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2GeographyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2GeographyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2Config == nil {
				m.S2Config = &S2Config{}
			}
			if err := m.S2Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2GeometryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2GeometryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2GeometryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinX", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinX = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxX", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxX = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinY", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinY = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxY", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxY = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2Config == nil {
				m.S2Config = &S2Config{}
			}
			if err := m.S2Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)

