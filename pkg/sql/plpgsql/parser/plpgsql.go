// Code generated by goyacc -p plpgsql -o bazel-out/darwin_arm64-fastbuild/bin/pkg/sql/plpgsql/parser/plpgsql.go plpgsql-gen.y. DO NOT EDIT.

//line plpgsql-gen.y:2
package parser

import __yyfmt__ "fmt"

//line plpgsql-gen.y:2

import (
	"strings"

	"github.com/cockroachdb/cockroachdb-parser/pkg/build"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/parser"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/parser/statements"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/scanner"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/sem/plpgsqltree"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/types"
	"github.com/cockroachdb/errors"
	"github.com/cockroachdb/redact"
)

//line plpgsql-gen.y:20
func setErr(plpgsqllex plpgsqlLexer, err error) int {
	plpgsqllex.(*lexer).setErr(err)
	return 1
}

func setErrNoDetails(plpgsqllex plpgsqlLexer, err error) int {
	plpgsqllex.(*lexer).setErrNoDetails(err)
	return 1
}

func unimplemented(plpgsqllex plpgsqlLexer, feature string) int {
	plpgsqllex.(*lexer).Unimplemented(feature)
	return 1
}

var _ scanner.ScanSymType = &plpgsqlSymType{}

func (s *plpgsqlSymType) ID() int32 {
	return s.id
}

func (s *plpgsqlSymType) SetID(id int32) {
	s.id = id
}

func (s *plpgsqlSymType) Pos() int32 {
	return s.pos
}

func (s *plpgsqlSymType) SetPos(pos int32) {
	s.pos = pos
}

func (s *plpgsqlSymType) Str() string {
	return s.str
}

func (s *plpgsqlSymType) SetStr(str string) {
	s.str = str
}

func (s *plpgsqlSymType) UnionVal() interface{} {
	return s.union.val
}

func (s *plpgsqlSymType) SetUnionVal(val interface{}) {
	s.union.val = val
}

func (s *plpgsqlSymType) plpgsqlScanSymType() {}

type plpgsqlSymUnion struct {
	val interface{}
}

func (u *plpgsqlSymUnion) block() *plpgsqltree.Block {
	return u.val.(*plpgsqltree.Block)
}

func (u *plpgsqlSymUnion) caseWhen() *plpgsqltree.CaseWhen {
	return u.val.(*plpgsqltree.CaseWhen)
}

func (u *plpgsqlSymUnion) caseWhens() []*plpgsqltree.CaseWhen {
	return u.val.([]*plpgsqltree.CaseWhen)
}

func (u *plpgsqlSymUnion) statement() plpgsqltree.Statement {
	return u.val.(plpgsqltree.Statement)
}

func (u *plpgsqlSymUnion) statements() []plpgsqltree.Statement {
	return u.val.([]plpgsqltree.Statement)
}

func (u *plpgsqlSymUnion) int32() int32 {
	return u.val.(int32)
}

func (u *plpgsqlSymUnion) uint32() uint32 {
	return u.val.(uint32)
}

func (u *plpgsqlSymUnion) bool() bool {
	return u.val.(bool)
}

func (u *plpgsqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}

func (u *plpgsqlSymUnion) typ() tree.ResolvableTypeReference {
	return u.val.(tree.ResolvableTypeReference)
}

func (u *plpgsqlSymUnion) getDiagnosticsKind() plpgsqltree.GetDiagnosticsKind {
	return u.val.(plpgsqltree.GetDiagnosticsKind)
}

func (u *plpgsqlSymUnion) getDiagnosticsItem() *plpgsqltree.GetDiagnosticsItem {
	return u.val.(*plpgsqltree.GetDiagnosticsItem)
}

func (u *plpgsqlSymUnion) getDiagnosticsItemList() plpgsqltree.GetDiagnosticsItemList {
	return u.val.(plpgsqltree.GetDiagnosticsItemList)
}

func (u *plpgsqlSymUnion) elseIf() []plpgsqltree.ElseIf {
	return u.val.([]plpgsqltree.ElseIf)
}

func (u *plpgsqlSymUnion) open() *plpgsqltree.Open {
	return u.val.(*plpgsqltree.Open)
}

func (u *plpgsqlSymUnion) expr() plpgsqltree.Expr {
	if u.val == nil {
		return nil
	}
	return u.val.(plpgsqltree.Expr)
}

func (u *plpgsqlSymUnion) exprs() []plpgsqltree.Expr {
	return u.val.([]plpgsqltree.Expr)
}

func (u *plpgsqlSymUnion) raiseOption() *plpgsqltree.RaiseOption {
	return u.val.(*plpgsqltree.RaiseOption)
}

func (u *plpgsqlSymUnion) raiseOptions() []plpgsqltree.RaiseOption {
	return u.val.([]plpgsqltree.RaiseOption)
}

func (u *plpgsqlSymUnion) exception() *plpgsqltree.Exception {
	return u.val.(*plpgsqltree.Exception)
}

func (u *plpgsqlSymUnion) exceptions() []plpgsqltree.Exception {
	return u.val.([]plpgsqltree.Exception)
}

func (u *plpgsqlSymUnion) condition() *plpgsqltree.Condition {
	return u.val.(*plpgsqltree.Condition)
}

func (u *plpgsqlSymUnion) conditions() []plpgsqltree.Condition {
	return u.val.([]plpgsqltree.Condition)
}

func (u *plpgsqlSymUnion) cursorScrollOption() tree.CursorScrollOption {
	return u.val.(tree.CursorScrollOption)
}

func (u *plpgsqlSymUnion) sqlStatement() tree.Statement {
	return u.val.(statements.Statement[tree.Statement]).AST
}

func (u *plpgsqlSymUnion) numAnnotations() tree.AnnotationIdx {
	return u.val.(statements.Statement[tree.Statement]).NumAnnotations
}

func (u *plpgsqlSymUnion) variables() []plpgsqltree.Variable {
	return u.val.([]plpgsqltree.Variable)
}

func (u *plpgsqlSymUnion) forLoopControl() plpgsqltree.ForLoopControl {
	return u.val.(plpgsqltree.ForLoopControl)
}

func (u *plpgsqlSymUnion) doBlockOptions() tree.DoBlockOptions {
	return u.val.(tree.DoBlockOptions)
}

func (u *plpgsqlSymUnion) doBlockOption() tree.DoBlockOption {
	return u.val.(tree.DoBlockOption)
}

//line plpgsql-gen.y:338
type plpgsqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union plpgsqlSymUnion
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const LESS_LESS = 57363
const GREATER_GREATER = 57364
const ABSOLUTE = 57365
const ALIAS = 57366
const ALL = 57367
const AND = 57368
const ARRAY = 57369
const ASSERT = 57370
const BACKWARD = 57371
const BEGIN = 57372
const BY = 57373
const CALL = 57374
const CASE = 57375
const CHAIN = 57376
const CLOSE = 57377
const COLLATE = 57378
const COLUMN = 57379
const COLUMN_NAME = 57380
const COMMIT = 57381
const CONSTANT = 57382
const CONSTRAINT = 57383
const CONSTRAINT_NAME = 57384
const CONTINUE = 57385
const CURRENT = 57386
const CURSOR = 57387
const DATATYPE = 57388
const DEBUG = 57389
const DECLARE = 57390
const DEFAULT = 57391
const DETAIL = 57392
const DIAGNOSTICS = 57393
const DO = 57394
const DUMP = 57395
const ELSE = 57396
const ELSIF = 57397
const END = 57398
const END_CASE = 57399
const END_IF = 57400
const ERRCODE = 57401
const ERROR = 57402
const EXCEPTION = 57403
const EXECUTE = 57404
const EXIT = 57405
const FETCH = 57406
const FIRST = 57407
const FOR = 57408
const FOREACH = 57409
const FORWARD = 57410
const FROM = 57411
const GET = 57412
const HINT = 57413
const IF = 57414
const IMPORT = 57415
const IN = 57416
const INFO = 57417
const INSERT = 57418
const INTO = 57419
const IS = 57420
const LANGUAGE = 57421
const LAST = 57422
const LOG = 57423
const LOOP = 57424
const MERGE = 57425
const MESSAGE = 57426
const MESSAGE_TEXT = 57427
const MOVE = 57428
const NEXT = 57429
const NO = 57430
const NO_SCROLL = 57431
const NOT = 57432
const NOTICE = 57433
const NULL = 57434
const OPEN = 57435
const OPTION = 57436
const OR = 57437
const PERFORM = 57438
const PG_CONTEXT = 57439
const PG_DATATYPE_NAME = 57440
const PG_EXCEPTION_CONTEXT = 57441
const PG_EXCEPTION_DETAIL = 57442
const PG_EXCEPTION_HINT = 57443
const PRINT_STRICT_PARAMS = 57444
const PRIOR = 57445
const QUERY = 57446
const RAISE = 57447
const RELATIVE = 57448
const RETURN = 57449
const RETURN_NEXT = 57450
const RETURN_QUERY = 57451
const RETURNED_SQLSTATE = 57452
const REVERSE = 57453
const ROLLBACK = 57454
const ROW_COUNT = 57455
const ROWTYPE = 57456
const SCHEMA = 57457
const SCHEMA_NAME = 57458
const SCROLL = 57459
const SLICE = 57460
const SQLSTATE = 57461
const STACKED = 57462
const STRICT = 57463
const TABLE = 57464
const TABLE_NAME = 57465
const THEN = 57466
const TO = 57467
const TYPE = 57468
const UPSERT = 57469
const USE_COLUMN = 57470
const USE_VARIABLE = 57471
const USING = 57472
const VARIABLE_CONFLICT = 57473
const WARNING = 57474
const WHEN = 57475
const WHILE = 57476

var plpgsqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"LESS_LESS",
	"GREATER_GREATER",
	"ABSOLUTE",
	"ALIAS",
	"ALL",
	"AND",
	"ARRAY",
	"ASSERT",
	"BACKWARD",
	"BEGIN",
	"BY",
	"CALL",
	"CASE",
	"CHAIN",
	"CLOSE",
	"COLLATE",
	"COLUMN",
	"COLUMN_NAME",
	"COMMIT",
	"CONSTANT",
	"CONSTRAINT",
	"CONSTRAINT_NAME",
	"CONTINUE",
	"CURRENT",
	"CURSOR",
	"DATATYPE",
	"DEBUG",
	"DECLARE",
	"DEFAULT",
	"DETAIL",
	"DIAGNOSTICS",
	"DO",
	"DUMP",
	"ELSE",
	"ELSIF",
	"END",
	"END_CASE",
	"END_IF",
	"ERRCODE",
	"ERROR",
	"EXCEPTION",
	"EXECUTE",
	"EXIT",
	"FETCH",
	"FIRST",
	"FOR",
	"FOREACH",
	"FORWARD",
	"FROM",
	"GET",
	"HINT",
	"IF",
	"IMPORT",
	"IN",
	"INFO",
	"INSERT",
	"INTO",
	"IS",
	"LANGUAGE",
	"LAST",
	"LOG",
	"LOOP",
	"MERGE",
	"MESSAGE",
	"MESSAGE_TEXT",
	"MOVE",
	"NEXT",
	"NO",
	"NO_SCROLL",
	"NOT",
	"NOTICE",
	"NULL",
	"OPEN",
	"OPTION",
	"OR",
	"PERFORM",
	"PG_CONTEXT",
	"PG_DATATYPE_NAME",
	"PG_EXCEPTION_CONTEXT",
	"PG_EXCEPTION_DETAIL",
	"PG_EXCEPTION_HINT",
	"PRINT_STRICT_PARAMS",
	"PRIOR",
	"QUERY",
	"RAISE",
	"RELATIVE",
	"RETURN",
	"RETURN_NEXT",
	"RETURN_QUERY",
	"RETURNED_SQLSTATE",
	"REVERSE",
	"ROLLBACK",
	"ROW_COUNT",
	"ROWTYPE",
	"SCHEMA",
	"SCHEMA_NAME",
	"SCROLL",
	"SLICE",
	"SQLSTATE",
	"STACKED",
	"STRICT",
	"TABLE",
	"TABLE_NAME",
	"THEN",
	"TO",
	"TYPE",
	"UPSERT",
	"USE_COLUMN",
	"USE_VARIABLE",
	"USING",
	"VARIABLE_CONFLICT",
	"WARNING",
	"WHEN",
	"WHILE",
	"';'",
	"'('",
	"','",
	"'='",
	"'.'",
}

var plpgsqlStatenames = [...]string{}

const plpgsqlEofCode = 1
const plpgsqlErrCode = 2
const plpgsqlInitialStackSize = 16

//line plpgsql-gen.y:1756

//line yacctab:1
var plpgsqlExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 100,
	30, 7,
	-2, 10,
	-1, 102,
	45, 16,
	-2, 31,
	-1, 106,
	30, 185,
	48, 185,
	56, 171,
	-2, 187,
	-1, 244,
	30, 185,
	48, 185,
	-2, 187,
	-1, 272,
	30, 186,
	48, 186,
	-2, 188,
	-1, 286,
	30, 185,
	48, 185,
	54, 92,
	55, 92,
	58, 92,
	-2, 187,
	-1, 330,
	30, 185,
	48, 185,
	56, 175,
	133, 175,
	-2, 187,
	-1, 335,
	30, 185,
	48, 185,
	57, 102,
	-2, 187,
	-1, 362,
	30, 185,
	48, 185,
	54, 100,
	57, 100,
	133, 100,
	-2, 187,
	-1, 374,
	30, 185,
	48, 185,
	58, 95,
	-2, 187,
	-1, 382,
	30, 185,
	48, 185,
	54, 93,
	55, 93,
	58, 93,
	-2, 187,
}

const plpgsqlPrivate = 57344

const plpgsqlLast = 1237

var plpgsqlAct = [...]int16{
	244, 193, 11, 187, 318, 306, 243, 208, 302, 183,
	305, 104, 300, 209, 234, 241, 111, 196, 194, 211,
	247, 180, 220, 9, 144, 348, 186, 186, 301, 113,
	201, 186, 350, 347, 351, 348, 212, 249, 230, 248,
	381, 168, 380, 376, 206, 375, 191, 192, 154, 371,
	366, 365, 158, 146, 357, 164, 356, 114, 203, 166,
	326, 355, 189, 149, 202, 344, 341, 337, 297, 296,
	284, 277, 159, 271, 204, 265, 292, 268, 267, 260,
	259, 258, 156, 148, 162, 251, 219, 182, 6, 289,
	160, 255, 145, 169, 254, 242, 170, 181, 303, 106,
	379, 282, 336, 172, 177, 239, 163, 215, 213, 198,
	104, 101, 165, 161, 190, 205, 157, 110, 199, 327,
	274, 197, 269, 338, 293, 153, 212, 150, 151, 152,
	281, 280, 167, 112, 294, 320, 378, 175, 353, 372,
	334, 178, 264, 279, 360, 359, 323, 171, 185, 185,
	108, 195, 8, 185, 184, 176, 361, 312, 225, 321,
	98, 313, 221, 272, 261, 105, 314, 4, 242, 304,
	309, 283, 319, 238, 218, 217, 270, 155, 228, 311,
	231, 207, 113, 216, 118, 2, 278, 223, 229, 226,
	222, 310, 107, 5, 1, 299, 298, 237, 213, 369,
	235, 232, 317, 214, 308, 287, 256, 240, 233, 179,
	114, 115, 100, 99, 7, 252, 250, 257, 253, 173,
	125, 121, 143, 142, 141, 140, 139, 138, 276, 137,
	262, 136, 263, 135, 266, 316, 134, 133, 124, 132,
	286, 131, 315, 130, 129, 291, 290, 128, 285, 127,
	126, 123, 122, 120, 119, 116, 288, 358, 333, 210,
	307, 200, 147, 295, 3, 340, 246, 188, 245, 224,
	174, 328, 322, 273, 109, 324, 102, 0, 0, 0,
	0, 0, 330, 325, 0, 0, 329, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 331, 0, 332,
	339, 235, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 343, 346, 345, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 352,
	0, 0, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 363, 0, 0, 0, 0, 0, 364, 0, 0,
	0, 10, 0, 0, 367, 370, 368, 0, 0, 0,
	0, 374, 0, 373, 0, 0, 377, 0, 0, 0,
	12, 13, 0, 14, 15, 16, 17, 0, 0, 18,
	382, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 0, 33, 34, 35, 36,
	37, 0, 38, 0, 0, 0, 39, 40, 41, 0,
	42, 43, 44, 0, 0, 45, 0, 46, 47, 0,
	48, 0, 49, 50, 0, 51, 52, 53, 54, 0,
	55, 56, 57, 58, 59, 60, 61, 0, 62, 0,
	63, 64, 0, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 10, 90,
	91, 0, 0, 92, 93, 94, 95, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 12, 13, 0,
	14, 15, 16, 17, 0, 0, 18, 0, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 0, 33, 34, 35, 36, 37, 0, 38,
	0, 0, 0, 39, 40, 41, 0, 42, 43, 44,
	0, 0, 45, 0, 46, 47, 0, 48, 0, 49,
	50, 0, 51, 52, 53, 54, 0, 55, 56, 57,
	58, 59, 60, 61, 0, 62, 0, 63, 64, 0,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 236, 89, 275, 90, 91, 0, 0,
	92, 93, 94, 95, 0, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 12, 13, 0, 14, 15, 16,
	17, 0, 0, 18, 0, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 0,
	33, 34, 35, 36, 37, 0, 38, 0, 0, 0,
	39, 40, 41, 0, 42, 43, 44, 0, 0, 45,
	0, 46, 47, 0, 48, 0, 49, 50, 0, 51,
	52, 53, 54, 0, 55, 56, 57, 58, 59, 60,
	61, 0, 62, 0, 63, 64, 0, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 227, 90, 91, 0, 0, 92, 93, 94,
	95, 0, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 12, 13, 0, 14, 15, 16, 17, 0, 0,
	18, 0, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 0, 33, 34, 35,
	36, 37, 0, 38, 0, 0, 0, 39, 40, 41,
	0, 42, 43, 44, 0, 0, 45, 0, 46, 47,
	0, 48, 0, 49, 50, 0, 51, 52, 53, 54,
	0, 55, 56, 57, 58, 59, 60, 61, 0, 62,
	0, 63, 64, 0, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 103,
	90, 91, 0, 0, 92, 93, 94, 95, 0, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 12, 13,
	0, 14, 15, 16, 17, 0, 0, 18, 0, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 0, 33, 34, 35, 36, 37, 0,
	38, 0, 0, 0, 39, 40, 41, 0, 42, 43,
	44, 0, 0, 45, 0, 46, 47, 0, 48, 0,
	49, 50, 0, 51, 52, 53, 54, 0, 55, 56,
	57, 58, 59, 60, 61, 0, 62, 0, 63, 64,
	0, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 0, 90, 91, 0,
	0, 92, 93, 94, 95, 0, 96, 97, 12, 13,
	0, 14, 15, 16, 17, 0, 0, 18, 0, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 0, 33, 34, 35, 36, 37, 0,
	38, 0, 0, 0, 39, 40, 41, 0, 42, 43,
	44, 0, 0, 45, 0, 46, 47, 0, 48, 0,
	49, 50, 0, 51, 52, 53, 54, 0, 55, 56,
	57, 58, 59, 60, 61, 0, 62, 0, 63, 64,
	0, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 144, 90, 91, 0,
	0, 92, 93, 94, 95, 0, 96, 97, 0, 0,
	0, 0, 0, 168, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 158, 146, 0, 164, 0, 0,
	0, 166, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 156, 148, 162, 0, 0, 0,
	0, 0, 160, 144, 145, 169, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 163, 0,
	168, 0, 0, 0, 165, 161, 0, 154, 157, 0,
	0, 158, 146, 0, 164, 0, 0, 153, 166, 150,
	151, 152, 149, 0, 167, 0, 0, 0, 0, 0,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 156, 148, 162, 0, 0, 0, 0, 0, 160,
	0, 145, 169, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 163, 0, 0, 0, 0,
	0, 165, 161, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 150, 151, 152, 0,
	0, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171,
}

var plpgsqlPact = [...]int16{
	146, -1000, -47, 104, 347, -1000, -1000, 130, 815, 143,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	102, -1000, 93, -1000, -1000, -1000, 1042, 815, -1000, -1000,
	71, 110, -1000, -13, -1000, 85, -1000, -36, -48, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15, -1000, -1000, -20, 347, 347,
	-1000, 34, 5, -17, -1000, -1000, -1000, -1000, -1000, 119,
	63, 171, -1000, -1000, 170, -49, 136, 136, 347, -1000,
	-1000, -1000, -1000, -1000, 122, 698, -98, -1000, 347, -36,
	-1000, 464, -1000, -1000, 169, -1000, -1000, -19, -38, -1000,
	-1000, -1000, -1000, -96, -1000, -96, -50, -1000, -1000, -1000,
	87, -1000, -1000, -1000, -1000, -1000, -1000, -54, -55, -56,
	29, -1000, -1000, 347, 91, -1000, -1000, -60, -57, -1000,
	-58, 88, -62, 141, 30, 581, -64, -1000, -1000, 65,
	-1000, -1000, -1000, 6, -1000, -1000, 164, -65, 10, -1000,
	35, -1000, -1000, 347, 20, 42, 60, -1000, -1000, -1000,
	-1000, -1000, -66, -67, -109, -32, 162, 120, -1000, -1000,
	-1000, -1000, -1000, -1000, 168, -1000, 69, -1000, -1000, -1000,
	125, -1000, -1000, 11, 27, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 464, -1000, -1000, -1000, 1109, 83, -1000, -1000,
	-22, -68, 41, -1000, -1000, -69, -1000, -1000, -32, -109,
	-1000, -1000, -70, 120, -32, -102, -1000, 10, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -103, -1000, 10,
	76, -1000, -1000, -1000, -74, -1000, -1000, -1000, -1000, -79,
	1109, -1000, -81, 90, 123, 1109, -1000, -1000, -1000, 347,
	-1000, -1000, -84, -1000, -1000, -112, -85, -1000, 120, -1000,
	-1000, 168, 925, -1000, -86, -1000, -1000, -1000, 81, -1000,
	-1000, -90, 1109, -92, 347, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 64, -24, 1109, -1000, -1000, -93, -95, -1000,
	-1000, -1000, 1109,
}

var plpgsqlPgo = [...]int16{
	0, 276, 275, 274, 273, 272, 271, 270, 269, 13,
	269, 7, 3, 268, 267, 17, 20, 266, 266, 265,
	18, 264, 262, 1, 261, 260, 259, 19, 0, 258,
	257, 6, 184, 255, 254, 253, 252, 251, 250, 249,
	247, 244, 243, 241, 239, 238, 237, 236, 233, 231,
	229, 227, 226, 225, 224, 223, 222, 221, 220, 218,
	111, 214, 213, 212, 211, 209, 21, 208, 14, 15,
	207, 205, 203, 202, 4, 199, 5, 10, 8, 12,
	196, 195, 16, 22, 2, 194, 193, 192, 189, 188,
	186, 186, 186, 9, 186, 181, 177, 177,
}

var plpgsqlR1 = [...]int8{
	0, 85, 86, 86, 32, 61, 61, 62, 62, 87,
	87, 63, 63, 60, 60, 60, 82, 82, 82, 6,
	89, 89, 91, 91, 92, 90, 90, 88, 88, 1,
	1, 3, 3, 7, 8, 8, 8, 4, 4, 5,
	5, 2, 2, 93, 93, 28, 28, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 46, 47, 48, 26, 26, 27, 27,
	34, 34, 49, 72, 72, 72, 73, 73, 74, 75,
	94, 35, 29, 29, 30, 30, 57, 14, 70, 70,
	69, 71, 71, 36, 37, 45, 19, 17, 58, 18,
	18, 38, 39, 40, 40, 40, 15, 59, 41, 41,
	41, 41, 41, 24, 24, 24, 24, 24, 24, 24,
	78, 78, 77, 77, 76, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 80, 80, 81, 81, 79, 42,
	95, 31, 43, 96, 96, 96, 96, 96, 44, 50,
	50, 50, 51, 52, 53, 54, 55, 56, 83, 83,
	83, 64, 64, 65, 65, 66, 67, 67, 68, 68,
	9, 11, 12, 13, 10, 21, 21, 22, 22, 23,
	23, 16, 16, 20, 20, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97,
}

var plpgsqlR2 = [...]int8{
	0, 2, 0, 1, 7, 2, 0, 1, 0, 1,
	0, 3, 1, 6, 5, 6, 0, 2, 1, 2,
	1, 0, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 0, 2, 2, 0, 2, 1,
	2, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 1, 2, 1, 2,
	4, 6, 5, 0, 1, 1, 3, 1, 3, 1,
	1, 9, 0, 5, 0, 2, 7, 0, 2, 1,
	4, 0, 2, 5, 7, 8, 0, 0, 2, 0,
	2, 3, 3, 3, 4, 4, 0, 0, 2, 6,
	5, 6, 5, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 1, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 6, 1, 1, 3, 2, 3, 3, 2, 3,
	0, 0, 2, 2, 1, 4, 3, 1, 1, 2,
	0, 0, 0, 0, 0, 0, 3, 0, 3, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var plpgsqlChk = [...]int16{
	-1000, -85, -32, -21, 21, -86, 135, -61, 48, -20,
	4, -84, 23, 24, 26, 27, 28, 29, 32, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 49, 50, 51, 52, 53, 55, 59,
	60, 61, 63, 64, 65, 68, 70, 71, 73, 75,
	76, 78, 79, 80, 81, 83, 84, 85, 86, 87,
	88, 89, 91, 93, 94, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	122, 123, 126, 127, 128, 129, 131, 132, 30, -62,
	-63, -60, -1, 4, -84, 22, -28, -87, 48, -3,
	24, -82, 40, 89, 117, -64, -33, 61, -32, -34,
	-35, -57, -36, -37, -45, -58, -38, -39, -40, -41,
	-42, -43, -44, -46, -47, -48, -49, -50, -51, -52,
	-53, -54, -55, -56, 4, 72, 33, -22, 63, 43,
	107, 108, 109, 105, 28, -96, 62, 96, 32, 52,
	70, 93, 64, 86, 35, 92, 39, 112, 21, 73,
	76, 127, 83, -60, -7, 66, 45, 117, 56, -65,
	-66, 133, 135, -93, 139, 138, 16, -12, -14, 82,
	134, 66, 67, -23, -20, -23, -15, 87, 104, 135,
	-24, 47, 81, 75, 91, 132, 61, -95, -11, -9,
	-26, -27, 7, 79, -72, 44, 120, 4, 4, 135,
	-83, 26, -83, -20, -8, 36, -88, 4, -84, -89,
	136, -23, -66, -67, -68, -20, 119, -9, 4, 124,
	-70, -69, 133, -31, -28, -13, -17, -16, 135, 133,
	-16, 135, -15, -59, 7, 4, 119, 130, 135, 135,
	135, 135, -27, -20, 51, 135, -82, 135, 135, 34,
	88, 135, 22, -4, 90, 4, -84, 135, -90, 78,
	66, 124, 95, 7, 135, -93, -28, -71, -69, 54,
	-12, -23, 56, 82, 74, -9, 135, 135, -80, -81,
	-79, 137, -78, 130, 7, -77, -76, -25, 84, 50,
	71, 59, 37, 41, 46, 122, 115, -73, -74, 4,
	66, 34, -5, 135, -2, -93, 49, 92, -6, -11,
	-28, -68, -9, -29, 57, -28, 124, 135, 82, -31,
	-19, 135, -78, -79, 135, -77, -78, 135, 137, -93,
	135, 137, -93, 62, -11, 135, 135, 135, -30, 55,
	54, 33, -28, -23, -31, 135, 135, -76, -74, -75,
	-84, 135, 58, -12, -28, 135, 135, -23, 72, 124,
	135, 135, -28,
}

var plpgsqlDef = [...]int16{
	185, -2, 2, 6, 0, 1, 3, 0, 8, 0,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 45, 5,
	-2, 12, -2, 29, 30, 186, -2, 0, 9, 33,
	0, 0, 32, 0, 18, 0, 46, 0, 0, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 157, 182, 97, 0, 189, 189,
	116, 0, 0, 129, 150, 152, 158, 181, 180, 0,
	83, 0, 162, 163, 0, 0, 170, 170, 0, 153,
	154, 155, 156, 11, 34, 0, 21, 17, 189, 172,
	174, 0, 47, 180, 0, 43, 44, 0, 0, 45,
	183, 107, 108, 0, 190, 0, 0, 116, 117, 118,
	0, 123, 124, 125, 126, 127, 128, 0, 0, 0,
	0, 76, 78, 0, 0, 84, 85, 16, 0, 165,
	0, 0, 0, 0, 37, 0, 0, 27, 28, 0,
	20, 4, 173, 0, 177, 178, 271, 0, 0, 45,
	101, 99, 182, 189, -2, 0, 0, 111, 191, 180,
	112, 113, 0, 0, 145, 131, 0, 0, 149, 73,
	74, 75, 77, 79, 0, 159, 0, 164, 166, 168,
	0, 167, -2, 0, 0, 35, 36, 14, 181, 25,
	26, 45, 0, 179, 80, 180, -2, 0, 98, 45,
	0, 0, 0, 45, 106, 0, 114, 115, 131, 144,
	146, 148, 0, 0, 131, 0, 133, 0, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 0, 87, 0,
	181, 169, 13, 39, 0, 41, 42, 38, 15, 0,
	-2, 176, 0, 94, 0, -2, 45, 103, 151, 189,
	45, 192, 0, 147, 120, 130, 0, 122, 0, 134,
	82, 0, 0, 160, 0, 40, 19, 81, 0, 182,
	45, 0, -2, 0, 189, 119, 121, 132, 86, 88,
	89, 161, 0, 0, -2, 96, 104, 0, 0, 45,
	105, 91, -2,
}

var plpgsqlTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	136, 3, 3, 3, 137, 3, 139, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 135,
	3, 138,
}

var plpgsqlTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134,
}

var plpgsqlTok3 = [...]int8{
	0,
}

var plpgsqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	plpgsqlDebug        = 0
	plpgsqlErrorVerbose = false
)

type plpgsqlLexer interface {
	Lex(lval *plpgsqlSymType) int
	Error(s string)
}

type plpgsqlParser interface {
	Parse(plpgsqlLexer) int
	Lookahead() int
}

type plpgsqlParserImpl struct {
	lval  plpgsqlSymType
	stack [plpgsqlInitialStackSize]plpgsqlSymType
	char  int
}

func (p *plpgsqlParserImpl) Lookahead() int {
	return p.char
}

func plpgsqlNewParser() plpgsqlParser {
	return &plpgsqlParserImpl{}
}

const plpgsqlFlag = -1000

func plpgsqlTokname(c int) string {
	if c >= 1 && c-1 < len(plpgsqlToknames) {
		if plpgsqlToknames[c-1] != "" {
			return plpgsqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func plpgsqlStatname(s int) string {
	if s >= 0 && s < len(plpgsqlStatenames) {
		if plpgsqlStatenames[s] != "" {
			return plpgsqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func plpgsqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !plpgsqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range plpgsqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + plpgsqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(plpgsqlPact[state])
	for tok := TOKSTART; tok-1 < len(plpgsqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < plpgsqlLast && int(plpgsqlChk[int(plpgsqlAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if plpgsqlDef[state] == -2 {
		i := 0
		for plpgsqlExca[i] != -1 || int(plpgsqlExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; plpgsqlExca[i] >= 0; i += 2 {
			tok := int(plpgsqlExca[i])
			if tok < TOKSTART || plpgsqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if plpgsqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += plpgsqlTokname(tok)
	}
	return res
}

func plpgsqllex1(lex plpgsqlLexer, lval *plpgsqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(plpgsqlTok1[0])
		goto out
	}
	if char < len(plpgsqlTok1) {
		token = int(plpgsqlTok1[char])
		goto out
	}
	if char >= plpgsqlPrivate {
		if char < plpgsqlPrivate+len(plpgsqlTok2) {
			token = int(plpgsqlTok2[char-plpgsqlPrivate])
			goto out
		}
	}
	for i := 0; i < len(plpgsqlTok3); i += 2 {
		token = int(plpgsqlTok3[i+0])
		if token == char {
			token = int(plpgsqlTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(plpgsqlTok2[1]) /* unknown char */
	}
	if plpgsqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", plpgsqlTokname(token), uint(char))
	}
	return char, token
}

func plpgsqlParse(plpgsqllex plpgsqlLexer) int {
	return plpgsqlNewParser().Parse(plpgsqllex)
}

func (plpgsqlrcvr *plpgsqlParserImpl) Parse(plpgsqllex plpgsqlLexer) int {
	var plpgsqln int
	var plpgsqlVAL plpgsqlSymType
	var plpgsqlDollar []plpgsqlSymType
	_ = plpgsqlDollar // silence set and not used
	plpgsqlS := plpgsqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	plpgsqlstate := 0
	plpgsqlrcvr.char = -1
	plpgsqltoken := -1 // plpgsqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		plpgsqlstate = -1
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
	}()
	plpgsqlp := -1
	goto plpgsqlstack

ret0:
	return 0

ret1:
	return 1

plpgsqlstack:
	/* put a state and value onto the stack */
	if plpgsqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", plpgsqlTokname(plpgsqltoken), plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlp++
	if plpgsqlp >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlS[plpgsqlp] = plpgsqlVAL
	plpgsqlS[plpgsqlp].yys = plpgsqlstate

plpgsqlnewstate:
	plpgsqln = int(plpgsqlPact[plpgsqlstate])
	if plpgsqln <= plpgsqlFlag {
		goto plpgsqldefault /* simple state */
	}
	if plpgsqlrcvr.char < 0 {
		plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
	}
	plpgsqln += plpgsqltoken
	if plpgsqln < 0 || plpgsqln >= plpgsqlLast {
		goto plpgsqldefault
	}
	plpgsqln = int(plpgsqlAct[plpgsqln])
	if int(plpgsqlChk[plpgsqln]) == plpgsqltoken { /* valid shift */
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
		plpgsqlVAL = plpgsqlrcvr.lval
		plpgsqlstate = plpgsqln
		if Errflag > 0 {
			Errflag--
		}
		goto plpgsqlstack
	}

plpgsqldefault:
	/* default state action */
	plpgsqln = int(plpgsqlDef[plpgsqlstate])
	if plpgsqln == -2 {
		if plpgsqlrcvr.char < 0 {
			plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if plpgsqlExca[xi+0] == -1 && int(plpgsqlExca[xi+1]) == plpgsqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			plpgsqln = int(plpgsqlExca[xi+0])
			if plpgsqln < 0 || plpgsqln == plpgsqltoken {
				break
			}
		}
		plpgsqln = int(plpgsqlExca[xi+1])
		if plpgsqln < 0 {
			goto ret0
		}
	}
	if plpgsqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			plpgsqllex.Error(plpgsqlErrorMessage(plpgsqlstate, plpgsqltoken))
			Nerrs++
			if plpgsqlDebug >= 1 {
				__yyfmt__.Printf("%s", plpgsqlStatname(plpgsqlstate))
				__yyfmt__.Printf(" saw %s\n", plpgsqlTokname(plpgsqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for plpgsqlp >= 0 {
				plpgsqln = int(plpgsqlPact[plpgsqlS[plpgsqlp].yys]) + plpgsqlErrCode
				if plpgsqln >= 0 && plpgsqln < plpgsqlLast {
					plpgsqlstate = int(plpgsqlAct[plpgsqln]) /* simulate a shift of "error" */
					if int(plpgsqlChk[plpgsqlstate]) == plpgsqlErrCode {
						goto plpgsqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if plpgsqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", plpgsqlS[plpgsqlp].yys)
				}
				plpgsqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if plpgsqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", plpgsqlTokname(plpgsqltoken))
			}
			if plpgsqltoken == plpgsqlEofCode {
				goto ret1
			}
			plpgsqlrcvr.char = -1
			plpgsqltoken = -1
			goto plpgsqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production plpgsqln */
	if plpgsqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", plpgsqln, plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlnt := plpgsqln
	plpgsqlpt := plpgsqlp
	_ = plpgsqlpt // guard against "declared and not used"

	plpgsqlp -= int(plpgsqlR2[plpgsqln])
	// plpgsqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if plpgsqlp+1 >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlVAL = plpgsqlS[plpgsqlp+1]

	/* consult goto table to find next state */
	plpgsqln = int(plpgsqlR1[plpgsqln])
	plpgsqlg := int(plpgsqlPgo[plpgsqln])
	plpgsqlj := plpgsqlg + plpgsqlS[plpgsqlp].yys + 1

	if plpgsqlj >= plpgsqlLast {
		plpgsqlstate = int(plpgsqlAct[plpgsqlg])
	} else {
		plpgsqlstate = int(plpgsqlAct[plpgsqlj])
		if int(plpgsqlChk[plpgsqlstate]) != -plpgsqln {
			plpgsqlstate = int(plpgsqlAct[plpgsqlg])
		}
	}
	// dummy call; replaced with literal code
	switch plpgsqlnt {

	case 1:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:409
		{
			plpgsqllex.(*lexer).SetStmt(plpgsqlDollar[1].union.statement())
		}
	case 4:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:418
		{
			blockLabel, blockEndLabel := plpgsqlDollar[1].str, plpgsqlDollar[7].str
			if err := checkLoopLabels(blockLabel, blockEndLabel); err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.Block{
				Label:      plpgsqlDollar[1].str,
				Decls:      plpgsqlDollar[2].union.statements(),
				Body:       plpgsqlDollar[4].union.statements(),
				Exceptions: plpgsqlDollar[5].union.exceptions(),
			}
		}
	case 5:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:433
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.statements()
		}
	case 6:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:437
		{

			plpgsqlVAL.union.val = []plpgsqltree.Statement(nil)
		}
	case 7:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:444
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statements()
		}
	case 8:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:448
		{
			plpgsqlVAL.union.val = []plpgsqltree.Statement{}
		}
	case 9:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:453
		{
		}
	case 10:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:454
		{
		}
	case 11:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:458
		{
			decs := plpgsqlDollar[1].union.statements()
			dec := plpgsqlDollar[3].union.statement()
			plpgsqlVAL.union.val = append(decs, dec)
		}
	case 12:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:464
		{
			dec := plpgsqlDollar[1].union.statement()
			plpgsqlVAL.union.val = []plpgsqltree.Statement{dec}
		}
	case 13:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:471
		{
			plpgsqlVAL.union.val = &plpgsqltree.Declaration{
				Var:      plpgsqltree.Variable(plpgsqlDollar[1].str),
				Constant: plpgsqlDollar[2].union.bool(),
				Typ:      plpgsqlDollar[3].union.typ(),
				Collate:  plpgsqlDollar[4].str,
				NotNull:  plpgsqlDollar[5].union.bool(),
				Expr:     plpgsqlDollar[6].union.expr(),
			}
		}
	case 14:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:482
		{
			return unimplemented(plpgsqllex, "alias for")
		}
	case 15:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:486
		{
			ann := tree.MakeAnnotations(plpgsqlDollar[6].union.numAnnotations())
			plpgsqlVAL.union.val = &plpgsqltree.CursorDeclaration{
				Name:        plpgsqltree.Variable(plpgsqlDollar[1].str),
				Scroll:      plpgsqlDollar[2].union.cursorScrollOption(),
				Query:       plpgsqlDollar[6].union.sqlStatement(),
				Annotations: &ann,
			}
		}
	case 16:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:498
		{
			plpgsqlVAL.union.val = tree.UnspecifiedScroll
		}
	case 17:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:502
		{
			plpgsqlVAL.union.val = tree.NoScroll
		}
	case 18:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:506
		{
			plpgsqlVAL.union.val = tree.Scroll
		}
	case 19:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:512
		{
			stmts, err := parser.Parse(plpgsqlDollar[1].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			if len(stmts) != 1 {
				return setErr(plpgsqllex, errors.New("expected exactly one SQL statement for cursor"))
			}
			plpgsqlVAL.union.val = stmts[0]
		}
	case 20:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:525
		{
			return unimplemented(plpgsqllex, "cursor arguments")
		}
	case 21:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:529
		{
		}
	case 22:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:534
		{
		}
	case 23:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:537
		{
		}
	case 24:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:542
		{
		}
	case 27:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:551
		{
		}
	case 28:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:554
		{
		}
	case 31:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:563
		{
			plpgsqlVAL.union.val = false
		}
	case 32:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:567
		{
			plpgsqlVAL.union.val = true
		}
	case 33:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:573
		{

			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(
				';', COLLATE, NOT, '=', COLON_EQUALS, DECLARE,
			)
			if err != nil {
				return setErr(plpgsqllex, err)
			}

			castExpr, err := plpgsqllex.(*lexer).ParseExpr("1::" + sqlStr)
			if err != nil {
				return setErr(plpgsqllex, errors.New("unable to parse type of variable declaration"))
			}
			switch t := castExpr.(type) {
			case *tree.CollateExpr:
				plpgsqlVAL.union.val = types.MakeCollatedString(types.String, t.Locale)
			case *tree.CastExpr:
				plpgsqlVAL.union.val = t.Type
			default:
				err := errors.New("unable to parse type of variable declaration")
				if strings.Contains(sqlStr, "%") {
					err = errors.WithIssueLink(errors.WithHint(err,
						"you may have attempted to use %TYPE or %ROWTYPE syntax, which is unsupported.",
					), errors.IssueLink{IssueURL: build.MakeIssueURL(114676)})
				}
				return setErr(plpgsqllex, err)
			}
		}
	case 34:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:606
		{
			plpgsqlVAL.str = ""
		}
	case 35:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:610
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 36:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:614
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 37:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:620
		{
			plpgsqlVAL.union.val = false
		}
	case 38:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:624
		{
			plpgsqlVAL.union.val = true
		}
	case 39:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:630
		{
			plpgsqlVAL.union.val = (plpgsqltree.Expr)(nil)
		}
	case 40:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:634
		{
			expr, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[1].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = expr
		}
	case 41:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:644
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 42:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:652
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 45:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:671
		{
			plpgsqlVAL.union.val = []plpgsqltree.Statement{}
		}
	case 46:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:675
		{
			stmts := plpgsqlDollar[1].union.statements()
			stmts = append(stmts, plpgsqlDollar[2].union.statement())
			plpgsqlVAL.union.val = stmts
		}
	case 47:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:683
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.block()
		}
	case 48:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:687
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 49:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:691
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 50:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:695
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 51:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:699
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 52:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:703
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 53:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:707
		{
		}
	case 54:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:709
		{
		}
	case 55:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:711
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 56:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:715
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 57:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:719
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 58:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:723
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 59:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:727
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 60:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:731
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 61:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:735
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 62:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:739
		{
		}
	case 63:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:741
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 64:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:745
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 65:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:749
		{
		}
	case 66:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:751
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 67:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:755
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 68:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:759
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 69:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:763
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 70:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:767
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 71:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:771
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 72:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:775
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statement()
		}
	case 73:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:781
		{
			return unimplemented(plpgsqllex, "perform")
		}
	case 74:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:787
		{
			expr, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[2].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			proc, ok := expr.(*tree.FuncExpr)
			if !ok {
				return setErr(plpgsqllex,
					errors.New("CALL statement target must be a stored procedure"),
				)
			}

			proc.InCall = true
			plpgsqlVAL.union.val = &plpgsqltree.Call{Proc: proc}
		}
	case 75:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:806
		{
			doBlock, err := makeDoStmt(plpgsqlDollar[2].union.doBlockOptions())
			if err != nil {
				return setErrNoDetails(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = doBlock
		}
	case 76:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:817
		{
			plpgsqlVAL.union.val = tree.DoBlockOptions{plpgsqlDollar[1].union.doBlockOption()}
		}
	case 77:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:821
		{
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.doBlockOptions(), plpgsqlDollar[2].union.doBlockOption())
		}
	case 78:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:828
		{
			plpgsqlVAL.union.val = tree.RoutineBodyStr(plpgsqlDollar[1].str)
		}
	case 79:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:832
		{
			lang, err := tree.AsRoutineLanguage(plpgsqlDollar[2].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = lang
		}
	case 80:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:842
		{
			expr, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[3].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.Assignment{
				Var:   plpgsqltree.Variable(plpgsqlDollar[1].str),
				Value: expr,
			}
		}
	case 81:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:853
		{

			expr, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[5].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.Assignment{
				Var:         plpgsqltree.Variable(plpgsqlDollar[1].str),
				Value:       expr,
				Indirection: tree.Name(plpgsqlDollar[3].str),
			}
		}
	case 82:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:868
		{
			plpgsqlVAL.union.val = &plpgsqltree.GetDiagnostics{
				IsStacked: plpgsqlDollar[2].union.bool(),
				DiagItems: plpgsqlDollar[4].union.getDiagnosticsItemList(),
			}

		}
	case 83:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:878
		{
			plpgsqlVAL.union.val = false
		}
	case 84:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:882
		{
			plpgsqlVAL.union.val = false
		}
	case 85:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:886
		{
			plpgsqlVAL.union.val = true
		}
	case 86:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:892
		{
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.getDiagnosticsItemList(), plpgsqlDollar[3].union.getDiagnosticsItem())
		}
	case 87:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:896
		{
			plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsItemList{plpgsqlDollar[1].union.getDiagnosticsItem()}
		}
	case 88:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:902
		{
			plpgsqlVAL.union.val = &plpgsqltree.GetDiagnosticsItem{
				Kind:       plpgsqlDollar[3].union.getDiagnosticsKind(),
				TargetName: plpgsqlDollar[1].str,
			}
		}
	case 89:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:911
		{
			switch plpgsqlDollar[1].str {
			case "row_count":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsRowCount
			case "pg_context":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsContext
			case "pg_exception_detail":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsErrorDetail
			case "pg_exception_hint":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsErrorHint
			case "pg_exception_context":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsErrorContext
			case "column_name":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsColumnName
			case "constraint_name":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsConstraintName
			case "pg_datatype_name":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsDatatypeName
			case "message_text":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsMessageText
			case "table_name":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsTableName
			case "schema_name":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsSchemaName
			case "returned_sqlstate":
				plpgsqlVAL.union.val = plpgsqltree.GetDiagnosticsReturnedSQLState
			default:

				return setErr(plpgsqllex, errors.Newf("unrecognized GET DIAGNOSTICS item: %s", redact.Safe(plpgsqlDollar[1].str)))
			}
		}
	case 90:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:947
		{
		}
	case 91:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-9 : plpgsqlpt+1]
//line plpgsql-gen.y:952
		{
			cond, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[2].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.If{
				Condition:  cond,
				ThenBody:   plpgsqlDollar[4].union.statements(),
				ElseIfList: plpgsqlDollar[5].union.elseIf(),
				ElseBody:   plpgsqlDollar[6].union.statements(),
			}
		}
	case 92:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:967
		{
			plpgsqlVAL.union.val = []plpgsqltree.ElseIf{}
		}
	case 93:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:971
		{
			cond, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[3].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			newStmt := plpgsqltree.ElseIf{
				Condition: cond,
				Stmts:     plpgsqlDollar[5].union.statements(),
			}
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.elseIf(), newStmt)
		}
	case 94:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:985
		{
			plpgsqlVAL.union.val = []plpgsqltree.Statement{}
		}
	case 95:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:989
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.statements()
		}
	case 96:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:995
		{
			expr := &plpgsqltree.Case{
				TestExpr:     plpgsqlDollar[2].str,
				CaseWhenList: plpgsqlDollar[3].union.caseWhens(),
			}
			if plpgsqlDollar[4].union.val != nil {
				expr.HaveElse = true
				expr.ElseStmts = plpgsqlDollar[4].union.statements()
			}
			plpgsqlVAL.union.val = expr
		}
	case 97:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1009
		{
			if plpgsqllex.(*lexer).Peek().id != WHEN {
				sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(WHEN)
				if err != nil {
					return setErr(plpgsqllex, err)
				}
				plpgsqlVAL.str = sqlStr
			} else {
				plpgsqlVAL.str = ""
			}
		}
	case 98:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1023
		{
			stmts := plpgsqlDollar[1].union.caseWhens()
			stmts = append(stmts, plpgsqlDollar[2].union.caseWhen())
			plpgsqlVAL.union.val = stmts
		}
	case 99:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1029
		{
			stmts := []*plpgsqltree.CaseWhen{}
			stmts = append(stmts, plpgsqlDollar[1].union.caseWhen())
			plpgsqlVAL.union.val = stmts
		}
	case 100:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1037
		{
			expr := &plpgsqltree.CaseWhen{
				Expr:  plpgsqlDollar[2].str,
				Stmts: plpgsqlDollar[4].union.statements(),
			}
			plpgsqlVAL.union.val = expr
		}
	case 101:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1047
		{
			plpgsqlVAL.union.val = nil
		}
	case 102:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1051
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.statements()
		}
	case 103:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:1057
		{
			loopLabel, loopEndLabel := plpgsqlDollar[1].str, plpgsqlDollar[4].str
			if err := checkLoopLabels(loopLabel, loopEndLabel); err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.Loop{
				Label: loopLabel,
				Body:  plpgsqlDollar[3].union.statements(),
			}
		}
	case 104:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:1070
		{
			loopLabel, loopEndLabel := plpgsqlDollar[1].str, plpgsqlDollar[6].str
			if err := checkLoopLabels(loopLabel, loopEndLabel); err != nil {
				return setErr(plpgsqllex, err)
			}
			cond, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[3].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.While{
				Label:     loopLabel,
				Condition: cond,
				Body:      plpgsqlDollar[5].union.statements(),
			}
		}
	case 105:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-8 : plpgsqlpt+1]
//line plpgsql-gen.y:1088
		{
			loopLabel, loopEndLabel := plpgsqlDollar[1].str, plpgsqlDollar[7].str
			if err := checkLoopLabels(loopLabel, loopEndLabel); err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.ForLoop{
				Label:   loopLabel,
				Target:  plpgsqlDollar[3].union.variables(),
				Control: plpgsqlDollar[5].union.forLoopControl(),
				Body:    plpgsqlDollar[6].union.statements(),
			}
		}
	case 106:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1103
		{
			foundToken, err := plpgsqllex.(*lexer).findFirstOccurrence(DOT_DOT, LOOP)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			switch foundToken {
			case DOT_DOT:

				forLoopControl, err := plpgsqllex.(*lexer).ReadIntegerForLoopControl()
				if err != nil {
					return setErr(plpgsqllex, err)
				}
				plpgsqlVAL.union.val = forLoopControl
			case LOOP:
				return unimplemented(plpgsqllex, "for loop over query or cursor")
			default:
				return setErr(plpgsqllex, errors.New("unterminated FOR loop definition"))
			}
		}
	case 107:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1125
		{
			target, err := plpgsqllex.(*lexer).ReadTarget()
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = target
		}
	case 108:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1135
		{
			return unimplemented(plpgsqllex, "for each loop")
		}
	case 109:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1141
		{
		}
	case 110:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1144
		{
		}
	case 111:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1149
		{
			plpgsqlVAL.union.val = &plpgsqltree.Exit{
				Label:     plpgsqlDollar[2].str,
				Condition: plpgsqlDollar[3].union.expr(),
			}
		}
	case 112:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1158
		{
			plpgsqlVAL.union.val = &plpgsqltree.Continue{
				Label:     plpgsqlDollar[2].str,
				Condition: plpgsqlDollar[3].union.expr(),
			}
		}
	case 113:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1167
		{
			plpgsqlVAL.union.val = &plpgsqltree.Return{Expr: plpgsqlDollar[2].union.expr()}
		}
	case 114:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1171
		{
			plpgsqlVAL.union.val = &plpgsqltree.ReturnNext{Expr: plpgsqlDollar[3].union.expr()}
		}
	case 115:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1175
		{
			plpgsqlVAL.union.val = plpgsqlDollar[3].union.statement()
		}
	case 116:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1181
		{
			retExpr, err := plpgsqllex.(*lexer).ParseReturnExpr()
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = retExpr
		}
	case 117:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1191
		{
			if plpgsqllex.(*lexer).peekForExecute() {

				plpgsqllex.(*lexer).Advance(1)
				return unimplemented(plpgsqllex, "return dynamic sql query")
			}
			retQuery, err := plpgsqllex.(*lexer).ParseReturnQuery()
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = retQuery
		}
	case 118:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1208
		{
			return unimplemented(plpgsqllex, "empty RAISE statement")
		}
	case 119:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:1212
		{
			plpgsqlVAL.union.val = &plpgsqltree.Raise{
				LogLevel: plpgsqlDollar[2].str,
				Message:  plpgsqlDollar[3].str,
				Params:   plpgsqlDollar[4].union.exprs(),
				Options:  plpgsqlDollar[5].union.raiseOptions(),
			}
		}
	case 120:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:1221
		{
			plpgsqlVAL.union.val = &plpgsqltree.Raise{
				LogLevel: plpgsqlDollar[2].str,
				CodeName: plpgsqlDollar[3].str,
				Options:  plpgsqlDollar[4].union.raiseOptions(),
			}
		}
	case 121:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:1229
		{
			plpgsqlVAL.union.val = &plpgsqltree.Raise{
				LogLevel: plpgsqlDollar[2].str,
				Code:     plpgsqlDollar[4].str,
				Options:  plpgsqlDollar[5].union.raiseOptions(),
			}
		}
	case 122:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:1237
		{
			plpgsqlVAL.union.val = &plpgsqltree.Raise{
				LogLevel: plpgsqlDollar[2].str,
				Options:  plpgsqlDollar[4].union.raiseOptions(),
			}
		}
	case 129:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1253
		{
			plpgsqlVAL.str = ""
		}
	case 130:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1260
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.raiseOptions()
		}
	case 131:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1264
		{
			plpgsqlVAL.union.val = []plpgsqltree.RaiseOption{}
		}
	case 132:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1271
		{
			option := plpgsqlDollar[3].union.raiseOption()
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.raiseOptions(), *option)
		}
	case 133:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1276
		{
			option := plpgsqlDollar[1].union.raiseOption()
			plpgsqlVAL.union.val = []plpgsqltree.RaiseOption{*option}
		}
	case 134:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1284
		{

			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(',', ';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			optionExpr, err := plpgsqllex.(*lexer).ParseExpr(sqlStr)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = &plpgsqltree.RaiseOption{
				OptType: plpgsqlDollar[1].str,
				Expr:    optionExpr,
			}
		}
	case 144:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1315
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.exprs()
		}
	case 145:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1319
		{
			plpgsqlVAL.union.val = []plpgsqltree.Expr{}
		}
	case 146:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1326
		{
			plpgsqlVAL.union.val = []plpgsqltree.Expr{plpgsqlDollar[1].union.expr()}
		}
	case 147:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1330
		{
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.exprs(), plpgsqlDollar[2].union.expr())
		}
	case 148:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1336
		{

			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(',', ';', USING)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			param, err := plpgsqllex.(*lexer).ParseExpr(sqlStr)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = param
		}
	case 149:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1351
		{
			plpgsqlVAL.union.val = &plpgsqltree.Assert{}
		}
	case 150:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1357
		{
			_, terminator, err := plpgsqllex.(*lexer).ReadSqlExpr(',', ';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			if terminator == ',' {
				_, _, err = plpgsqllex.(*lexer).ReadSqlExpr(';')
				if err != nil {
					return setErr(plpgsqllex, err)
				}
			}
		}
	case 151:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1372
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.statements()
		}
	case 152:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1378
		{
			stmt, err := plpgsqllex.(*lexer).MakeExecSqlStmt()
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = stmt
		}
	case 158:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1396
		{
			stmt, err := plpgsqllex.(*lexer).MakeDynamicExecuteStmt()
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = stmt
		}
	case 159:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1406
		{
			plpgsqlVAL.union.val = &plpgsqltree.Open{CurVar: plpgsqltree.Variable(plpgsqlDollar[2].str)}
		}
	case 160:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:1410
		{
			return unimplemented(plpgsqllex, "cursor for execute")
		}
	case 161:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:1414
		{
			stmts, err := parser.Parse(plpgsqlDollar[5].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			if len(stmts) != 1 {
				return setErr(plpgsqllex, errors.New("expected exactly one SQL statement for cursor"))
			}
			ann := tree.MakeAnnotations(stmts[0].NumAnnotations)
			plpgsqlVAL.union.val = &plpgsqltree.Open{
				CurVar:      plpgsqltree.Variable(plpgsqlDollar[2].str),
				Scroll:      plpgsqlDollar[3].union.cursorScrollOption(),
				Query:       stmts[0].AST,
				Annotations: &ann,
			}
		}
	case 162:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1433
		{
			fetch, err := plpgsqllex.(*lexer).MakeFetchOrMoveStmt(false)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = fetch
		}
	case 163:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1443
		{
			move, err := plpgsqllex.(*lexer).MakeFetchOrMoveStmt(true)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = move
		}
	case 164:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1453
		{
			plpgsqlVAL.union.val = &plpgsqltree.Close{CurVar: plpgsqltree.Variable(plpgsqlDollar[2].str)}
		}
	case 165:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1459
		{
			plpgsqlVAL.union.val = &plpgsqltree.Null{}
		}
	case 166:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1465
		{
			plpgsqlVAL.union.val = &plpgsqltree.TransactionControl{Chain: plpgsqlDollar[2].union.bool()}
		}
	case 167:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1471
		{
			plpgsqlVAL.union.val = &plpgsqltree.TransactionControl{Chain: plpgsqlDollar[2].union.bool(), Rollback: true}
		}
	case 168:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1478
		{
			plpgsqlVAL.union.val = true
		}
	case 169:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1482
		{
			plpgsqlVAL.union.val = false
		}
	case 170:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1486
		{
			plpgsqlVAL.union.val = false
		}
	case 171:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1491
		{
			plpgsqlVAL.union.val = []plpgsqltree.Exception(nil)
		}
	case 172:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1495
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.exceptions()
		}
	case 173:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1501
		{
			e := plpgsqlDollar[2].union.exception()
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.exceptions(), *e)
		}
	case 174:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1506
		{
			e := plpgsqlDollar[1].union.exception()
			plpgsqlVAL.union.val = []plpgsqltree.Exception{*e}
		}
	case 175:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1513
		{
			plpgsqlVAL.union.val = &plpgsqltree.Exception{
				Conditions: plpgsqlDollar[2].union.conditions(),
				Action:     plpgsqlDollar[4].union.statements(),
			}
		}
	case 176:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1522
		{
			c := plpgsqlDollar[3].union.condition()
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.conditions(), *c)
		}
	case 177:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1527
		{
			c := plpgsqlDollar[1].union.condition()
			plpgsqlVAL.union.val = []plpgsqltree.Condition{*c}
		}
	case 178:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1534
		{
			plpgsqlVAL.union.val = &plpgsqltree.Condition{SqlErrName: plpgsqlDollar[1].str}
		}
	case 179:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1538
		{
			plpgsqlVAL.union.val = &plpgsqltree.Condition{SqlErrState: plpgsqlDollar[2].str}
		}
	case 180:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1544
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 181:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1554
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlStatement(';')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 182:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1564
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(THEN)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 183:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1574
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(LOOP)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 184:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1584
		{
			sqlStr, _, err := plpgsqllex.(*lexer).ReadSqlExpr(')')
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.str = sqlStr
		}
	case 185:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1594
		{
			plpgsqlVAL.str = ""
		}
	case 186:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1598
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 187:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1604
		{
			plpgsqlVAL.str = ""
		}
	case 188:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1608
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 189:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1614
		{
			plpgsqlVAL.str = ""
		}
	case 190:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1618
		{
			plpgsqlVAL.str = plpgsqlDollar[1].str
		}
	case 191:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1624
		{
		}
	case 192:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1626
		{
			expr, err := plpgsqllex.(*lexer).ParseExpr(plpgsqlDollar[2].str)
			if err != nil {
				return setErr(plpgsqllex, err)
			}
			plpgsqlVAL.union.val = expr
		}
	}
	goto plpgsqlstack /* stack new state and value */
}
