// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sessiondatapb/local_only_session_data.proto

package sessiondatapb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_security_username "github.com/cockroachdb/cockroachdb-parser/pkg/security/username"
	hlc "github.com/cockroachdb/cockroachdb-parser/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReplicationMode represents the replication={0,1,on,off,database} connection
// parameter in PostgreSQL.
type ReplicationMode int32

const (
	ReplicationMode_REPLICATION_MODE_DISABLED ReplicationMode = 0
	ReplicationMode_REPLICATION_MODE_ENABLED  ReplicationMode = 1
	ReplicationMode_REPLICATION_MODE_DATABASE ReplicationMode = 2
)

var ReplicationMode_name = map[int32]string{
	0: "REPLICATION_MODE_DISABLED",
	1: "REPLICATION_MODE_ENABLED",
	2: "REPLICATION_MODE_DATABASE",
}

var ReplicationMode_value = map[string]int32{
	"REPLICATION_MODE_DISABLED": 0,
	"REPLICATION_MODE_ENABLED":  1,
	"REPLICATION_MODE_DATABASE": 2,
}

func (x ReplicationMode) String() string {
	return proto.EnumName(ReplicationMode_name, int32(x))
}

func (ReplicationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{0}
}

// PlanCacheMode controls the optimizer's decision to use a custom or generic
// query plan.
type PlanCacheMode int32

const (
	// PlanCacheModeForceCustom forces the optimizer to use a custom query plan.
	PlanCacheModeForceCustom PlanCacheMode = 0
	// PlanCacheModeForceCustom forces the optimizer to use a generic query plan.
	PlanCacheModeForceGeneric PlanCacheMode = 1
	// PlanCacheModeAuto allows the optimizer to automatically choose between a
	// custom and generic query plan.
	PlanCacheModeAuto PlanCacheMode = 2
)

var PlanCacheMode_name = map[int32]string{
	0: "force_custom_plan",
	1: "force_generic_plan",
	2: "auto",
}

var PlanCacheMode_value = map[string]int32{
	"force_custom_plan":  0,
	"force_generic_plan": 1,
	"auto":               2,
}

func (PlanCacheMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{1}
}

// LocalOnlySessionData contains the serializable components of session
// parameters that only influence execution on the gateway nodes.
type LocalOnlySessionData struct {
	// SaveTablesPrefix indicates that a table should be created with the
	// given prefix for the output of each subexpression in a query. If
	// SaveTablesPrefix is empty, no tables are created.
	SaveTablesPrefix string `protobuf:"bytes,1,opt,name=save_tables_prefix,json=saveTablesPrefix,proto3" json:"save_tables_prefix,omitempty"`
	// OptimizerFKCascadesLimit is the maximum number of cascading operations that
	// are run for a single query.
	OptimizerFKCascadesLimit int64 `protobuf:"varint,2,opt,name=optimizer_fk_cascades_limit,json=optimizerFkCascadesLimit,proto3" json:"optimizer_fk_cascades_limit,omitempty"`
	// StmtTimeout is the duration a query is permitted to run before it is
	// canceled by the session. If set to 0, there is no timeout.
	StmtTimeout time.Duration `protobuf:"varint,3,opt,name=stmt_timeout,json=stmtTimeout,proto3,casttype=time.Duration" json:"stmt_timeout,omitempty"`
	// IdleInSessionTimeout is the duration a session is permitted to idle before
	// the session is canceled. If set to 0, there is no timeout.
	IdleInSessionTimeout time.Duration `protobuf:"varint,4,opt,name=idle_in_session_timeout,json=idleInSessionTimeout,proto3,casttype=time.Duration" json:"idle_in_session_timeout,omitempty"`
	// IdleInTransactionSessionTimeout is the duration a session is permitted to
	// idle in a transaction before the session is canceled.
	// If set to 0, there is no timeout.
	IdleInTransactionSessionTimeout time.Duration `protobuf:"varint,5,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3,casttype=time.Duration" json:"idle_in_transaction_session_timeout,omitempty"`
	// NoticeDisplaySeverity indicates the level of Severity to send notices for the given
	// session. This should ideally be of type pgnotice.DisplaySeverity, but cannot be done
	// due to a circular dependency.
	NoticeDisplaySeverity uint32 `protobuf:"varint,6,opt,name=notice_display_severity,json=noticeDisplaySeverity,proto3" json:"notice_display_severity,omitempty"`
	// ReorderJoinsLimit indicates the number of joins at which the optimizer should
	// stop attempting to reorder.
	ReorderJoinsLimit int64 `protobuf:"varint,7,opt,name=reorder_joins_limit,json=reorderJoinsLimit,proto3" json:"reorder_joins_limit,omitempty"`
	// DefaultTxnPriority indicates the default priority of newly created
	// transactions.
	// NOTE: we'd prefer to use tree.UserPriority here, but doing so would
	// introduce a package dependency cycle.
	DefaultTxnPriority int64 `protobuf:"varint,8,opt,name=default_txn_priority,json=defaultTxnPriority,proto3" json:"default_txn_priority,omitempty"`
	// DefaultTxnReadOnly indicates the default read-only status of newly
	// created transactions.
	DefaultTxnReadOnly bool `protobuf:"varint,9,opt,name=default_txn_read_only,json=defaultTxnReadOnly,proto3" json:"default_txn_read_only,omitempty"`
	// DefaultTxnUseFollowerReads indicates whether transactions should be
	// created by default using an AS OF SYSTEM TIME clause far enough in the
	// past to facilitate reads against followers. If true, transactions will
	// also default to being read-only.
	DefaultTxnUseFollowerReads bool `protobuf:"varint,10,opt,name=default_txn_use_follower_reads,json=defaultTxnUseFollowerReads,proto3" json:"default_txn_use_follower_reads,omitempty"`
	// PartiallyDistributedPlansDisabled indicates whether the partially
	// distributed plans produced by distSQLSpecExecFactory are disabled. It
	// should be set to 'true' only in tests that verify that the old and the
	// new factories return exactly the same physical plans.
	// TODO(yuzefovich): remove it when deleting old sql.execFactory.
	PartiallyDistributedPlansDisabled bool `protobuf:"varint,11,opt,name=partially_distributed_plans_disabled,json=partiallyDistributedPlansDisabled,proto3" json:"partially_distributed_plans_disabled,omitempty"`
	// OptimizerUseHistograms indicates whether we should use histograms for
	// cardinality estimation in the optimizer.
	OptimizerUseHistograms bool `protobuf:"varint,12,opt,name=optimizer_use_histograms,json=optimizerUseHistograms,proto3" json:"optimizer_use_histograms,omitempty"`
	// OptimizerUseMultiColStats indicates whether we should use multi-column
	// statistics for cardinality estimation in the optimizer.
	OptimizerUseMultiColStats bool `protobuf:"varint,13,opt,name=optimizer_use_multi_col_stats,json=optimizerUseMultiColStats,proto3" json:"optimizer_use_multi_col_stats,omitempty"`
	// LocalityOptimizedSearch indicates that the optimizer will try to plan scans
	// and lookup joins in which local nodes (i.e., nodes in the gateway region)
	// are searched for matching rows before remote nodes, in the hope that the
	// execution engine can avoid visiting remote nodes.
	LocalityOptimizedSearch bool `protobuf:"varint,14,opt,name=locality_optimized_search,json=localityOptimizedSearch,proto3" json:"locality_optimized_search,omitempty"`
	// SafeUpdates causes errors when the client
	// sends syntax that may have unwanted side effects.
	SafeUpdates bool `protobuf:"varint,15,opt,name=safe_updates,json=safeUpdates,proto3" json:"safe_updates,omitempty"`
	// PreferLookupJoinsForFKs causes foreign key operations to prefer lookup
	// joins.
	PreferLookupJoinsForFKs bool `protobuf:"varint,16,opt,name=prefer_lookup_joins_for_fks,json=preferLookupJoinsForFks,proto3" json:"prefer_lookup_joins_for_fks,omitempty"`
	// ZigzagJoinEnabled indicates whether the optimizer should try and plan a
	// zigzag join.
	ZigzagJoinEnabled bool `protobuf:"varint,17,opt,name=zigzag_join_enabled,json=zigzagJoinEnabled,proto3" json:"zigzag_join_enabled,omitempty"`
	// RequireExplicitPrimaryKeys indicates whether CREATE TABLE statements should
	// error out if no primary key is provided.
	RequireExplicitPrimaryKeys bool `protobuf:"varint,18,opt,name=require_explicit_primary_keys,json=requireExplicitPrimaryKeys,proto3" json:"require_explicit_primary_keys,omitempty"`
	// ForceSavepointRestart overrides the default SAVEPOINT behavior
	// for compatibility with certain ORMs. When this flag is set,
	// the savepoint name will no longer be compared against the magic
	// identifier `cockroach_restart` in order use a restartable
	// transaction.
	ForceSavepointRestart bool `protobuf:"varint,19,opt,name=force_savepoint_restart,json=forceSavepointRestart,proto3" json:"force_savepoint_restart,omitempty"`
	// AllowPrepareAsOptPlan must be set to allow use of
	//   PREPARE name AS OPT PLAN '...'
	AllowPrepareAsOptPlan bool `protobuf:"varint,20,opt,name=allow_prepare_as_opt_plan,json=allowPrepareAsOptPlan,proto3" json:"allow_prepare_as_opt_plan,omitempty"`
	// TempTablesEnabled indicates whether temporary tables can be created or not.
	TempTablesEnabled bool `protobuf:"varint,21,opt,name=temp_tables_enabled,json=tempTablesEnabled,proto3" json:"temp_tables_enabled,omitempty"`
	// ImplicitPartitioningEnabled indicates whether implicit column partitioning
	// can be created.
	ImplicitColumnPartitioningEnabled bool `protobuf:"varint,22,opt,name=implicit_column_partitioning_enabled,json=implicitColumnPartitioningEnabled,proto3" json:"implicit_column_partitioning_enabled,omitempty"`
	// OverrideMultiRegionZoneConfigEnabled indicates whether zone configurations can be
	// modified for multi-region databases and tables/indexes/partitions.
	OverrideMultiRegionZoneConfigEnabled bool `protobuf:"varint,24,opt,name=override_multi_region_zone_config_enabled,json=overrideMultiRegionZoneConfigEnabled,proto3" json:"override_multi_region_zone_config_enabled,omitempty"`
	// DisallowFullTableScans indicates whether queries that plan full table scans
	// should be rejected.
	DisallowFullTableScans bool `protobuf:"varint,26,opt,name=disallow_full_table_scans,json=disallowFullTableScans,proto3" json:"disallow_full_table_scans,omitempty"`
	// ImplicitSelectForUpdate is true if FOR UPDATE locking may be used during
	// the row-fetch phase of mutation statements.
	ImplicitSelectForUpdate bool `protobuf:"varint,27,opt,name=implicit_select_for_update,json=implicitSelectForUpdate,proto3" json:"implicit_select_for_update,omitempty"`
	// InsertFastPath is true if the fast path for insert (with VALUES input) may
	// be used.
	InsertFastPath bool `protobuf:"varint,28,opt,name=insert_fast_path,json=insertFastPath,proto3" json:"insert_fast_path,omitempty"`
	// AlterColumnTypeGeneralEnabled is true if ALTER TABLE ... ALTER COLUMN ...
	// TYPE x may be used for general conversions requiring online schema change/
	AlterColumnTypeGeneralEnabled bool `protobuf:"varint,29,opt,name=alter_column_type_general_enabled,json=alterColumnTypeGeneralEnabled,proto3" json:"alter_column_type_general_enabled,omitempty"`
	// SynchronousCommit is a dummy setting for the synchronous_commit var.
	SynchronousCommit bool `protobuf:"varint,30,opt,name=synchronous_commit,json=synchronousCommit,proto3" json:"synchronous_commit,omitempty"`
	// EnableSeqScan is a dummy setting for the enable_seqscan var.
	EnableSeqScan bool `protobuf:"varint,31,opt,name=enable_seq_scan,json=enableSeqScan,proto3" json:"enable_seq_scan,omitempty"`
	// EnableUniqueWithoutIndexConstraints indicates whether creating unique
	// constraints without an index is allowed.
	// TODO(rytaft): remove this once unique without index constraints are fully
	// supported.
	EnableUniqueWithoutIndexConstraints bool `protobuf:"varint,33,opt,name=enable_unique_without_index_constraints,json=enableUniqueWithoutIndexConstraints,proto3" json:"enable_unique_without_index_constraints,omitempty"`
	// StubCatalogTablesEnabled allows queries against virtual
	// tables that are not yet implemented.
	StubCatalogTablesEnabled bool `protobuf:"varint,34,opt,name=stub_catalog_tables_enabled,json=stubCatalogTablesEnabled,proto3" json:"stub_catalog_tables_enabled,omitempty"`
	// ExperimentalComputedColumnRewrites allows automatic rewriting of computed
	// column expressions in CREATE TABLE and ALTER TABLE statements. See the
	// experimentalComputedColumnRewrites cluster setting for a description of the
	// format.
	ExperimentalComputedColumnRewrites string `protobuf:"bytes,35,opt,name=experimental_computed_column_rewrites,json=experimentalComputedColumnRewrites,proto3" json:"experimental_computed_column_rewrites,omitempty"`
	// EnableStreamReplication indicates whether to allow setting up a replication
	// stream.
	EnableStreamReplication bool `protobuf:"varint,37,opt,name=enable_stream_replication,json=enableStreamReplication,proto3" json:"enable_stream_replication,omitempty"`
	// ResultsBufferSize specifies the size at which the pgwire results buffer
	// will self-flush.
	ResultsBufferSize int64 `protobuf:"varint,38,opt,name=results_buffer_size,json=resultsBufferSize,proto3" json:"results_buffer_size,omitempty"`
	// PropagateInputOrdering indicates that when planning a subquery or CTE, the
	// inner ordering should be propagated to the outer scope if the outer scope
	// is unordered. PropagateInputOrdering is currently experimental.
	PropagateInputOrdering bool `protobuf:"varint,39,opt,name=propagate_input_ordering,json=propagateInputOrdering,proto3" json:"propagate_input_ordering,omitempty"`
	// ExperimentalDistSQLPlanningMode indicates whether the experimental
	// DistSQL planning driven by the optimizer is enabled.
	ExperimentalDistSQLPlanningMode ExperimentalDistSQLPlanningMode `protobuf:"varint,40,opt,name=experimental_distsql_planning_mode,json=experimentalDistsqlPlanningMode,proto3,casttype=ExperimentalDistSQLPlanningMode" json:"experimental_distsql_planning_mode,omitempty"`
	// DistSQLMode indicates whether to run queries using the distributed
	// execution engine.
	DistSQLMode DistSQLExecMode `protobuf:"varint,41,opt,name=dist_sql_mode,json=distSqlMode,proto3,casttype=DistSQLExecMode" json:"dist_sql_mode,omitempty"`
	// SerialNormalizationMode indicates how to handle the SERIAL pseudo-type.
	SerialNormalizationMode SerialNormalizationMode `protobuf:"varint,42,opt,name=serial_normalization_mode,json=serialNormalizationMode,proto3,casttype=SerialNormalizationMode" json:"serial_normalization_mode,omitempty"`
	// NewSchemaChangerMode indicates whether to use the new schema changer.
	NewSchemaChangerMode NewSchemaChangerMode `protobuf:"varint,43,opt,name=new_schema_changer_mode,json=newSchemaChangerMode,proto3,casttype=NewSchemaChangerMode" json:"new_schema_changer_mode,omitempty"`
	// SequenceCache stores sequence values which have been cached using the
	// CACHE sequence option.
	SequenceCache SequenceCache `protobuf:"bytes,44,rep,name=sequence_cache,json=sequenceCache,proto3,casttype=SequenceCache" json:"sequence_cache,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// PlacementEnabled indicates whether PLACEMENT can be used or not.
	PlacementEnabled bool `protobuf:"varint,45,opt,name=placement_enabled,json=placementEnabled,proto3" json:"placement_enabled,omitempty"`
	// SessionUserProto is the name of the user which has performed a SET ROLE
	// command. In other words, it is the name of the user which originally
	// established the connection before SET ROLE was first performed.
	// This is only populated when SET ROLE is used, otherwise the session_user
	// is the same as the UserProto in SessionData.
	// Postgres allows the SessionUser to be changed with SET SESSION AUTHORIZATION
	// but CockroachDB doesn't allow that at the time of this writing.
	SessionUserProto github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto `protobuf:"bytes,46,opt,name=session_user_proto,json=sessionUserProto,proto3,casttype=github.com/cockroachdb/cockroachdb-parser/pkg/security/username.SQLUsernameProto" json:"session_user_proto,omitempty"`
	// TxnRowsWrittenLog is the threshold for the number of rows written by a SQL
	// transaction which - once exceeded - will trigger a logging event to SQL_PERF
	// (or SQL_INTERNAL_PERF for internal transactions); 0 means disabled.
	TxnRowsWrittenLog int64 `protobuf:"varint,47,opt,name=txn_rows_written_log,json=txnRowsWrittenLog,proto3" json:"txn_rows_written_log,omitempty"`
	// TxnRowsWrittenErr is the limit for the number of rows written by a SQL
	// transaction which - once exceeded - will fail the transaction (or will
	// trigger a logging event to SQL_INTERNAL_PERF for internal transactions); 0
	// means disabled.
	TxnRowsWrittenErr int64 `protobuf:"varint,48,opt,name=txn_rows_written_err,json=txnRowsWrittenErr,proto3" json:"txn_rows_written_err,omitempty"`
	// TxnRowsReadLog is the threshold for the number of rows read by a SQL
	// transaction which - once exceeded - will trigger a logging event to SQL_PERF
	// (or SQL_INTERNAL_PERF for internal transactions); 0 means disabled.
	TxnRowsReadLog int64 `protobuf:"varint,49,opt,name=txn_rows_read_log,json=txnRowsReadLog,proto3" json:"txn_rows_read_log,omitempty"`
	// TxnRowsReadErr is the limit for the number of rows read by a SQL
	// transaction which - once exceeded - will fail the transaction (or will
	// trigger a logging event to SQL_INTERNAL_PERF for internal transactions); 0
	// means disabled.
	TxnRowsReadErr int64 `protobuf:"varint,50,opt,name=txn_rows_read_err,json=txnRowsReadErr,proto3" json:"txn_rows_read_err,omitempty"`
	// AutoRehomingEnabled indicates whether or not REGIONAL BY ROW tables should
	// have a rehoming ON UPDATE clause added to them.
	AutoRehomingEnabled bool `protobuf:"varint,51,opt,name=auto_rehoming_enabled,json=autoRehomingEnabled,proto3" json:"auto_rehoming_enabled,omitempty"`
	// IsSuperuser returns whether the user is a "superuser", which is defined
	// to be a user with an admin role.
	IsSuperuser bool `protobuf:"varint,52,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	// LargeFullScanRows is the estimated row count at which a full scan is
	// considered large, and worthy of logging and/or disabling depending on other
	// settings.
	LargeFullScanRows float64 `protobuf:"fixed64,53,opt,name=large_full_scan_rows,json=largeFullScanRows,proto3" json:"large_full_scan_rows,omitempty"`
	// InjectRetryErrorsEnabled causes statements inside an explicit
	// transaction to return a transaction retry error. It is intended for
	// developers to test their app's retry logic.
	//
	// Note that this session variable is **not** propagated to the internal
	// executors - use InternalExecutorOverride for that.
	InjectRetryErrorsEnabled bool `protobuf:"varint,54,opt,name=inject_retry_errors_enabled,json=injectRetryErrorsEnabled,proto3" json:"inject_retry_errors_enabled,omitempty"`
	// NullOrderedLast controls whether NULL is ordered last. We default to
	// NULLS FIRST for ascending order by default, whereas postgres defaults
	// to NULLS LAST.
	NullOrderedLast bool `protobuf:"varint,55,opt,name=null_ordered_last,json=nullOrderedLast,proto3" json:"null_ordered_last,omitempty"`
	// DisablePlanGists indicates whether we should disable automatic gists.
	DisablePlanGists bool `protobuf:"varint,56,opt,name=disable_plan_gists,json=disablePlanGists,proto3" json:"disable_plan_gists,omitempty"`
	// CustomOptions contains a map of all custom session settings.
	// These session variables have at least one period in their name.
	CustomOptions map[string]string `protobuf:"bytes,57,rep,name=custom_options,json=customOptions,proto3" json:"custom_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// IndexRecommendationsEnabled controls whether or not we display index
	// recommendations below the plan in EXPLAIN.
	IndexRecommendationsEnabled bool `protobuf:"varint,58,opt,name=index_recommendations_enabled,json=indexRecommendationsEnabled,proto3" json:"index_recommendations_enabled,omitempty"`
	// AvoidBuffering indicates that the returned data should not be
	// buffered by conn executor.  This is currently used by replication primitives
	// to ensure the data is flushed to the consumer immediately.
	//
	// Does not apply to the InternalExecutor.
	AvoidBuffering bool `protobuf:"varint,59,opt,name=avoid_buffering,json=avoidBuffering,proto3" json:"avoid_buffering,omitempty"`
	// CheckFunctionBodies indicates whether functions are validated during
	// creation.
	CheckFunctionBodies bool `protobuf:"varint,60,opt,name=check_function_bodies,json=checkFunctionBodies,proto3" json:"check_function_bodies,omitempty"`
	// CostScansWithDefaultColSize is true when the optimizer should cost scans
	// and joins using the same default number of bytes per column instead of
	// column sizes from the AvgSize table statistic.
	CostScansWithDefaultColSize bool `protobuf:"varint,61,opt,name=cost_scans_with_default_col_size,json=costScansWithDefaultColSize,proto3" json:"cost_scans_with_default_col_size,omitempty"`
	// DefaultTxnQualityOfService indicates the default QoSLevel/WorkPriority of
	// newly created transactions.
	DefaultTxnQualityOfService QoSLevel `protobuf:"varint,62,opt,name=default_txn_quality_of_service,json=defaultTxnQualityOfService,proto3,casttype=QoSLevel" json:"default_txn_quality_of_service,omitempty"`
	// OptSplitScanLimit indicates the maximum number of UNION ALL statements a
	// Scan may be split into during query optimization to avoid a sort.
	OptSplitScanLimit int32 `protobuf:"varint,63,opt,name=opt_split_scan_limit,json=optSplitScanLimit,proto3" json:"opt_split_scan_limit,omitempty"`
	// EnableSuperRegions is true when super region functionality is enabled.
	EnableSuperRegions bool `protobuf:"varint,64,opt,name=enable_super_regions,json=enableSuperRegions,proto3" json:"enable_super_regions,omitempty"`
	// OverrideAlterPrimaryRegionInSuperRegion is true when the user is allowed
	// to modify a primary region that is part of a super region.
	OverrideAlterPrimaryRegionInSuperRegion bool `protobuf:"varint,65,opt,name=override_alter_primary_region_in_super_region,json=overrideAlterPrimaryRegionInSuperRegion,proto3" json:"override_alter_primary_region_in_super_region,omitempty"`
	// EnableImplicitTransactionForBatchStatements configures the handling of
	// multiple statements in a single query. If enabled, then an implicit
	// transaction is used when multiple statements are sent in a single query.
	// Setting this to false is a divergence from the pgwire protocol, but
	// matches the behavior of CockroachDB v21.2 and earlier.
	EnableImplicitTransactionForBatchStatements bool `protobuf:"varint,66,opt,name=enable_implicit_transaction_for_batch_statements,json=enableImplicitTransactionForBatchStatements,proto3" json:"enable_implicit_transaction_for_batch_statements,omitempty"`
	// ExpectAndIgnoreNotVisibleColumnsInCopy changes behaviour for COPY t FROM ...
	// (with no column name specifiers) to expect and ignore not visible column
	// fields.
	ExpectAndIgnoreNotVisibleColumnsInCopy bool `protobuf:"varint,67,opt,name=expect_and_ignore_not_visible_columns_in_copy,json=expectAndIgnoreNotVisibleColumnsInCopy,proto3" json:"expect_and_ignore_not_visible_columns_in_copy,omitempty"`
	// MultipleModificationsOfTable allows statements containing multiple INSERT
	// ON CONFLICT, UPSERT, UPDATE, or DELETE subqueries modifying the same table,
	// at the risk of data corruption if the same row is modified multiple times.
	MultipleModificationsOfTable bool `protobuf:"varint,68,opt,name=multiple_modifications_of_table,json=multipleModificationsOfTable,proto3" json:"multiple_modifications_of_table,omitempty"`
	// ShowPrimaryKeyConstraintOnNotVisibleColumns controls whether SHOW
	// CONSTRAINTS and pg_catalog.pg_constraint will include primary key
	// constraints that only include hidden columns.
	ShowPrimaryKeyConstraintOnNotVisibleColumns bool `protobuf:"varint,69,opt,name=show_primary_key_constraint_on_not_visible_columns,json=showPrimaryKeyConstraintOnNotVisibleColumns,proto3" json:"show_primary_key_constraint_on_not_visible_columns,omitempty"`
	// TestingOptimizerRandomSeed is non-zero when we are testing the optimizer by
	// randomly perturbing costs or disabling rules. This will initialize a rng
	// seeded to the given integer. This should only be used in test scenarios and
	// is very much a non-production setting.
	TestingOptimizerRandomSeed int64 `protobuf:"varint,70,opt,name=testing_optimizer_random_seed,json=testingOptimizerRandomSeed,proto3" json:"testing_optimizer_random_seed,omitempty"`
	// UnconstrainedNonCoveringIndexScanEnabled controls whether unconstrained
	// non-covering index scan access paths are explored by the optimizer.
	UnconstrainedNonCoveringIndexScanEnabled bool `protobuf:"varint,71,opt,name=unconstrained_non_covering_index_scan_enabled,json=unconstrainedNonCoveringIndexScanEnabled,proto3" json:"unconstrained_non_covering_index_scan_enabled,omitempty"`
	// TestingOptimizerCostPerturbation is non-zero when the coster should
	// randomly perturb costs to produce a non-optimal query plan. This should
	// only be used in test scenarios and is very much a non-production setting.
	TestingOptimizerCostPerturbation float64 `protobuf:"fixed64,72,opt,name=testing_optimizer_cost_perturbation,json=testingOptimizerCostPerturbation,proto3" json:"testing_optimizer_cost_perturbation,omitempty"`
	// TestingOptimizerDisableRuleProbability is non-zero when the optimizer
	// should randomly disable every non-essential transformation rule with the
	// given probability. This should only be used in test scenarios and is very
	// much a non-production setting.
	TestingOptimizerDisableRuleProbability float64 `protobuf:"fixed64,73,opt,name=testing_optimizer_disable_rule_probability,json=testingOptimizerDisableRuleProbability,proto3" json:"testing_optimizer_disable_rule_probability,omitempty"`
	// OptimizerUseNotVisibleIndexes indicates whether the optimizer can still
	// choose to use visible indexes for query plans.
	OptimizerUseNotVisibleIndexes bool `protobuf:"varint,74,opt,name=optimizer_use_not_visible_indexes,json=optimizerUseNotVisibleIndexes,proto3" json:"optimizer_use_not_visible_indexes,omitempty"`
	// CopyFastPathEnabled controls whether the optimized copy mode is enabled.
	CopyFastPathEnabled bool `protobuf:"varint,75,opt,name=copy_fast_path_enabled,json=copyFastPathEnabled,proto3" json:"copy_fast_path_enabled,omitempty"`
	// disable_hoist_projection_in_join_limitation disables the restrictions
	// placed on projection hoisting during query planning in the optimizer.
	DisableHoistProjectionInJoinLimitation bool `protobuf:"varint,76,opt,name=disable_hoist_projection_in_join_limitation,json=disableHoistProjectionInJoinLimitation,proto3" json:"disable_hoist_projection_in_join_limitation,omitempty"`
	// CopyFromAtomicEnabled controls whether implicit txn copy from operations
	// are atomic or segmented.
	CopyFromAtomicEnabled bool `protobuf:"varint,77,opt,name=copy_from_atomic_enabled,json=copyFromAtomicEnabled,proto3" json:"copy_from_atomic_enabled,omitempty"`
	// EnforceHomeRegion, when true, causes queries which scan rows from multiple
	// regions, or which scan rows from a single home region, but initiated from
	// a gateway region which differs from that home region, to error out.
	EnforceHomeRegion bool `protobuf:"varint,78,opt,name=enforce_home_region,json=enforceHomeRegion,proto3" json:"enforce_home_region,omitempty"`
	// OptimizerUseForecasts indicates whether we should use statistics forecasts
	// for cardinality estimation in the optimizer.
	OptimizerUseForecasts bool `protobuf:"varint,79,opt,name=optimizer_use_forecasts,json=optimizerUseForecasts,proto3" json:"optimizer_use_forecasts,omitempty"`
	// VariableInequalityLookupJoinEnabled indicates whether the optimizer should
	// be allowed to consider lookup joins with inequality conditions, in
	// addition to the other restrictions on when they are planned.
	VariableInequalityLookupJoinEnabled bool `protobuf:"varint,80,opt,name=variable_inequality_lookup_join_enabled,json=variableInequalityLookupJoinEnabled,proto3" json:"variable_inequality_lookup_join_enabled,omitempty"`
	// TransactionSessionTimeout is the duration a transaction is permitted to
	// run before the transaction is canceled. If set to 0, there is no timeout.
	TransactionTimeout time.Duration `protobuf:"varint,81,opt,name=transaction_timeout,json=transactionTimeout,proto3,casttype=time.Duration" json:"transaction_timeout,omitempty"`
	// SystemIdentityProto is the original name of the client presented to pgwire
	// before it was mapped to a SQL identifier.
	SystemIdentityProto string `protobuf:"bytes,82,opt,name=system_identity_proto,json=systemIdentityProto,proto3" json:"system_identity_proto,omitempty"`
	// DescriptorValidationMode indicates whether to validate the descriptors at
	// read and write time, at read time only, or never.
	DescriptorValidationMode DescriptorValidationMode `protobuf:"varint,83,opt,name=descriptor_validation_mode,json=descriptorValidationMode,proto3,casttype=DescriptorValidationMode" json:"descriptor_validation_mode,omitempty"`
	// ExperimentalHashGroupJoinEnabled indicates whether the physical planner
	// will attempt to convert a hash join followed by a hash aggregator into a
	// single hash group-join operation. At the moment, there is no optimizer
	// support for this, so some things can be incorrect (e.g. EXPLAIN plans).
	ExperimentalHashGroupJoinEnabled bool `protobuf:"varint,84,opt,name=experimental_hash_group_join_enabled,json=experimentalHashGroupJoinEnabled,proto3" json:"experimental_hash_group_join_enabled,omitempty"`
	// AllowOrdinalColumnReferences indicates whether the deprecated ordinal
	// column reference syntax (e.g., `SELECT @1 FROM t`) is allowed.
	AllowOrdinalColumnReferences bool `protobuf:"varint,85,opt,name=allow_ordinal_column_references,json=allowOrdinalColumnReferences,proto3" json:"allow_ordinal_column_references,omitempty"`
	// OptimizerUseImprovedDisjunctionStats, when true, indicates that the
	// optimizer should use improved statistics calculations for disjunctive
	// filters.
	OptimizerUseImprovedDisjunctionStats bool `protobuf:"varint,86,opt,name=optimizer_use_improved_disjunction_stats,json=optimizerUseImprovedDisjunctionStats,proto3" json:"optimizer_use_improved_disjunction_stats,omitempty"`
	// OptimizerUseLimitOrderingForStreamingGroupBy enables the exploration rule
	// which optimizes 'SELECT ... GROUP BY ... ORDER BY ... LIMIT n' queries.
	// The rule uses the required ordering in the limit expression to inform an
	// interesting ordering to require from the input to the group-by expression.
	// This can potentially eliminate a top-k operation.
	OptimizerUseLimitOrderingForStreamingGroupBy bool `protobuf:"varint,88,opt,name=optimizer_use_limit_ordering_for_streaming_group_by,json=optimizerUseLimitOrderingForStreamingGroupBy,proto3" json:"optimizer_use_limit_ordering_for_streaming_group_by,omitempty"`
	// CopyFromRetriesEnabled controls whether retries should be internally
	// attempted for retriable errors.
	CopyFromRetriesEnabled bool `protobuf:"varint,89,opt,name=copy_from_retries_enabled,json=copyFromRetriesEnabled,proto3" json:"copy_from_retries_enabled,omitempty"`
	// DeclareCursorStatementTimeoutEnabled controls whether statement timeouts
	// apply during DECLARE CURSOR.
	DeclareCursorStatementTimeoutEnabled bool `protobuf:"varint,90,opt,name=declare_cursor_statement_timeout_enabled,json=declareCursorStatementTimeoutEnabled,proto3" json:"declare_cursor_statement_timeout_enabled,omitempty"`
	// OptimizerUseImprovedSplitDisjunctionForJoins enables the optimizer to split
	// disjunctions (OR expressions) in more cases in join conditions by building a
	// UNION of two join expressions. If this setting is true, all disjunctions in
	// inner, semi, and anti joins will be split. If false, only disjunctions
	// potentially containing an equijoin condition will be split.
	OptimizerUseImprovedSplitDisjunctionForJoins bool `protobuf:"varint,91,opt,name=optimizer_use_improved_split_disjunction_for_joins,json=optimizerUseImprovedSplitDisjunctionForJoins,proto3" json:"optimizer_use_improved_split_disjunction_for_joins,omitempty"`
	// InjectRetryErrorsOnCommitEnabled causes statements inside an explicit
	// transaction to return a transaction retry error just before transcation commit.
	// It is intended for developers to test their app's retry logic.
	InjectRetryErrorsOnCommitEnabled bool `protobuf:"varint,92,opt,name=inject_retry_errors_on_commit_enabled,json=injectRetryErrorsOnCommitEnabled,proto3" json:"inject_retry_errors_on_commit_enabled,omitempty"`
	// EnforceHomeRegionFollowerReadsEnabled, when true, allows the use of
	// follower reads to dynamically detect and report a query's home region
	// when the enforce_home_region session setting is also true.
	EnforceHomeRegionFollowerReadsEnabled bool `protobuf:"varint,93,opt,name=enforce_home_region_follower_reads_enabled,json=enforceHomeRegionFollowerReadsEnabled,proto3" json:"enforce_home_region_follower_reads_enabled,omitempty"`
	// OptimizerAlwaysUseHistograms, when true, ensures that the optimizer
	// always uses histograms to calculate statistics if available.
	OptimizerAlwaysUseHistograms bool `protobuf:"varint,94,opt,name=optimizer_always_use_histograms,json=optimizerAlwaysUseHistograms,proto3" json:"optimizer_always_use_histograms,omitempty"`
	// EnableCreateStatsUsingExtremes, when true, allows the use of CREATE
	// STATISTICS .. USING EXTREMES.
	EnableCreateStatsUsingExtremes bool `protobuf:"varint,95,opt,name=enable_create_stats_using_extremes,json=enableCreateStatsUsingExtremes,proto3" json:"enable_create_stats_using_extremes,omitempty"`
	// AllowRoleMembershipsToChangeDuringTransaction, when true, means that
	// operations which consult the role membership cache do not retain their
	// lease on that version of the cache throughout the transaction. The
	// consequence of this is that the transaction may not experience a singular
	// view of role membership, and it may be able to commit after the revocation
	// of a role membership which the transaction relied on has successfully been
	// committed and acknowledged to the user.
	AllowRoleMembershipsToChangeDuringTransaction bool `protobuf:"varint,96,opt,name=allow_role_memberships_to_change_during_transaction,json=allowRoleMembershipsToChangeDuringTransaction,proto3" json:"allow_role_memberships_to_change_during_transaction,omitempty"`
	// PreparedStatementsCacheSize, when not equal to 0, causes the LRU prepared
	// statements in a session to be automatically deallocated when total prepared
	// statement memory usage for that session is more than the cache size.
	// Execution of these deallocated prepared statements will fail until they are
	// prepared again.
	PreparedStatementsCacheSize int64 `protobuf:"varint,97,opt,name=prepared_statements_cache_size,json=preparedStatementsCacheSize,proto3" json:"prepared_statements_cache_size,omitempty"`
	// MultipleActivePortalEnabled determines if the pgwire portal execution
	// for certain queries can be paused. If true, portals with read-only SELECT
	// query without sub/post queries can be executed in interleaving manner, but
	// with a local execution plan.
	MultipleActivePortalsEnabled bool `protobuf:"varint,100,opt,name=multiple_active_portals_enabled,json=multipleActivePortalsEnabled,proto3" json:"multiple_active_portals_enabled,omitempty"`
	// UnboundedParallelScans, when true, indicates that the TableReader DistSQL
	// processors should parallelize scans across ranges. Note that the
	// parallelization will still be disabled for queries with LIMITs, and it can
	// lead to increased likelihood of OOMs.
	UnboundedParallelScans bool `protobuf:"varint,101,opt,name=unbounded_parallel_scans,json=unboundedParallelScans,proto3" json:"unbounded_parallel_scans,omitempty"`
	// OptimizerHoistUncorrelatedEqualitySubqueries, when true, causes the
	// optimizer to hoist uncorrelated subqueries that are part of an equality
	// expression with a column reference, which can produce more efficient query
	// plans.
	OptimizerHoistUncorrelatedEqualitySubqueries bool `protobuf:"varint,102,opt,name=optimizer_hoist_uncorrelated_equality_subqueries,json=optimizerHoistUncorrelatedEqualitySubqueries,proto3" json:"optimizer_hoist_uncorrelated_equality_subqueries,omitempty"`
	// TestingOptimizerInjectPanics indicates whether random panics are injected
	// during optimization. The goal of this setting is to flush out cases where
	// panics used for error-propagation are uncaught.
	TestingOptimizerInjectPanics bool `protobuf:"varint,103,opt,name=testing_optimizer_inject_panics,json=testingOptimizerInjectPanics,proto3" json:"testing_optimizer_inject_panics,omitempty"`
	// OptimizerUseImprovedComputedColumnFiltersDerivation, when true, causes the
	// optimizer to derive filters on computed columns in more cases. Previously,
	// filters could only be derived when the expression defining the computed
	// column involved a single column and that column was equated with a single
	// constant value in a WHERE clause filter.
	OptimizerUseImprovedComputedColumnFiltersDerivation bool `protobuf:"varint,104,opt,name=optimizer_use_improved_computed_column_filters_derivation,json=optimizerUseImprovedComputedColumnFiltersDerivation,proto3" json:"optimizer_use_improved_computed_column_filters_derivation,omitempty"`
	// DefaultTxnIsolationLevel indicates the default isolation level of newly
	// created transactions.
	// NOTE: we'd prefer to use tree.IsolationLevel here, but doing so would
	// introduce a package dependency cycle.
	DefaultTxnIsolationLevel int64 `protobuf:"varint,105,opt,name=default_txn_isolation_level,json=defaultTxnIsolationLevel,proto3" json:"default_txn_isolation_level,omitempty"`
	// ReplicationMode represents the replication parameter passed in during
	// connection time.
	ReplicationMode ReplicationMode `protobuf:"varint,106,opt,name=replication_mode,json=replicationMode,proto3,enum=cockroach.sql.sessiondatapb.ReplicationMode" json:"replication_mode,omitempty"`
	// OptimizerUseImprovedJoinElimination, when true, allows the optimizer to
	// eliminate joins in more cases by remapping columns from the eliminated
	// input of the join to equivalent columns from the preserved input.
	OptimizerUseImprovedJoinElimination bool `protobuf:"varint,107,opt,name=optimizer_use_improved_join_elimination,json=optimizerUseImprovedJoinElimination,proto3" json:"optimizer_use_improved_join_elimination,omitempty"`
	// ImplicitFKLockingForSerializable is true if FOR SHARE locking may be used
	// while checking the referenced table during an insert or update to a table
	// with a foreign key under serializable isolation. (Under weaker isolation
	// levels foreign key checks of the parent table always use FOR SHARE
	// locking.)
	ImplicitFKLockingForSerializable bool `protobuf:"varint,108,opt,name=implicit_fk_locking_for_serializable,json=implicitFkLockingForSerializable,proto3" json:"implicit_fk_locking_for_serializable,omitempty"`
	// DurableLockingForSerializable is true if we should use durable locking for
	// SELECT FOR UPDATE statements, SELECT FOR SHARE statements, and constraint
	// checks under serializable isolation. (Serializable isolation does not
	// require locking for correctness, so by default we use best-effort locks for
	// better performance.) Weaker isolation levels always use durable locking.
	DurableLockingForSerializable bool `protobuf:"varint,109,opt,name=durable_locking_for_serializable,json=durableLockingForSerializable,proto3" json:"durable_locking_for_serializable,omitempty"`
	// SharedLockingForSerializable, if set to true, means SELECT FOR SHARE and
	// SELECT FOR KEY SHARE statements issued by transactions that run with
	// serializable isolation will acquire shared locks; otherwise, they'll
	// perform non-locking reads.
	//
	// Weaker isolation levels always acquire shared locks for SELECT FOR SHARE
	// and SELECT FOR KEY SHARE statements, regardless of this session setting.
	SharedLockingForSerializable bool `protobuf:"varint,112,opt,name=shared_locking_for_serializable,json=sharedLockingForSerializable,proto3" json:"shared_locking_for_serializable,omitempty"`
	// MaxRetriesForReadCommitted indicates the maximum number of
	// automatic retries to perform for statements in explicit READ COMMITTED
	// transactions that see a transaction retry error.
	MaxRetriesForReadCommitted int32 `protobuf:"varint,110,opt,name=max_retries_for_read_committed,json=maxRetriesForReadCommitted,proto3" json:"max_retries_for_read_committed,omitempty"`
	// StrictDDLAtomicity causes errors when the client attempts DDL
	// operations inside an explicit txn and CockroachDB cannot
	// guarantee the DDL to be performed atomically.
	//
	// When this is not set, a transaction may commit its DML
	// statements but fail its DDL statements, resulting
	// in error XXA00 - TransactionCommittedWithSchemaChangeFailure.
	//
	// When this is set, that particular atomicity violation should
	// not occur any more (at the expense of disabling certain
	// forms of DDL inside explicit txns).
	StrictDDLAtomicity bool `protobuf:"varint,111,opt,name=strict_ddl_atomicity,json=strictDdlAtomicity,proto3" json:"strict_ddl_atomicity,omitempty"`
	// UnsafeSettingInterlockKey needs to be set to a special string
	// before SET CLUSTER SETTING is allowed on an unsafe setting.
	UnsafeSettingInterlockKey string `protobuf:"bytes,113,opt,name=unsafe_setting_interlock_key,json=unsafeSettingInterlockKey,proto3" json:"unsafe_setting_interlock_key,omitempty"`
	// OptimizerUseLockOpForSerializable, when true, instructs the optimizer to
	// implement SELECT FOR UPDATE and SELECT FOR SHARE statements using the Lock
	// operator under serializable isolation.
	//
	// For correctness, under weaker isolation levels the optimizer always
	// implements SELECT FOR UPDATE and SELECT FOR SHARE using the Lock operator,
	// regardless of this setting.
	OptimizerUseLockOpForSerializable bool `protobuf:"varint,114,opt,name=optimizer_use_lock_op_for_serializable,json=optimizerUseLockOpForSerializable,proto3" json:"optimizer_use_lock_op_for_serializable,omitempty"`
	// OptimizerUseProvidedOrderingFix, when true, causes the optimizer to
	// reconcile provided orderings with required ordering choices. This prevents
	// internal errors due to incomplete functional dependencies, and also
	// fixes a bug that incorrectly truncated the provided ordering (see #113072).
	OptimizerUseProvidedOrderingFix bool `protobuf:"varint,115,opt,name=optimizer_use_provided_ordering_fix,json=optimizerUseProvidedOrderingFix,proto3" json:"optimizer_use_provided_ordering_fix,omitempty"`
	// DisableChangefeedReplication, when true, disables changefeed events from
	// being emitted for changes to data made in a session. This will apply only
	// to new txns created in the session.
	DisableChangefeedReplication bool `protobuf:"varint,116,opt,name=disable_changefeed_replication,json=disableChangefeedReplication,proto3" json:"disable_changefeed_replication,omitempty"`
	// CopyTxnQualityOfService indicates the default QoSLevel/WorkPriority of the
	// transactions used to evaluate COPY commands.
	CopyTxnQualityOfService QoSLevel `protobuf:"varint,117,opt,name=copy_txn_quality_of_service,json=copyTxnQualityOfService,proto3,casttype=QoSLevel" json:"copy_txn_quality_of_service,omitempty"`
	// CopyWritePipeliningEnabled indicates whether the write pipelining is
	// enabled for implicit txns used by COPY.
	CopyWritePipeliningEnabled bool `protobuf:"varint,118,opt,name=copy_write_pipelining_enabled,json=copyWritePipeliningEnabled,proto3" json:"copy_write_pipelining_enabled,omitempty"`
	// OptimizerMergeJoinsEnabled, when true, instructs the optimizer to explore
	// query plans with merge joins. When false, the optimizer does not attempt
	// to plan merge joins.
	OptimizerMergeJoinsEnabled bool `protobuf:"varint,119,opt,name=optimizer_merge_joins_enabled,json=optimizerMergeJoinsEnabled,proto3" json:"optimizer_merge_joins_enabled,omitempty"`
	// CopyNumRetriesPerBatch determines the number of times a single batch of
	// rows can be retried for non-atomic COPY.
	CopyNumRetriesPerBatch int32 `protobuf:"varint,120,opt,name=copy_num_retries_per_batch,json=copyNumRetriesPerBatch,proto3" json:"copy_num_retries_per_batch,omitempty"`
	// AutoCommitBeforeDDL will cause any DDL statement received during a
	// multi-statement transaction to make the transaction auto-commit before
	// executing the DDL statement. After the auto-commit, any other statements
	// that are in the transaction block will instead be executed in their own
	// implicit transaction.
	AutoCommitBeforeDDL bool `protobuf:"varint,121,opt,name=autocommit_before_ddl,json=autocommitBeforeDdl,proto3" json:"autocommit_before_ddl,omitempty"`
	// CloseCursorsAtCommit determines whether cursors remain open after their
	// parent transaction closes. This is useful for oracle compatibility.
	CloseCursorsAtCommit bool `protobuf:"varint,122,opt,name=close_cursors_at_commit,json=closeCursorsAtCommit,proto3" json:"close_cursors_at_commit,omitempty"`
	// PLpgSQLUseStrictInto causes PL/pgSQL "SELECT ... INTO" and "RETURNING INTO"
	// syntax to always behave as if they were specified with the STRICT option,
	// which throws a runtime error when the SQL statement doesn't return exactly
	// one row. This is useful for oracle compatibility.
	PLpgSQLUseStrictInto bool `protobuf:"varint,123,opt,name=plpgsql_use_strict_into,json=plpgsqlUseStrictInto,proto3" json:"plpgsql_use_strict_into,omitempty"`
	// OptimizerUseVirtualComputedColumnStats indicates whether we should use
	// statistics on virtual computed columns for cardinality estimation in the
	// optimizer.
	OptimizerUseVirtualComputedColumnStats bool `protobuf:"varint,124,opt,name=optimizer_use_virtual_computed_column_stats,json=optimizerUseVirtualComputedColumnStats,proto3" json:"optimizer_use_virtual_computed_column_stats,omitempty"`
	// OptimizerUseTrigramSimilarityOptimization indicates whether the optimizer
	// should generate improved plans for queries with trigram similarity filters.
	OptimizerUseTrigramSimilarityOptimization bool `protobuf:"varint,125,opt,name=optimizer_use_trigram_similarity_optimization,json=optimizerUseTrigramSimilarityOptimization,proto3" json:"optimizer_use_trigram_similarity_optimization,omitempty"`
	// OptimizerUseImprovedDistinctOnLimitHintCosting indicates whether the
	// optimizer should use an improved costing estimate for DistinctOn operators
	// with limit hints.
	OptimizerUseImprovedDistinctOnLimitHintCosting bool `protobuf:"varint,126,opt,name=optimizer_use_improved_distinct_on_limit_hint_costing,json=optimizerUseImprovedDistinctOnLimitHintCosting,proto3" json:"optimizer_use_improved_distinct_on_limit_hint_costing,omitempty"`
	// OptimizerUseImprovedTrigramSimilaritySelectivity indicates whether the
	// optimizer should use an improved selectivitiy estimate for trigram
	// similarity filters.
	OptimizerUseImprovedTrigramSimilaritySelectivity bool `protobuf:"varint,127,opt,name=optimizer_use_improved_trigram_similarity_selectivity,json=optimizerUseImprovedTrigramSimilaritySelectivity,proto3" json:"optimizer_use_improved_trigram_similarity_selectivity,omitempty"`
	// OptimizerUseImprovedZigzagJoinCosting, when true, indicates that the
	// optimizer should use improved logic in the cost model for zigzag joins.
	OptimizerUseImprovedZigzagJoinCosting bool `protobuf:"varint,128,opt,name=optimizer_use_improved_zigzag_join_costing,json=optimizerUseImprovedZigzagJoinCosting,proto3" json:"optimizer_use_improved_zigzag_join_costing,omitempty"`
	// OptimizerUseImprovedMultiColumnSelectivityEstimate, when true, indicates
	// that the optimizer should use an improved selectivity estimate for
	// multi-column predicates.
	OptimizerUseImprovedMultiColumnSelectivityEstimate bool `protobuf:"varint,129,opt,name=optimizer_use_improved_multi_column_selectivity_estimate,json=optimizerUseImprovedMultiColumnSelectivityEstimate,proto3" json:"optimizer_use_improved_multi_column_selectivity_estimate,omitempty"`
	// OptimizerProveImplicationWithVirtualComputedColumns, when true, indicates
	// that the optimizer should use virtual computed columns to prove partial
	// index implication.
	OptimizerProveImplicationWithVirtualComputedColumns bool `protobuf:"varint,130,opt,name=optimizer_prove_implication_with_virtual_computed_columns,json=optimizerProveImplicationWithVirtualComputedColumns,proto3" json:"optimizer_prove_implication_with_virtual_computed_columns,omitempty"`
	// OptimizerPushOffsetIntoIndexJoin, when true, indicates that the optimizer
	// should push offset expressions into index joins.
	OptimizerPushOffsetIntoIndexJoin bool `protobuf:"varint,132,opt,name=optimizer_push_offset_into_index_join,json=optimizerPushOffsetIntoIndexJoin,proto3" json:"optimizer_push_offset_into_index_join,omitempty"`
	// PlanCacheMode indicates the method that the optimizer should use to choose
	// between a custom and generic query plan.
	PlanCacheMode PlanCacheMode `protobuf:"varint,133,opt,name=plan_cache_mode,json=planCacheMode,proto3,enum=cockroach.sql.sessiondatapb.PlanCacheMode" json:"plan_cache_mode,omitempty"`
	// OptimizerUsePolymorphicParameterFix, when true, causes the optimizer to
	// validate a routine's polymorphic parameters during overload resolution
	// and type-checking.
	OptimizerUsePolymorphicParameterFix bool `protobuf:"varint,134,opt,name=optimizer_use_polymorphic_parameter_fix,json=optimizerUsePolymorphicParameterFix,proto3" json:"optimizer_use_polymorphic_parameter_fix,omitempty"`
	// OriginIDForLogicalDataReplication is an identifier for the cluster that
	// originally wrote the data that are being written in this session. An
	// originID of 0 (the default) identifies a local write, 1 identifies a remote
	// write of unspecified origin, and 2+ are reserved to identify remote writes
	// from specific clusters.
	OriginIDForLogicalDataReplication uint32 `protobuf:"varint,135,opt,name=origin_id_for_logical_data_replication,json=originIdForLogicalDataReplication,proto3" json:"origin_id_for_logical_data_replication,omitempty"`
	// EnableCreateStatsUsingExtremesBoolEnum, when true, allows the use of CREATE
	// STATISTICS .. USING EXTREMES on bool and enum columns.
	EnableCreateStatsUsingExtremesBoolEnum bool `protobuf:"varint,136,opt,name=enable_create_stats_using_extremes_bool_enum,json=enableCreateStatsUsingExtremesBoolEnum,proto3" json:"enable_create_stats_using_extremes_bool_enum,omitempty"`
	// OptimizerUseMergedPartialStatistics indicates whether we should use
	// statistics merged from partial and full statistics for cardinality
	// estimation in the optimizer.
	OptimizerUseMergedPartialStatistics bool `protobuf:"varint,137,opt,name=optimizer_use_merged_partial_statistics,json=optimizerUseMergedPartialStatistics,proto3" json:"optimizer_use_merged_partial_statistics,omitempty"`
	// OptimizerUseConditionalHoistFix, when true, prevents the optimizer from
	// hoisting a volatile expression that is conditionally executed by a CASE,
	// COALESCE, or IFERR expression.
	OptimizerUseConditionalHoistFix bool `protobuf:"varint,138,opt,name=optimizer_use_conditional_hoist_fix,json=optimizerUseConditionalHoistFix,proto3" json:"optimizer_use_conditional_hoist_fix,omitempty"`
	// OptimizerPushLimitIntoProjectFilteredScan, when true, indicates that the
	// optimizer should push limit expressions into projects of filtered scans.
	OptimizerPushLimitIntoProjectFilteredScan bool `protobuf:"varint,139,opt,name=optimizer_push_limit_into_project_filtered_scan,json=optimizerPushLimitIntoProjectFilteredScan,proto3" json:"optimizer_push_limit_into_project_filtered_scan,omitempty"`
	// OriginTimestampForLogicalDataReplication is the mvcc timestamp the data
	// written in this session were originally written with before being
	// replicated via Logical Data Replication.
	OriginTimestampForLogicalDataReplication hlc.Timestamp `protobuf:"bytes,140,opt,name=origin_timestamp_for_logical_data_replication,json=originTimestampForLogicalDataReplication,proto3" json:"origin_timestamp_for_logical_data_replication"`
	// BypassPCRReaderCatalogAOST disables the AOST used by all user queries on
	// the PCR reader catalog.
	BypassPCRReaderCatalogAOST bool `protobuf:"varint,141,opt,name=bypass_pcr_reader_catalog_aost,json=bypassPcrReaderCatalogAost,proto3" json:"bypass_pcr_reader_catalog_aost,omitempty"`
	// UnsafeAllowTriggersModifyingCascades, when true, allows row-level BEFORE
	// triggers to modify or filter rows that are being updated or deleted as
	// part of a cascading foreign key action. This is unsafe because it can
	// lead to constraint violations.
	UnsafeAllowTriggersModifyingCascades bool `protobuf:"varint,142,opt,name=unsafe_allow_triggers_modifying_cascades,json=unsafeAllowTriggersModifyingCascades,proto3" json:"unsafe_allow_triggers_modifying_cascades,omitempty"`
	// DisableVecUnionEagerCancellation disables the eager cancellation that is
	// performed by the vectorized engine when transitioning into the draining
	// state in some cases.
	DisableVecUnionEagerCancellation bool `protobuf:"varint,143,opt,name=disable_vec_union_eager_cancellation,json=disableVecUnionEagerCancellation,proto3" json:"disable_vec_union_eager_cancellation,omitempty"`
	// RecursionDepthLimit is the maximum depth that nested trigger-function calls
	// can reach.
	RecursionDepthLimit int64 `protobuf:"varint,144,opt,name=recursion_depth_limit,json=recursionDepthLimit,proto3" json:"recursion_depth_limit,omitempty"`
	// DistributeGroupByRowCountThreshold is the minimum number of rows estimated
	// to be processed by the GroupBy operator so that we choose to distribute the
	// plan because of this aggregator stage of DistSQL processors.
	DistributeGroupByRowCountThreshold uint64 `protobuf:"varint,145,opt,name=distribute_group_by_row_count_threshold,json=distributeGroupByRowCountThreshold,proto3" json:"distribute_group_by_row_count_threshold,omitempty"`
	// DistributeSortRowCountThreshold is the minimum number of rows estimated
	// to be processed by the Sort operator so that we choose to distribute the
	// plan because of this sorter stage of DistSQL processors.
	DistributeSortRowCountThreshold uint64 `protobuf:"varint,146,opt,name=distribute_sort_row_count_threshold,json=distributeSortRowCountThreshold,proto3" json:"distribute_sort_row_count_threshold,omitempty"`
	// DistributeScanRowCountThreshold is the minimum number of rows estimated to
	// be read by the Scan operator so that we choose to distribute the plan
	// because of this TableReader stage of DistSQL processors.
	DistributeScanRowCountThreshold uint64 `protobuf:"varint,147,opt,name=distribute_scan_row_count_threshold,json=distributeScanRowCountThreshold,proto3" json:"distribute_scan_row_count_threshold,omitempty"`
	// AlwaysDistributeFullScans determines whether full table scans always force
	// the plan to be distributed, regardless of the estimated row count.
	AlwaysDistributeFullScans bool `protobuf:"varint,148,opt,name=always_distribute_full_scans,json=alwaysDistributeFullScans,proto3" json:"always_distribute_full_scans,omitempty"`
	// DistributeJoinRowCountThreshold is the minimum number of rows estimated to
	// be processed from both inputs by the hash or merge join so that we choose
	// to distribute the plan because of this joiner stage of DistSQL processors.
	DistributeJoinRowCountThreshold uint64 `protobuf:"varint,149,opt,name=distribute_join_row_count_threshold,json=distributeJoinRowCountThreshold,proto3" json:"distribute_join_row_count_threshold,omitempty"`
	// LegacyVarcharTyping controls the legacy behavior of allowing some invalid
	// mix-typed comparisons with VARCHAR types. See #137837, #133037, and
	// #132268.
	LegacyVarcharTyping bool `protobuf:"varint,150,opt,name=legacy_varchar_typing,json=legacyVarcharTyping,proto3" json:"legacy_varchar_typing,omitempty"`
	// AvoidFullTableScansInMutations indicates whether mutation queries that plan
	// full table scans should be avoided.
	AvoidFullTableScansInMutations bool `protobuf:"varint,151,opt,name=avoid_full_table_scans_in_mutations,json=avoidFullTableScansInMutations,proto3" json:"avoid_full_table_scans_in_mutations,omitempty"`
	// CatalogDigestStalenessCheckEnabled is used to enable using the catalog
	// digest information to do fast memo checks.
	CatalogDigestStalenessCheckEnabled bool `protobuf:"varint,153,opt,name=catalog_digest_staleness_check_enabled,json=catalogDigestStalenessCheckEnabled,proto3" json:"catalog_digest_staleness_check_enabled,omitempty"`
	// OptimizerPreferBoundedCardinality instructs the optimizer to prefer query
	// plans in which every expression has a bounded cardinality over plans with
	// one or more expressions with unbounded cardinality.
	OptimizerPreferBoundedCardinality bool `protobuf:"varint,154,opt,name=optimizer_prefer_bounded_cardinality,json=optimizerPreferBoundedCardinality,proto3" json:"optimizer_prefer_bounded_cardinality,omitempty"`
	// OptimizerMinRowCount sets a lower bound on row count estimates for
	// relational expressions during query planning. A value of zero indicates no
	// lower bound. Note that if this is set to a value greater than zero, a row
	// count of zero can still be estimated for expressions with a cardinality of
	// zero, e.g., for a contradictory filter.
	OptimizerMinRowCount float64 `protobuf:"fixed64,155,opt,name=optimizer_min_row_count,json=optimizerMinRowCount,proto3" json:"optimizer_min_row_count,omitempty"`
	// BufferedWritesEnabled controls whether the buffered writes KV transaction
	// protocol is used for user queries on the current session. If this variable
	// is modified in an explicit txn, then the change will be applied only to
	// future txns on the session.
	BufferedWritesEnabled bool `protobuf:"varint,156,opt,name=buffered_writes_enabled,json=bufferedWritesEnabled,proto3" json:"buffered_writes_enabled,omitempty"`
	// OptimizerCheckInputMinRowCount sets a lower bound on row count estimates
	// for the buffer scan of FK and uniqueness checks. A value of zero indicates
	// no lower bound.
	OptimizerCheckInputMinRowCount float64 `protobuf:"fixed64,157,opt,name=optimizer_check_input_min_row_count,json=optimizerCheckInputMinRowCount,proto3" json:"optimizer_check_input_min_row_count,omitempty"`
	// OptimizerPlanLookupJoinsWithReverseScans enables planning for lookup joins
	// that use reverse scans to get results in reverse index order on each
	// lookup.
	OptimizerPlanLookupJoinsWithReverseScans bool `protobuf:"varint,158,opt,name=optimizer_plan_lookup_joins_with_reverse_scans,json=optimizerPlanLookupJoinsWithReverseScans,proto3" json:"optimizer_plan_lookup_joins_with_reverse_scans,omitempty"`
	// RegisterLatchWaitContentionEvents, when true, causes latch wait contention
	// events to be registered with the *.contention_events virtual tables. It
	// defaults to false in order to avoid registering a large number of
	// uninformative latch wait events.
	RegisterLatchWaitContentionEvents bool `protobuf:"varint,159,opt,name=register_latch_wait_contention_events,json=registerLatchWaitContentionEvents,proto3" json:"register_latch_wait_contention_events,omitempty"`
	// UseCPutsOnNonUniqueIndexes, when true, indicates that CPuts should be used
	// when writing new KVs into the non-unique indexes. It is an escape hatch in
	// case our thinking that we don't need the CPut in such a scenario is wrong.
	//
	// This will have impact regardless of the buffered writes.
	UseCPutsOnNonUniqueIndexes bool `protobuf:"varint,160,opt,name=use_cputs_on_non_unique_indexes,json=useCputsOnNonUniqueIndexes,proto3" json:"use_cputs_on_non_unique_indexes,omitempty"`
	// BufferedWritesUseLockingOnNonUniqueIndexes, when true, indicates that
	// locking Puts and Dels should be used when writing into the non-unique
	// indexes.
	//
	// This will only have impact when BufferedWritesEnabled is set.
	BufferedWritesUseLockingOnNonUniqueIndexes bool `protobuf:"varint,161,opt,name=buffered_writes_use_locking_on_non_unique_indexes,json=bufferedWritesUseLockingOnNonUniqueIndexes,proto3" json:"buffered_writes_use_locking_on_non_unique_indexes,omitempty"`
	// OptimizerUseLockElisionMultipleFamilies, when true, indicates that the lock
	// eliding optimization should be enabled for tables with multiple column
	// families.
	//
	// This will only have impact when BufferedWritesEnabled is set.
	OptimizerUseLockElisionMultipleFamilies bool `protobuf:"varint,162,opt,name=optimizer_use_lock_elision_multiple_families,json=optimizerUseLockElisionMultipleFamilies,proto3" json:"optimizer_use_lock_elision_multiple_families,omitempty"`
	// OptimizerEnableLockElision, when false, indicates that the lock eliding
	// optimization should be disabled for tables with any number of column
	// families. It takes precedence over OptimizerUseLockElisionMultipleFamilies.
	//
	// This will only have impact when BufferedWritesEnabled is set.
	OptimizerEnableLockElision bool `protobuf:"varint,163,opt,name=optimizer_enable_lock_elision,json=optimizerEnableLockElision,proto3" json:"optimizer_enable_lock_elision,omitempty"`
	// OptimizerUseDeleteRangeFastPath, when true, indicates that the optimizer
	// should try to use the delete range fast-path when possible.
	OptimizerUseDeleteRangeFastPath bool `protobuf:"varint,164,opt,name=optimizer_use_delete_range_fast_path,json=optimizerUseDeleteRangeFastPath,proto3" json:"optimizer_use_delete_range_fast_path,omitempty"`
	// AllowCreateTriggerFunctionWithArgvReferences, when true, allows triggers to
	// be created with trigger functions that use the TG_ARGV parameter even
	// though it currently doesn't have Postgres-compatible 0-based indexing
	// behavior.
	AllowCreateTriggerFunctionWithArgvReferences bool `protobuf:"varint,165,opt,name=allow_create_trigger_function_with_argv_references,json=allowCreateTriggerFunctionWithArgvReferences,proto3" json:"allow_create_trigger_function_with_argv_references,omitempty"`
	// UsePre_25_2VariadicBuiltins, when true, will treat variadic builtins with a
	// types.Any variadic argument as types.AnyElement (the pre-25.2 behavior)
	UsePre_25_2VariadicBuiltins bool `protobuf:"varint,167,opt,name=use_pre_25_2_variadic_builtins,json=usePre252VariadicBuiltins,proto3" json:"use_pre_25_2_variadic_builtins,omitempty"`
	// VectorSearchBeamSize controls the number of candidates examined during
	// vector index searches. It represents the number of vector partitions that
	// are considered at each level of the search tree. Higher values increase
	// search accuracy but require more processing resources.
	VectorSearchBeamSize int32 `protobuf:"varint,168,opt,name=vector_search_beam_size,json=vectorSearchBeamSize,proto3" json:"vector_search_beam_size,omitempty"`
	// PropagateAdmissionHeaderToLeafTransactions, when true, causes leaf
	// transactions to inherit the admission header from the root transaction.
	PropagateAdmissionHeaderToLeafTransactions bool `protobuf:"varint,169,opt,name=propagate_admission_header_to_leaf_transactions,json=propagateAdmissionHeaderToLeafTransactions,proto3" json:"propagate_admission_header_to_leaf_transactions,omitempty"`
	// OptimizerUseExistsFilterHoistRule, when true, causes the optimizer to apply
	// the HoistUnboundFilterFromExistsSubquery rule to EXISTS conditions.
	OptimizerUseExistsFilterHoistRule bool `protobuf:"varint,170,opt,name=optimizer_use_exists_filter_hoist_rule,json=optimizerUseExistsFilterHoistRule,proto3" json:"optimizer_use_exists_filter_hoist_rule,omitempty"`
}

func (m *LocalOnlySessionData) Reset()         { *m = LocalOnlySessionData{} }
func (m *LocalOnlySessionData) String() string { return proto.CompactTextString(m) }
func (*LocalOnlySessionData) ProtoMessage()    {}
func (*LocalOnlySessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{0}
}
func (m *LocalOnlySessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalOnlySessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalOnlySessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalOnlySessionData.Merge(m, src)
}
func (m *LocalOnlySessionData) XXX_Size() int {
	return m.Size()
}
func (m *LocalOnlySessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalOnlySessionData.DiscardUnknown(m)
}

var xxx_messageInfo_LocalOnlySessionData proto.InternalMessageInfo

// SequenceCacheEntry is an entry in a SequenceCache.
type SequenceCacheEntry struct {
	// CachedVersion stores the descpb.DescriptorVersion that cached values are associated with.
	// The version is checked to determine if cache needs to be invalidated. The version is stored as
	// a uint32 to prevent an import cycle with the descpb package.
	CachedVersion uint32 `protobuf:"varint,1,opt,name=cached_version,json=cachedVersion,proto3" json:"cached_version,omitempty"`
	// CurrentValue stores the present value of the sequence to be given out.
	CurrentValue int64 `protobuf:"varint,2,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	// Increment stores the amount to Increment the currentVal by each time the
	// currentVal is used. This value corresponds to descpb.TableDescriptor_SequenceOpts.Increment.
	Increment int64 `protobuf:"varint,3,opt,name=increment,proto3" json:"increment,omitempty"`
	// NumValues represents the number of values to cache. The cache is considered
	// to be empty when NumValues is 0.
	NumValues int64 `protobuf:"varint,4,opt,name=num_values,json=numValues,proto3" json:"num_values,omitempty"`
}

func (m *SequenceCacheEntry) Reset()         { *m = SequenceCacheEntry{} }
func (m *SequenceCacheEntry) String() string { return proto.CompactTextString(m) }
func (*SequenceCacheEntry) ProtoMessage()    {}
func (*SequenceCacheEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{1}
}
func (m *SequenceCacheEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceCacheEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceCacheEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceCacheEntry.Merge(m, src)
}
func (m *SequenceCacheEntry) XXX_Size() int {
	return m.Size()
}
func (m *SequenceCacheEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceCacheEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceCacheEntry proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.parser.sql.sessiondatapb.ReplicationMode", ReplicationMode_name, ReplicationMode_value)
	proto.RegisterEnum("cockroach.parser.sql.sessiondatapb.PlanCacheMode", PlanCacheMode_name, PlanCacheMode_value)
	proto.RegisterType((*LocalOnlySessionData)(nil), "cockroach.parser.sql.sessiondatapb.LocalOnlySessionData")
	proto.RegisterMapType((map[string]string)(nil), "cockroach.parser.sql.sessiondatapb.LocalOnlySessionData.CustomOptionsEntry")
	proto.RegisterMapType((SequenceCache)(nil), "cockroach.parser.sql.sessiondatapb.LocalOnlySessionData.SequenceCacheEntry")
	proto.RegisterType((*SequenceCacheEntry)(nil), "cockroach.parser.sql.sessiondatapb.SequenceCacheEntry")
}

func init() {
	proto.RegisterFile("sql/sessiondatapb/local_only_session_data.proto", fileDescriptor_21ead158cf36da28)
}

var fileDescriptor_21ead158cf36da28 = []byte{
	// 5432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x7b, 0xdb, 0x7b, 0x1c, 0xc7,
	0x71, 0x2f, 0x57, 0xa2, 0x75, 0xa8, 0xa6, 0x28, 0x82, 0x43, 0x50, 0x18, 0x82, 0x24, 0x16, 0xa4,
	0x48, 0x09, 0xa2, 0x44, 0x40, 0x06, 0x2d, 0x59, 0x92, 0x8f, 0x8f, 0x85, 0x5d, 0x00, 0x22, 0x48,
	0x90, 0x58, 0xee, 0x82, 0xa4, 0x4d, 0x1f, 0xbb, 0x3d, 0x98, 0xe9, 0xdd, 0x6d, 0x61, 0x76, 0x7a,
	0xd0, 0xdd, 0x03, 0x62, 0x99, 0xc4, 0xb9, 0xd9, 0x89, 0xa3, 0x5c, 0xec, 0xc4, 0xb9, 0x39, 0x89,
	0x72, 0xb3, 0x93, 0x38, 0xf9, 0x4b, 0xfc, 0xe8, 0x47, 0x3f, 0xe1, 0x4b, 0xe0, 0xff, 0x82, 0x4f,
	0xf9, 0xaa, 0xaa, 0x67, 0x76, 0x76, 0xb1, 0x90, 0xf3, 0xe5, 0x0d, 0x3b, 0xf5, 0xab, 0xea, 0x9e,
	0x9e, 0xea, 0xaa, 0x5f, 0x55, 0x37, 0xd8, 0x82, 0xd9, 0x89, 0x17, 0x8c, 0x30, 0x46, 0xaa, 0x24,
	0x0a, 0x6c, 0x90, 0x6e, 0x2d, 0xc4, 0x2a, 0x0c, 0x62, 0xae, 0x92, 0xb8, 0xcf, 0x9d, 0x80, 0x83,
	0x64, 0x3e, 0xd5, 0xca, 0x2a, 0xef, 0x42, 0xa8, 0xc2, 0x6d, 0xad, 0x82, 0xb0, 0x3b, 0x6f, 0x76,
	0xe2, 0xf9, 0x21, 0xd5, 0xe9, 0xc9, 0x8e, 0xea, 0x28, 0xc4, 0x2d, 0xc0, 0x5f, 0xa4, 0x32, 0xed,
	0x67, 0x56, 0xc6, 0x0b, 0xdd, 0x38, 0x5c, 0xb0, 0xb2, 0x27, 0x8c, 0x0d, 0x7a, 0x29, 0x49, 0xae,
	0x7c, 0x3f, 0x60, 0x93, 0xeb, 0x30, 0xdc, 0x46, 0x12, 0xf7, 0x5b, 0x64, 0x6a, 0x39, 0xb0, 0x81,
	0xf7, 0x16, 0xf3, 0x4c, 0xb0, 0x2b, 0xb8, 0x0d, 0xb6, 0x62, 0x61, 0x78, 0xaa, 0x45, 0x5b, 0xee,
	0xf9, 0x95, 0xd9, 0xca, 0xdc, 0x8b, 0xcd, 0x09, 0x90, 0x6c, 0xa2, 0xa0, 0x81, 0xcf, 0xbd, 0xaf,
	0xb3, 0x0b, 0x2a, 0xb5, 0xb2, 0x27, 0x9f, 0x0a, 0xcd, 0xdb, 0xdb, 0x3c, 0x0c, 0x4c, 0x18, 0x44,
	0xc2, 0xf0, 0x58, 0xf6, 0xa4, 0xf5, 0x9f, 0x9b, 0xad, 0xcc, 0x3d, 0x5f, 0xbb, 0x78, 0xb0, 0x5f,
	0xf5, 0x37, 0x72, 0xd8, 0xea, 0x9d, 0xba, 0x03, 0xad, 0x03, 0xa6, 0xe9, 0x17, 0x06, 0x56, 0xb7,
	0x87, 0x24, 0xde, 0x17, 0xd8, 0x4b, 0xc6, 0xf6, 0x2c, 0x87, 0xb9, 0xab, 0xcc, 0xfa, 0xcf, 0xa3,
	0xb5, 0x33, 0xcf, 0xf6, 0xab, 0xa7, 0xe0, 0xd1, 0xfc, 0x72, 0xa6, 0x03, 0x2b, 0x55, 0xd2, 0x3c,
	0x09, 0xb0, 0x4d, 0x42, 0x79, 0xb7, 0xd8, 0x94, 0x8c, 0x62, 0xc1, 0x65, 0x52, 0x2c, 0x62, 0x6e,
	0xe0, 0xf8, 0x51, 0x06, 0x26, 0x41, 0x63, 0x2d, 0x71, 0xeb, 0x90, 0x5b, 0xe2, 0xec, 0xd5, 0xdc,
	0x92, 0xd5, 0x41, 0x62, 0x82, 0x10, 0xc0, 0x87, 0xac, 0x7e, 0xee, 0x28, 0xab, 0x55, 0xb2, 0xba,
	0x39, 0xd0, 0x1d, 0x19, 0xe0, 0x5d, 0x36, 0x95, 0x28, 0x2b, 0x43, 0xc1, 0x23, 0x69, 0xd2, 0x38,
	0x80, 0xcf, 0xbe, 0x2b, 0xb4, 0xb4, 0x7d, 0xff, 0x85, 0xd9, 0xca, 0xdc, 0xa9, 0xe6, 0x39, 0x12,
	0x2f, 0x93, 0xb4, 0xe5, 0x84, 0xde, 0x3c, 0x3b, 0xab, 0x85, 0xd2, 0x91, 0xd0, 0xfc, 0x63, 0x25,
	0x93, 0x7c, 0xb5, 0xff, 0x0f, 0x4c, 0xa4, 0x79, 0xc6, 0x89, 0x6e, 0x83, 0x84, 0x16, 0xf2, 0x6d,
	0x36, 0x19, 0x89, 0x76, 0x90, 0xc5, 0x96, 0xdb, 0xbd, 0x84, 0xa7, 0x5a, 0x2a, 0x1c, 0xe4, 0x04,
	0x2a, 0x78, 0x4e, 0xb6, 0xb9, 0x97, 0x34, 0x9c, 0xc4, 0xfb, 0x3c, 0x3b, 0x57, 0xd6, 0xd0, 0x22,
	0x88, 0xd0, 0x2f, 0xfd, 0x17, 0x67, 0x2b, 0x73, 0x27, 0xca, 0x2a, 0x4d, 0x11, 0x44, 0xe0, 0x43,
	0x5e, 0x8d, 0xcd, 0x94, 0x55, 0x32, 0x23, 0x78, 0x5b, 0xc5, 0xb1, 0x7a, 0x22, 0x34, 0xea, 0x1b,
	0x9f, 0xa1, 0xee, 0xf4, 0x40, 0xf7, 0x81, 0x11, 0xab, 0x0e, 0x02, 0x66, 0x8c, 0xb7, 0xc1, 0xae,
	0xa6, 0x81, 0xb6, 0x32, 0x88, 0xe3, 0x3e, 0xac, 0x89, 0xd5, 0x72, 0x2b, 0xb3, 0x22, 0xe2, 0x69,
	0x1c, 0x24, 0x06, 0x9e, 0x80, 0xf3, 0x45, 0xfe, 0x49, 0xb4, 0x74, 0xb9, 0xc0, 0x2e, 0x0f, 0xa0,
	0x0d, 0x40, 0x2e, 0x3b, 0xa0, 0xf7, 0x1e, 0x1b, 0xb8, 0x17, 0x4e, 0xa9, 0x2b, 0x8d, 0x55, 0x1d,
	0x1d, 0xf4, 0x8c, 0xff, 0x12, 0x1a, 0x79, 0xa5, 0x90, 0x3f, 0x30, 0xe2, 0x56, 0x21, 0xf5, 0x3e,
	0x64, 0x97, 0x86, 0x35, 0x7b, 0x59, 0x6c, 0x25, 0x0f, 0x55, 0xcc, 0x8d, 0x0d, 0xac, 0xf1, 0x4f,
	0xa1, 0xfa, 0xf9, 0xb2, 0xfa, 0x5d, 0x80, 0xd4, 0x55, 0xdc, 0x02, 0x80, 0xf7, 0x01, 0x3b, 0x8f,
	0x1b, 0x5a, 0xda, 0x3e, 0xcf, 0x51, 0x11, 0x37, 0x22, 0xd0, 0x61, 0xd7, 0x7f, 0x19, 0xb5, 0xa7,
	0x72, 0x40, 0xbe, 0x3b, 0xa2, 0x16, 0x8a, 0xbd, 0xcb, 0xec, 0x25, 0x13, 0xb4, 0x05, 0xcf, 0xd2,
	0x28, 0xb0, 0xc2, 0xf8, 0xa7, 0x11, 0x7e, 0x12, 0x9e, 0x3d, 0xa0, 0x47, 0xde, 0xd7, 0xd8, 0x05,
	0xd8, 0x9c, 0x42, 0xf3, 0x58, 0xa9, 0xed, 0x2c, 0x75, 0xae, 0xd0, 0x56, 0xb0, 0x11, 0x8d, 0x3f,
	0x01, 0x1a, 0xb5, 0x0b, 0x07, 0xfb, 0xd5, 0xa9, 0x06, 0xc2, 0xd6, 0x11, 0x85, 0x5e, 0xb1, 0xaa,
	0xf4, 0xea, 0x1d, 0xd3, 0x9c, 0x4a, 0xc7, 0x09, 0xb6, 0x0d, 0xf8, 0xd7, 0x53, 0xd9, 0x79, 0x1a,
	0x74, 0xd0, 0x26, 0x17, 0x09, 0xad, 0xfa, 0x19, 0x9c, 0xc4, 0x19, 0x12, 0x01, 0x7e, 0x85, 0x04,
	0xde, 0x12, 0xbb, 0xa4, 0xc5, 0x4e, 0x26, 0xb5, 0xe0, 0x62, 0x2f, 0x8d, 0x65, 0x28, 0x2d, 0x38,
	0x59, 0x2f, 0xd0, 0x7d, 0xbe, 0x2d, 0xfa, 0xc6, 0xf7, 0xe8, 0xcb, 0x3b, 0xd0, 0x8a, 0xc3, 0x34,
	0x08, 0x72, 0x47, 0xf4, 0x0d, 0x6c, 0x85, 0xb6, 0xd2, 0xa1, 0xe0, 0x10, 0x62, 0x52, 0x25, 0x13,
	0xcb, 0x35, 0x04, 0x2c, 0x6d, 0xfd, 0xb3, 0xa8, 0x7c, 0x0e, 0xc5, 0xad, 0x5c, 0xda, 0x24, 0xa1,
	0xf7, 0x1e, 0x3b, 0x1f, 0x80, 0x07, 0x41, 0xa0, 0x4a, 0x03, 0x2d, 0x78, 0x60, 0x60, 0xb1, 0xd1,
	0x61, 0xfc, 0x49, 0xd2, 0x44, 0x40, 0x83, 0xe4, 0x4b, 0x66, 0x23, 0xb5, 0xe0, 0x23, 0xf0, 0x92,
	0x56, 0xf4, 0xd2, 0x3c, 0xd0, 0xe5, 0x2f, 0x79, 0x8e, 0x5e, 0x12, 0x44, 0x14, 0xe9, 0xf2, 0x97,
	0xdc, 0x60, 0x57, 0x65, 0xcf, 0xbd, 0x5c, 0xa8, 0xe2, 0xac, 0x97, 0x70, 0xf4, 0x3f, 0xd8, 0xd7,
	0x32, 0xe9, 0x14, 0x06, 0x5e, 0x21, 0xdf, 0xcc, 0xb1, 0x75, 0x84, 0x36, 0x4a, 0xc8, 0xdc, 0xe0,
	0x23, 0xf6, 0x86, 0xda, 0x15, 0x5a, 0xcb, 0x28, 0x77, 0x2e, 0x2d, 0x3a, 0x10, 0x58, 0x9e, 0xaa,
	0x44, 0xf0, 0x50, 0x25, 0x6d, 0x39, 0xb0, 0xea, 0xa3, 0xd5, 0xab, 0xb9, 0x02, 0x7a, 0x5a, 0x13,
	0xe1, 0x8f, 0x55, 0x22, 0xea, 0x08, 0xce, 0x0d, 0xbf, 0xcf, 0xce, 0xc3, 0x4e, 0xc1, 0x65, 0x69,
	0x67, 0x71, 0x4c, 0xaf, 0xc8, 0x4d, 0x18, 0x24, 0xc6, 0x9f, 0x26, 0xaf, 0xcf, 0x01, 0xab, 0x59,
	0x1c, 0xe3, 0x7b, 0xb6, 0x40, 0xea, 0x7d, 0x89, 0x4d, 0x17, 0x2f, 0x69, 0x44, 0x2c, 0x42, 0x8b,
	0x0e, 0x45, 0x6e, 0xe8, 0x5f, 0x20, 0xa7, 0xcd, 0x11, 0x2d, 0x04, 0xac, 0x2a, 0x4d, 0x2e, 0xe9,
	0xcd, 0xb1, 0x09, 0x99, 0x18, 0xa1, 0x2d, 0x6f, 0x07, 0xc6, 0xf2, 0x34, 0xb0, 0x5d, 0xff, 0x22,
	0xaa, 0xbc, 0x4c, 0xcf, 0x57, 0x03, 0x63, 0x1b, 0x81, 0xed, 0x7a, 0xb7, 0xd8, 0xe5, 0x20, 0xb6,
	0x42, 0xe7, 0x0b, 0x69, 0xfb, 0xa9, 0xe0, 0x1d, 0x91, 0x08, 0x1d, 0xc4, 0xc5, 0x2b, 0x5f, 0x42,
	0xd5, 0x4b, 0x08, 0xa4, 0x55, 0xdc, 0xec, 0xa7, 0xe2, 0x23, 0x42, 0xe5, 0xef, 0x7a, 0x83, 0x79,
	0xa6, 0x9f, 0x84, 0x5d, 0xad, 0x12, 0x95, 0x19, 0x1e, 0xaa, 0x1e, 0x44, 0xc2, 0x19, 0xfa, 0x88,
	0x25, 0x49, 0x1d, 0x05, 0xde, 0x6b, 0xec, 0x34, 0x99, 0xe7, 0x46, 0xec, 0xe0, 0x8a, 0xf8, 0x55,
	0xc4, 0x9e, 0xa2, 0xc7, 0x2d, 0xb1, 0x03, 0x0b, 0xe1, 0x6d, 0xb2, 0xd7, 0x1d, 0x2e, 0x4b, 0xe4,
	0x4e, 0x26, 0xf8, 0x13, 0x69, 0xbb, 0x2a, 0xb3, 0x5c, 0x26, 0x91, 0xd8, 0x83, 0x8f, 0x63, 0xac,
	0x0e, 0x64, 0x62, 0x8d, 0x7f, 0x19, 0xf5, 0x5f, 0x25, 0xf8, 0x03, 0x44, 0x3f, 0x22, 0xf0, 0x1a,
	0x60, 0xeb, 0x03, 0xa8, 0xf7, 0x65, 0x76, 0xc1, 0xd8, 0x6c, 0x8b, 0x87, 0x81, 0x0d, 0x62, 0xd5,
	0x19, 0x75, 0xbd, 0x2b, 0x68, 0xc9, 0x07, 0x48, 0x9d, 0x10, 0xc3, 0x1e, 0x78, 0x9f, 0x5d, 0x13,
	0x7b, 0xa9, 0xd0, 0xb2, 0x27, 0x12, 0x1b, 0xc4, 0xf0, 0xb2, 0x29, 0x46, 0x47, 0xb7, 0x8a, 0x5a,
	0x3c, 0xd1, 0x12, 0xa2, 0xc5, 0xab, 0x98, 0xad, 0xaf, 0x94, 0xc1, 0x75, 0x87, 0xa5, 0x85, 0x6c,
	0x3a, 0x24, 0xc4, 0xa8, 0x7c, 0x3d, 0xac, 0x16, 0x41, 0x8f, 0x6b, 0x01, 0xdf, 0x16, 0xf3, 0x97,
	0x7f, 0x8d, 0x3e, 0xb7, 0x5b, 0x19, 0x94, 0x37, 0x07, 0x62, 0xca, 0x42, 0x26, 0x8b, 0xad, 0xe1,
	0x5b, 0x59, 0x1b, 0x02, 0x91, 0x91, 0x4f, 0x85, 0xff, 0x5a, 0x9e, 0x85, 0x50, 0x54, 0x43, 0x49,
	0x4b, 0x3e, 0x15, 0x10, 0x8b, 0x53, 0xad, 0xd2, 0xa0, 0x13, 0x58, 0xc8, 0xa9, 0x69, 0x66, 0x39,
	0x26, 0x2a, 0x99, 0x74, 0xfc, 0xd7, 0xc9, 0x2b, 0x0b, 0xf9, 0x1a, 0x88, 0x37, 0x9c, 0xd4, 0xfb,
	0x61, 0x85, 0x0d, 0xbd, 0x0c, 0xa6, 0x06, 0xb3, 0x13, 0xe3, 0x2e, 0xc7, 0xcd, 0xd7, 0x53, 0x91,
	0xf0, 0xe7, 0x30, 0x11, 0xaf, 0x1e, 0xec, 0x57, 0xab, 0x2b, 0x25, 0x34, 0x24, 0x87, 0xd6, 0xfd,
	0xf5, 0x86, 0xc3, 0xde, 0x55, 0x91, 0x78, 0xf6, 0xab, 0x21, 0xcd, 0xaa, 0x18, 0x01, 0x98, 0x9d,
	0xb8, 0x0c, 0xf0, 0x56, 0xd9, 0x29, 0x98, 0x07, 0x87, 0x89, 0xe0, 0xf8, 0x6f, 0xe0, 0xf8, 0x57,
	0x0e, 0xf6, 0xab, 0x27, 0x9d, 0x41, 0x37, 0xd6, 0x69, 0xf7, 0x73, 0x65, 0x4f, 0x84, 0x68, 0xfb,
	0x24, 0x28, 0xb6, 0x76, 0x62, 0xb4, 0xf3, 0x88, 0x9d, 0x37, 0x42, 0xcb, 0x20, 0xe6, 0x89, 0xd2,
	0xbd, 0x20, 0x96, 0x4f, 0x71, 0x7d, 0xc9, 0xe6, 0x75, 0xb4, 0x79, 0xe1, 0xd9, 0x7e, 0x75, 0xaa,
	0x85, 0xa0, 0x7b, 0x65, 0x0c, 0x1a, 0x9b, 0x32, 0xe3, 0x05, 0xde, 0x06, 0x9b, 0x4a, 0xc4, 0x13,
	0x6e, 0xc2, 0xae, 0xe8, 0x05, 0x3c, 0xec, 0x06, 0x49, 0x47, 0x68, 0x32, 0xfb, 0x26, 0x9a, 0xf5,
	0x9f, 0xed, 0x57, 0x27, 0xef, 0x89, 0x27, 0x2d, 0x44, 0xd4, 0x09, 0x80, 0x36, 0x27, 0x93, 0x31,
	0x4f, 0xbd, 0x6f, 0xb3, 0x97, 0x8d, 0xd8, 0xc9, 0x44, 0x12, 0x0a, 0x1e, 0x06, 0x61, 0x57, 0xf8,
	0x6f, 0xcd, 0x3e, 0x3f, 0x77, 0x72, 0x71, 0x79, 0xfe, 0x33, 0xa8, 0xe9, 0xfc, 0x38, 0x9a, 0x39,
	0xdf, 0x72, 0x76, 0xea, 0x60, 0x66, 0x25, 0xb1, 0xba, 0x4f, 0x0c, 0x6a, 0xe8, 0x79, 0xf3, 0x94,
	0x29, 0xff, 0xf4, 0xde, 0x64, 0x67, 0xd2, 0x38, 0x08, 0x05, 0x7c, 0x93, 0x62, 0xd7, 0xdc, 0x40,
	0xd7, 0x99, 0x28, 0x04, 0xf9, 0x6e, 0xe9, 0x33, 0x2f, 0x67, 0x6a, 0x99, 0x11, 0x9a, 0x23, 0xef,
	0xf5, 0xe7, 0x61, 0x6b, 0xd4, 0xee, 0x3c, 0xdb, 0xaf, 0x7e, 0xd4, 0x91, 0xb6, 0x9b, 0x6d, 0xcd,
	0x87, 0xaa, 0xb7, 0x50, 0x4c, 0x3f, 0xda, 0x1a, 0xfc, 0xbd, 0x90, 0x6e, 0x77, 0x16, 0x8c, 0x08,
	0x33, 0x60, 0x44, 0x0b, 0x60, 0x23, 0x09, 0x7a, 0x62, 0xbe, 0x75, 0x7f, 0xfd, 0x81, 0xfb, 0xbb,
	0x01, 0x26, 0x9b, 0x13, 0x6e, 0x18, 0x78, 0x8a, 0x4f, 0xbc, 0x05, 0x36, 0x89, 0xac, 0x49, 0x3d,
	0x31, 0x1c, 0x36, 0x9a, 0x15, 0x09, 0x8f, 0x55, 0xc7, 0x5f, 0xa0, 0xad, 0x61, 0xf7, 0x92, 0xa6,
	0x7a, 0x62, 0x1e, 0x91, 0x64, 0x5d, 0x75, 0xc6, 0x2a, 0x08, 0xad, 0xfd, 0xb7, 0xc7, 0x29, 0xac,
	0x68, 0xed, 0xbd, 0xc1, 0xce, 0x14, 0x0a, 0x48, 0xce, 0xc0, 0xfc, 0xe7, 0x11, 0xfd, 0xb2, 0x43,
	0x03, 0xa3, 0x02, 0xdb, 0x87, 0xa0, 0x60, 0x78, 0xf1, 0x10, 0x14, 0xac, 0x2e, 0xb2, 0x73, 0x41,
	0x66, 0x15, 0xd7, 0xa2, 0xab, 0x7a, 0xe5, 0x9c, 0x76, 0x13, 0xd7, 0xf8, 0x2c, 0x08, 0x9b, 0x4e,
	0x96, 0x2f, 0xf3, 0x65, 0xf6, 0x92, 0x34, 0xdc, 0x64, 0xa9, 0xd0, 0xb0, 0x44, 0xfe, 0x17, 0x88,
	0xa9, 0x48, 0xd3, 0xca, 0x1f, 0xc1, 0xdb, 0xc5, 0x81, 0xee, 0x08, 0x4a, 0x46, 0x10, 0x74, 0x71,
	0x36, 0xfe, 0x3b, 0xb3, 0x95, 0xb9, 0x4a, 0xf3, 0x0c, 0xca, 0x20, 0x0f, 0x41, 0xe4, 0x85, 0xe9,
	0x40, 0x9c, 0x94, 0xc9, 0xc7, 0x90, 0x7c, 0xb4, 0xb0, 0xba, 0x0f, 0x33, 0x56, 0x7a, 0x10, 0x27,
	0xdf, 0xa5, 0x38, 0x49, 0x90, 0x26, 0x20, 0x56, 0x10, 0x90, 0x4f, 0xe9, 0x3a, 0x3b, 0x93, 0xc0,
	0x48, 0x18, 0x5d, 0x44, 0xc4, 0xe3, 0xc0, 0x58, 0xff, 0x8b, 0xa8, 0x74, 0x1a, 0x04, 0x1b, 0xf4,
	0x7c, 0x3d, 0x30, 0x16, 0xca, 0x1d, 0xc7, 0x2a, 0x31, 0x98, 0xf0, 0x0e, 0x6c, 0x74, 0xff, 0x3d,
	0xf2, 0x29, 0x27, 0x81, 0x5d, 0xff, 0x11, 0x3c, 0xf7, 0xb6, 0xd9, 0xcb, 0x61, 0x66, 0xac, 0xea,
	0x21, 0xa1, 0x53, 0x89, 0xf1, 0xdf, 0xff, 0xdf, 0x6e, 0x80, 0x3a, 0xda, 0xd9, 0x20, 0x33, 0xb8,
	0x01, 0x9a, 0xa7, 0xc2, 0xf2, 0x33, 0xaf, 0xc6, 0x2e, 0x51, 0xb6, 0xd1, 0x02, 0xd2, 0x9a, 0x00,
	0x73, 0x20, 0x28, 0xd6, 0xe1, 0x03, 0x9c, 0xe5, 0x05, 0x04, 0x35, 0x87, 0x31, 0xf9, 0x52, 0xbc,
	0xce, 0x4e, 0x07, 0xbb, 0x4a, 0x46, 0x2e, 0x42, 0x43, 0xa8, 0xfd, 0x12, 0x65, 0x64, 0x7c, 0x5c,
	0xcb, 0x9f, 0xc2, 0xa7, 0x0f, 0xbb, 0x22, 0xdc, 0xe6, 0xed, 0x2c, 0xa1, 0x32, 0x67, 0x4b, 0x45,
	0x52, 0x18, 0xff, 0xff, 0xd2, 0xa7, 0x47, 0xe1, 0xaa, 0x93, 0xd5, 0x50, 0xe4, 0xad, 0xb0, 0xd9,
	0x50, 0x41, 0x00, 0x04, 0xea, 0x80, 0x19, 0x92, 0xe7, 0x15, 0x00, 0xd2, 0x64, 0xc8, 0x06, 0x5f,
	0xa6, 0x39, 0x02, 0x0e, 0x19, 0x06, 0xa4, 0xc6, 0x65, 0x02, 0x01, 0x51, 0x86, 0xbc, 0xd0, 0x18,
	0x2e, 0x1c, 0x76, 0x32, 0x47, 0x99, 0xdb, 0xdc, 0x08, 0xbd, 0x2b, 0x43, 0xe1, 0xff, 0xbf, 0xd9,
	0xca, 0xdc, 0xe7, 0x6a, 0x2f, 0x3d, 0xdb, 0xaf, 0x9e, 0xb8, 0xaf, 0x5a, 0xeb, 0x62, 0x57, 0xc4,
	0xe5, 0x32, 0xe2, 0x3e, 0x69, 0x6c, 0xb4, 0x5b, 0x84, 0x07, 0x87, 0x03, 0x0e, 0x68, 0xd2, 0x58,
	0xd2, 0xec, 0x5c, 0x81, 0xf4, 0x15, 0xb0, 0xd3, 0x3c, 0xa3, 0x52, 0xdb, 0x02, 0x11, 0x4c, 0xa8,
	0x28, 0x90, 0xf2, 0x34, 0x08, 0x5e, 0xeb, 0x88, 0x98, 0xf1, 0x3f, 0xa4, 0x6a, 0xc7, 0x65, 0x40,
	0x10, 0x11, 0xe7, 0x32, 0xde, 0x37, 0xd9, 0x8d, 0x82, 0xbc, 0x11, 0x95, 0xc9, 0x09, 0xaf, 0x23,
	0x71, 0x50, 0x7e, 0x96, 0x6c, 0xf9, 0x4b, 0x68, 0xea, 0xf5, 0x5c, 0x69, 0x09, 0x74, 0x1c, 0x01,
	0x26, 0x9b, 0x6b, 0x49, 0x69, 0x00, 0x4f, 0xb0, 0xb7, 0xdd, 0x8c, 0x0a, 0x3e, 0x56, 0xae, 0x41,
	0x81, 0x94, 0x6d, 0x05, 0x36, 0xec, 0x62, 0x31, 0x82, 0x71, 0xcf, 0xf8, 0x35, 0x1c, 0xe2, 0x4d,
	0xd2, 0x5b, 0x73, 0x6a, 0xa5, 0xea, 0x73, 0x55, 0xe9, 0x1a, 0xe8, 0xb4, 0x0a, 0x15, 0xef, 0x1b,
	0xec, 0x06, 0xa4, 0xb9, 0xd0, 0xf2, 0x20, 0x89, 0xb8, 0xec, 0x24, 0x4a, 0x0b, 0x9e, 0x28, 0xcb,
	0x77, 0xa5, 0x91, 0x30, 0x3a, 0x51, 0x0b, 0x03, 0xaf, 0x13, 0xaa, 0xb4, 0xef, 0xd7, 0x71, 0x8c,
	0xd7, 0x48, 0x69, 0x29, 0x89, 0xd6, 0x50, 0xe5, 0x9e, 0xb2, 0x0f, 0x49, 0x81, 0xf8, 0x85, 0x59,
	0x4b, 0xea, 0x2a, 0xed, 0x7b, 0x2b, 0xac, 0x8a, 0xcc, 0x36, 0x8d, 0x05, 0xe4, 0x1d, 0xd9, 0x76,
	0xdc, 0xc1, 0xc0, 0xd7, 0x45, 0xf6, 0xe3, 0x2f, 0xa3, 0xc1, 0x8b, 0x39, 0xec, 0x6e, 0x19, 0xb5,
	0xd1, 0x46, 0x02, 0xe4, 0x75, 0xd8, 0xa2, 0xe9, 0x22, 0xc7, 0x2f, 0x6a, 0x8a, 0x12, 0x05, 0xe3,
	0x2a, 0x19, 0x37, 0x65, 0x7f, 0x85, 0x96, 0x03, 0x34, 0x07, 0x95, 0xc6, 0x80, 0x8e, 0x6d, 0x24,
	0x87, 0x66, 0x0d, 0x85, 0x8c, 0x15, 0xc6, 0x42, 0xe8, 0x1b, 0x14, 0x7f, 0x3a, 0x48, 0x22, 0xd5,
	0xe3, 0x46, 0x88, 0xc8, 0x5f, 0xc5, 0xb8, 0x39, 0xed, 0x40, 0x45, 0x4f, 0xa3, 0x89, 0x90, 0x96,
	0x10, 0x91, 0xc7, 0xd9, 0x8d, 0x2c, 0x29, 0x26, 0x27, 0x22, 0x9e, 0x28, 0x58, 0xba, 0x5d, 0xdc,
	0x66, 0x8e, 0x3e, 0xa2, 0x4b, 0xe6, 0xbb, 0xf8, 0x23, 0x9c, 0xe6, 0xdc, 0x90, 0xd2, 0x3d, 0x95,
	0xd4, 0x9d, 0x0a, 0x92, 0x48, 0xf0, 0xd4, 0x7c, 0x4b, 0xdf, 0x65, 0xaf, 0x1e, 0x9e, 0x23, 0xee,
	0xc3, 0x54, 0x68, 0x9b, 0xe9, 0x2d, 0x22, 0x6f, 0xb7, 0x30, 0xb8, 0xce, 0x8e, 0xce, 0xb4, 0xae,
	0x8c, 0x6d, 0x94, 0x70, 0xde, 0x63, 0x76, 0xfd, 0xb0, 0xb9, 0x3c, 0x24, 0xea, 0x0c, 0xe2, 0xa2,
	0x56, 0x5b, 0xc1, 0x96, 0x84, 0x2d, 0xe6, 0xaf, 0xa1, 0xd5, 0xd7, 0x46, 0xad, 0xba, 0x7a, 0xbb,
	0x99, 0xc5, 0x90, 0x13, 0x73, 0x34, 0xd0, 0xfc, 0xe1, 0x1a, 0xba, 0xfc, 0x99, 0x70, 0x29, 0x84,
	0xf1, 0x6f, 0x13, 0xcd, 0x2f, 0xd7, 0xd1, 0x83, 0x0f, 0xb3, 0x46, 0x20, 0xef, 0x26, 0x7b, 0x05,
	0xdc, 0x6f, 0x50, 0x58, 0x14, 0xcb, 0x77, 0xc7, 0xc5, 0x27, 0x95, 0xf6, 0xf3, 0xf2, 0x22, 0x5f,
	0xa9, 0xaf, 0xb3, 0x37, 0xf3, 0x17, 0xe9, 0x2a, 0x60, 0x6a, 0xa9, 0x56, 0x90, 0x32, 0xdc, 0xf6,
	0xc4, 0xda, 0x16, 0x03, 0x03, 0xad, 0xd8, 0x3a, 0xb9, 0xb6, 0x53, 0xb9, 0x05, 0x1a, 0x8d, 0x42,
	0x61, 0x2d, 0x81, 0x82, 0x77, 0xbd, 0x40, 0x7b, 0x5f, 0x64, 0x3e, 0xcd, 0x48, 0xab, 0x1e, 0x0f,
	0xac, 0xea, 0xc9, 0xb0, 0x98, 0xd3, 0x5d, 0xaa, 0x3b, 0x71, 0x4e, 0x5a, 0xf5, 0x96, 0x50, 0x9a,
	0xcf, 0x6a, 0x9e, 0x9d, 0x15, 0x09, 0xd5, 0xba, 0x5d, 0xd5, 0x13, 0x79, 0x7c, 0xb8, 0x47, 0x25,
	0x8b, 0x13, 0xdd, 0x52, 0x3d, 0xe1, 0x22, 0xc1, 0xbb, 0x6c, 0x6a, 0x78, 0x11, 0xdb, 0x4a, 0x8b,
	0x30, 0x80, 0x34, 0xb5, 0x41, 0xe3, 0x94, 0x97, 0x6e, 0x35, 0x17, 0x42, 0x09, 0xb3, 0x1b, 0x68,
	0x49, 0x31, 0x24, 0x11, 0x79, 0x58, 0x2d, 0x35, 0x0b, 0x8a, 0xf9, 0x36, 0xa8, 0x84, 0xc9, 0xe1,
	0x6b, 0x05, 0x7a, 0xd0, 0x1a, 0xc8, 0x67, 0x5f, 0x63, 0x67, 0xcb, 0x71, 0x28, 0xef, 0x81, 0xdd,
	0x3f, 0xaa, 0x07, 0xe6, 0x95, 0xd0, 0x79, 0xdb, 0x6b, 0x91, 0x9d, 0x33, 0x7d, 0x63, 0x45, 0x8f,
	0xcb, 0x48, 0x24, 0x16, 0x66, 0x45, 0xe4, 0xac, 0x89, 0x75, 0xcb, 0x59, 0x12, 0xae, 0x39, 0x19,
	0x51, 0xaa, 0xc7, 0x6c, 0x3a, 0x12, 0x26, 0xd4, 0x32, 0xb5, 0x4a, 0xf3, 0xdd, 0x20, 0x96, 0x51,
	0x89, 0x25, 0xb7, 0xa8, 0xcf, 0xf8, 0x6c, 0xbf, 0xea, 0x2f, 0x17, 0xa8, 0x87, 0x05, 0x08, 0x29,
	0xad, 0x1f, 0x1d, 0x21, 0xf1, 0xee, 0xb1, 0xab, 0x43, 0xd5, 0x45, 0x37, 0x30, 0x5d, 0xde, 0xd1,
	0x6a, 0x74, 0x99, 0x36, 0x71, 0x99, 0x66, 0xcb, 0xd8, 0x5b, 0x81, 0xe9, 0x7e, 0x04, 0xc8, 0xf2,
	0x1a, 0xad, 0xb0, 0x2a, 0x15, 0xdf, 0x4a, 0x47, 0x32, 0xc1, 0x42, 0xcd, 0xd5, 0x67, 0x6d, 0xa1,
	0x81, 0xcd, 0x1a, 0xff, 0x01, 0x45, 0x3d, 0x84, 0x6d, 0x10, 0x2a, 0xaf, 0xcc, 0x72, 0x8c, 0xf7,
	0x90, 0xcd, 0x0d, 0x7f, 0x78, 0xd9, 0x4b, 0xb5, 0xda, 0x15, 0x11, 0x6c, 0xcf, 0x8f, 0xf3, 0x34,
	0x4d, 0xcd, 0xa8, 0x87, 0xae, 0x3d, 0x50, 0xf2, 0x84, 0x35, 0x87, 0x5e, 0x1e, 0x80, 0xa9, 0x2f,
	0x25, 0xd9, 0xcd, 0x61, 0xbb, 0xb8, 0x07, 0x8a, 0x5a, 0x0c, 0x73, 0x0b, 0x55, 0x83, 0xf0, 0x8b,
	0xd6, 0x61, 0xab, 0xef, 0x7f, 0x15, 0x87, 0x78, 0xab, 0x3c, 0x04, 0x6e, 0x87, 0xbc, 0x4a, 0x5b,
	0x55, 0xba, 0x95, 0x6b, 0xe1, 0x92, 0xd4, 0xfa, 0xde, 0xfb, 0xec, 0xfc, 0x60, 0x93, 0x00, 0x97,
	0x93, 0xa5, 0x72, 0xf7, 0x6b, 0x54, 0xf3, 0xe5, 0xbb, 0xa4, 0x49, 0xe2, 0x7c, 0x11, 0x1f, 0xb2,
	0xb9, 0x48, 0x84, 0x71, 0xa0, 0x05, 0x0f, 0x33, 0x6d, 0x70, 0x4e, 0x2e, 0x6d, 0xe5, 0x5e, 0x57,
	0x58, 0x7a, 0x4c, 0x6f, 0xef, 0xf0, 0x75, 0x84, 0x17, 0x49, 0xce, 0x79, 0x5d, 0x6e, 0xb7, 0xcb,
	0x16, 0x8f, 0x58, 0x55, 0xa2, 0x0b, 0xe5, 0xb5, 0x85, 0x95, 0xc0, 0xae, 0x9a, 0xff, 0xf5, 0xc3,
	0x2f, 0x9f, 0xaf, 0x2f, 0x52, 0x89, 0xd2, 0x22, 0xaf, 0x2a, 0x6a, 0xbd, 0x7a, 0x1b, 0xec, 0xda,
	0x38, 0x16, 0x8b, 0xe9, 0xa0, 0x07, 0x2b, 0x9e, 0x4f, 0xff, 0xff, 0x93, 0x5f, 0x1d, 0xe2, 0xb3,
	0x1b, 0x09, 0x75, 0x2d, 0xf2, 0xa9, 0x7f, 0x8d, 0x5d, 0x1f, 0x13, 0x39, 0x46, 0xba, 0xac, 0x85,
	0xd5, 0x6f, 0xa0, 0xd5, 0x6b, 0x87, 0x02, 0xca, 0x50, 0xc7, 0xb5, 0xe4, 0xb2, 0x83, 0x55, 0x09,
	0xe2, 0x27, 0x41, 0xdf, 0x8c, 0xb6, 0x4b, 0xbf, 0x49, 0x2e, 0x5b, 0xc0, 0x96, 0x10, 0x35, 0xdc,
	0x34, 0xbd, 0xcd, 0xae, 0x38, 0xd6, 0x12, 0x6a, 0x01, 0x65, 0x3e, 0x7a, 0x27, 0xcf, 0x0c, 0x16,
	0x13, 0x7b, 0x56, 0x8b, 0x9e, 0x30, 0x3e, 0x47, 0x4b, 0x33, 0x84, 0xac, 0x23, 0x10, 0x3d, 0xf3,
	0x01, 0xc0, 0x56, 0x1c, 0xca, 0xfb, 0x98, 0xdd, 0xa4, 0x5d, 0xa4, 0x15, 0xb0, 0x07, 0xd1, 0xdb,
	0x12, 0xda, 0x74, 0x65, 0x6a, 0xb8, 0x55, 0xae, 0x98, 0xe5, 0x51, 0x86, 0x1e, 0x5b, 0x8a, 0x31,
	0xfe, 0xb7, 0xd0, 0xf8, 0x0d, 0x54, 0x6d, 0xaa, 0x58, 0xdc, 0x1d, 0x28, 0x6e, 0x2a, 0x2a, 0x66,
	0x97, 0x51, 0xab, 0x44, 0x8c, 0xbc, 0x3a, 0x9b, 0x71, 0xfd, 0xc3, 0xa8, 0x44, 0xa8, 0xa8, 0xc6,
	0x25, 0x1e, 0x1b, 0x60, 0xe2, 0xbf, 0x90, 0xa3, 0x06, 0x14, 0x0a, 0x2b, 0x53, 0xe4, 0xb1, 0x65,
	0xb2, 0x03, 0x76, 0x77, 0x05, 0x4f, 0x95, 0xb6, 0x41, 0x3c, 0xf8, 0x26, 0xd1, 0x30, 0xd9, 0x59,
	0x42, 0x54, 0x83, 0x40, 0xf9, 0xa7, 0x78, 0x8f, 0xf9, 0x59, 0xb2, 0xa5, 0xb2, 0x24, 0x12, 0x11,
	0x4f, 0x03, 0x1d, 0xc4, 0xb1, 0x88, 0x5d, 0xf3, 0x4e, 0xd0, 0x96, 0x29, 0xe4, 0x0d, 0x27, 0xa6,
	0xe6, 0x5d, 0x9b, 0xbd, 0x3d, 0xf8, 0x88, 0x94, 0xf1, 0x80, 0x55, 0x68, 0x2d, 0xe2, 0xc0, 0x8a,
	0x88, 0x17, 0x39, 0xc0, 0x64, 0x5b, 0x3b, 0x99, 0x80, 0xdd, 0xe6, 0xb7, 0x47, 0x1c, 0x1b, 0xd3,
	0xde, 0x83, 0x92, 0xd6, 0x8a, 0x53, 0x6a, 0x15, 0x3a, 0xf0, 0xa2, 0x87, 0x29, 0x83, 0x73, 0xf5,
	0x34, 0x48, 0x64, 0x68, 0xfc, 0x0e, 0xbd, 0xe8, 0x28, 0x4f, 0x58, 0x43, 0x50, 0x03, 0x31, 0xde,
	0x2e, 0x7b, 0xff, 0x88, 0x9d, 0x38, 0xda, 0xd8, 0x6a, 0x4b, 0x60, 0xcb, 0x86, 0x43, 0xa0, 0xd9,
	0xa5, 0x64, 0xdd, 0xc5, 0x01, 0x6e, 0x8e, 0xdb, 0x90, 0xc3, 0xad, 0xae, 0x55, 0xd2, 0x5d, 0x2e,
	0x54, 0xa1, 0xba, 0x2c, 0xd7, 0x1b, 0xd2, 0xa8, 0x98, 0x52, 0x49, 0x0c, 0x85, 0x85, 0x2f, 0xf1,
	0x4b, 0xfb, 0x83, 0xf2, 0x62, 0x2d, 0x07, 0x60, 0xe1, 0xe1, 0x3d, 0x62, 0x13, 0xa5, 0x26, 0x19,
	0xe5, 0x9f, 0x8f, 0x67, 0x2b, 0x73, 0x2f, 0x2f, 0xbe, 0xf5, 0x99, 0x55, 0x60, 0xa9, 0x75, 0x86,
	0xf9, 0xe8, 0xb4, 0x1e, 0x7e, 0x00, 0x09, 0xfb, 0x88, 0xf5, 0xa0, 0x2c, 0x04, 0x61, 0x3a, 0xa1,
	0xb7, 0xdf, 0xa6, 0x84, 0x3d, 0xee, 0xed, 0x31, 0x11, 0x0d, 0xa0, 0x9e, 0x2d, 0xb5, 0xad, 0xdb,
	0xdb, 0x3c, 0x56, 0xe1, 0x76, 0x11, 0xe4, 0xb1, 0x6f, 0x24, 0x9f, 0x22, 0x0f, 0x8f, 0xf1, 0xbc,
	0xe0, 0xea, 0xc1, 0x7e, 0x75, 0x36, 0x2f, 0x1d, 0x56, 0xef, 0xac, 0x13, 0x1a, 0x42, 0x7b, 0x09,
	0xdb, 0x9c, 0xcd, 0x2d, 0xae, 0x6e, 0x8f, 0x47, 0x78, 0x1f, 0xb1, 0xd9, 0x28, 0xd3, 0x18, 0x09,
	0x8e, 0x1c, 0xb1, 0x47, 0xc4, 0xcf, 0xe1, 0x8e, 0x30, 0xb4, 0xc2, 0xaa, 0xa6, 0x8b, 0xfb, 0xf2,
	0x48, 0x3b, 0x29, 0xf9, 0x1a, 0xc1, 0x8e, 0x30, 0x53, 0x63, 0x33, 0xbd, 0x60, 0xaf, 0x48, 0x41,
	0x60, 0x03, 0x7b, 0x21, 0x14, 0x89, 0xad, 0x88, 0xfc, 0x04, 0x6b, 0xc3, 0xe9, 0x5e, 0xb0, 0xe7,
	0x12, 0xd1, 0xaa, 0xc2, 0x10, 0x59, 0xcf, 0x11, 0xde, 0x2d, 0x36, 0x69, 0xac, 0x96, 0xa1, 0xe5,
	0x51, 0x14, 0x3b, 0xca, 0x07, 0x9c, 0x58, 0xe1, 0xca, 0xbd, 0x72, 0xb0, 0x5f, 0xf5, 0x5a, 0x28,
	0x5f, 0x5e, 0x5e, 0x5f, 0xca, 0xa5, 0x4d, 0x8f, 0x74, 0x96, 0xa3, 0xb8, 0x78, 0xe6, 0x7d, 0x85,
	0x5d, 0xcc, 0x12, 0x3c, 0xdf, 0x31, 0xc2, 0x5a, 0xaa, 0x0b, 0xac, 0xd0, 0xf0, 0x86, 0x50, 0xdb,
	0xf8, 0x3b, 0xc8, 0x83, 0xce, 0x13, 0xa6, 0x45, 0x90, 0xb5, 0x1c, 0x71, 0x47, 0xf4, 0xbd, 0xfb,
	0xec, 0xb5, 0x91, 0x14, 0x0e, 0xaa, 0x2a, 0x3d, 0xbc, 0x38, 0x9a, 0x4e, 0x23, 0x86, 0xb2, 0xb6,
	0x0a, 0xb7, 0x37, 0xd2, 0xd1, 0x15, 0x5a, 0x67, 0xaf, 0x0e, 0x9b, 0x04, 0x77, 0x92, 0x10, 0x83,
	0x06, 0xc4, 0x40, 0xee, 0xf9, 0x06, 0xed, 0x55, 0xcb, 0xf6, 0x1a, 0x0e, 0x58, 0x10, 0x01, 0xb9,
	0xe7, 0x2d, 0xb3, 0x99, 0x9c, 0x7a, 0x53, 0xa8, 0x6e, 0x0b, 0x11, 0x0d, 0x35, 0x97, 0x2d, 0x7d,
	0x35, 0x87, 0xaa, 0x17, 0xa0, 0x72, 0x87, 0xf9, 0x36, 0xbb, 0x80, 0xf4, 0xe1, 0x88, 0xb6, 0x40,
	0x36, 0xa6, 0x2d, 0x30, 0x05, 0x0a, 0xe3, 0x7a, 0x02, 0x4b, 0xec, 0x12, 0xda, 0xc2, 0xc6, 0x37,
	0x4f, 0x65, 0x2a, 0x62, 0x39, 0x74, 0x6e, 0xb3, 0x4b, 0x67, 0x54, 0x00, 0x7a, 0x04, 0x98, 0x46,
	0x01, 0x29, 0x1d, 0x73, 0x0d, 0x96, 0xa8, 0x27, 0x74, 0x47, 0xb8, 0x33, 0xb7, 0xdc, 0xc4, 0x13,
	0x32, 0x51, 0x80, 0xee, 0x02, 0x06, 0xc9, 0x40, 0x6e, 0xe2, 0x03, 0x86, 0x03, 0xf0, 0x24, 0x1b,
	0xf0, 0xa1, 0x54, 0xb8, 0x5a, 0xde, 0xdf, 0x43, 0x1f, 0x44, 0x46, 0x74, 0x2f, 0xcb, 0x09, 0x51,
	0x43, 0x50, 0xd5, 0xee, 0xdd, 0xa1, 0xee, 0x9c, 0x23, 0x0f, 0x5b, 0x02, 0xea, 0x00, 0x70, 0x45,
	0xbf, 0x8f, 0x0e, 0x38, 0x75, 0xb0, 0x5f, 0x3d, 0xbb, 0x94, 0x59, 0x45, 0x1e, 0x5b, 0x43, 0xf9,
	0xf2, 0xf2, 0x3a, 0xb5, 0xed, 0xc2, 0xf2, 0xc3, 0x28, 0xf6, 0xde, 0x61, 0x53, 0x61, 0xac, 0x4c,
	0x4e, 0xae, 0x0c, 0x0f, 0x6c, 0x7e, 0x78, 0xf2, 0x14, 0xdf, 0x62, 0x12, 0xc5, 0xc4, 0xa5, 0xcc,
	0x92, 0x75, 0xe7, 0x27, 0x1b, 0x6c, 0x2a, 0x8d, 0xd3, 0x8e, 0xd9, 0x89, 0xd1, 0x47, 0xdc, 0x7e,
	0x90, 0x89, 0x55, 0xfe, 0xaf, 0xe1, 0x2c, 0xfc, 0x83, 0xfd, 0xea, 0x64, 0x63, 0x3d, 0xed, 0x50,
	0x9b, 0x94, 0x36, 0xc4, 0x5a, 0x62, 0x55, 0x73, 0xd2, 0x29, 0x0e, 0x3d, 0x85, 0x1a, 0x6d, 0xd8,
	0xed, 0x76, 0xa5, 0xb6, 0xd9, 0x98, 0xc3, 0x0d, 0xe2, 0xb9, 0xbf, 0x4e, 0x35, 0x5a, 0xd9, 0xfd,
	0x1e, 0x92, 0xc2, 0x70, 0xd4, 0x27, 0xa6, 0xfb, 0x2d, 0x76, 0x63, 0xd8, 0xb8, 0xd5, 0x12, 0x88,
	0x0a, 0x37, 0xb2, 0x27, 0xe3, 0x40, 0x97, 0x4e, 0x66, 0xc9, 0x29, 0x7f, 0x03, 0xcd, 0xbf, 0x51,
	0x36, 0xbf, 0x49, 0x2a, 0xad, 0x42, 0x63, 0xa3, 0xa4, 0xe0, 0xf5, 0xd8, 0x3b, 0x47, 0x73, 0x74,
	0x2b, 0x93, 0x10, 0xbb, 0x13, 0x44, 0xb0, 0xbb, 0x32, 0xb1, 0x58, 0xa8, 0xcb, 0xa4, 0xe3, 0x7f,
	0x1b, 0x47, 0x9a, 0x3f, 0x82, 0xb0, 0xa3, 0xe6, 0x06, 0x95, 0x9b, 0xb7, 0x64, 0x62, 0xeb, 0xa4,
	0xe5, 0xa9, 0x23, 0x87, 0x1b, 0xf3, 0x66, 0x74, 0x7e, 0x27, 0x77, 0x21, 0x46, 0xfd, 0x26, 0x0e,
	0xf7, 0xf6, 0xb8, 0xe1, 0x0e, 0xbd, 0x60, 0x6b, 0xa0, 0xe7, 0x3d, 0x66, 0xd7, 0x8f, 0x18, 0xb0,
	0x7c, 0x40, 0x9c, 0xbf, 0xd4, 0x6f, 0x55, 0x88, 0x73, 0x8e, 0x1b, 0xe6, 0x71, 0x71, 0x6a, 0x9c,
	0xbf, 0x4c, 0xc6, 0xde, 0x3b, 0xc2, 0x76, 0x71, 0xd4, 0x8e, 0x1f, 0x7e, 0x30, 0x1d, 0x0e, 0x74,
	0xa2, 0x17, 0x58, 0xe1, 0xff, 0x36, 0x8d, 0xb4, 0x38, 0x6e, 0xa4, 0xfc, 0x14, 0x1e, 0xdc, 0x60,
	0xa0, 0xbb, 0xe2, 0x54, 0xbd, 0x27, 0x65, 0xda, 0x81, 0x1a, 0xae, 0xc5, 0x46, 0xf9, 0x1c, 0xdb,
	0x98, 0x47, 0x38, 0xa1, 0xf1, 0x7f, 0xa7, 0x32, 0xc2, 0x3b, 0x20, 0xf8, 0xb9, 0x5e, 0x1b, 0xea,
	0x3f, 0x92, 0xb6, 0x3b, 0xd6, 0x23, 0x8d, 0xd7, 0x60, 0xd7, 0x4a, 0x03, 0x67, 0xa6, 0xcb, 0x55,
	0xbb, 0x6d, 0x04, 0x6d, 0x1f, 0xd7, 0x19, 0x82, 0xe5, 0xf4, 0xbf, 0x43, 0x83, 0xcc, 0x0e, 0x06,
	0xc9, 0x4c, 0x77, 0x03, 0xb1, 0xb0, 0x67, 0xb0, 0x27, 0x02, 0x0b, 0xe9, 0xb5, 0xd8, 0x69, 0x6c,
	0x5a, 0x13, 0x4f, 0x45, 0x26, 0xf2, 0xdd, 0x0a, 0x52, 0x91, 0xeb, 0x9f, 0x49, 0x45, 0x1a, 0x71,
	0x90, 0x20, 0x6f, 0x45, 0x22, 0x72, 0x2a, 0x2d, 0xff, 0xf4, 0x1e, 0x8c, 0xd2, 0x90, 0x54, 0xc5,
	0xfd, 0x9e, 0xd2, 0x69, 0x57, 0x86, 0xc8, 0x47, 0x7b, 0xc2, 0x0a, 0x8d, 0xc9, 0xe0, 0xf7, 0x2a,
	0x87, 0x79, 0x48, 0x63, 0x80, 0x6e, 0xe4, 0x60, 0xc8, 0x08, 0x7d, 0xf6, 0x9a, 0xd2, 0xb2, 0x23,
	0x13, 0x2e, 0x23, 0x4c, 0x53, 0xb1, 0xea, 0xc8, 0x30, 0x88, 0xf1, 0x86, 0xd3, 0x50, 0x66, 0xf8,
	0x7d, 0xb0, 0x7a, 0xaa, 0x76, 0xed, 0x60, 0xbf, 0x7a, 0x79, 0x03, 0x55, 0xd6, 0x96, 0x57, 0x95,
	0x5e, 0x27, 0xfc, 0x72, 0x60, 0x83, 0x52, 0x8e, 0x68, 0x5e, 0x26, 0xab, 0x6b, 0xd1, 0x91, 0x10,
	0xef, 0x1b, 0xec, 0xad, 0x5f, 0x5d, 0x95, 0xf0, 0x2d, 0xa5, 0x62, 0x2e, 0x92, 0xac, 0xe7, 0x7f,
	0xaf, 0xe2, 0x9a, 0x9c, 0x9f, 0x59, 0xa0, 0xd4, 0x94, 0x8a, 0x57, 0x92, 0xac, 0x77, 0x78, 0xc1,
	0x30, 0x35, 0x44, 0xdc, 0xdd, 0x4e, 0xc1, 0xd1, 0x60, 0x4b, 0x87, 0xc6, 0xff, 0x83, 0x31, 0x0b,
	0x86, 0x49, 0x22, 0x6a, 0x10, 0xb8, 0x55, 0x60, 0xbd, 0xbb, 0xa3, 0x09, 0x39, 0x54, 0x49, 0x84,
	0x77, 0x08, 0x82, 0xd8, 0xb1, 0x7b, 0xf8, 0x06, 0x9f, 0x54, 0x0e, 0x67, 0xe4, 0xfa, 0x00, 0x89,
	0x7c, 0x1e, 0xd6, 0x3f, 0x64, 0x0b, 0x23, 0xde, 0x47, 0x51, 0x09, 0x9d, 0xcf, 0x35, 0xc6, 0x1c,
	0xd1, 0x86, 0x22, 0x28, 0x0c, 0x12, 0xff, 0x0f, 0x2b, 0x23, 0xe1, 0x10, 0xfc, 0x10, 0x63, 0x12,
	0xb8, 0xa1, 0xeb, 0x8d, 0xad, 0x3a, 0x15, 0x3c, 0x36, 0xff, 0x6e, 0x85, 0xdd, 0x70, 0x5f, 0xb9,
	0xb8, 0x70, 0xf6, 0xd9, 0x1f, 0xfb, 0x8f, 0x60, 0x8c, 0x93, 0x8b, 0x97, 0x4a, 0xfe, 0x9a, 0x59,
	0x19, 0xcf, 0x77, 0xe3, 0x70, 0x7e, 0x33, 0x37, 0x51, 0x3b, 0xfe, 0xb3, 0xfd, 0xea, 0xb1, 0xe6,
	0x1c, 0x99, 0x2e, 0x1e, 0x1f, 0xfd, 0xc5, 0x43, 0x36, 0xb3, 0xd5, 0x4f, 0x03, 0x63, 0x78, 0x1a,
	0x12, 0xd3, 0x13, 0xba, 0x38, 0x75, 0x0f, 0x94, 0xb1, 0xfe, 0x1f, 0xe3, 0xbb, 0xd5, 0x66, 0x0e,
	0xf6, 0xab, 0xd3, 0x35, 0x84, 0x36, 0xea, 0xcd, 0x26, 0x02, 0xdd, 0xd9, 0xfb, 0xd2, 0x46, 0x6b,
	0xb3, 0x39, 0x4d, 0x66, 0x1a, 0xa1, 0x1e, 0x96, 0x29, 0x63, 0xbd, 0x47, 0x6c, 0xce, 0xb1, 0x38,
	0xaa, 0x53, 0x21, 0x04, 0x77, 0xa0, 0x4c, 0xc1, 0x4e, 0x77, 0x1f, 0x9c, 0x2b, 0xbf, 0x0e, 0xe7,
	0xff, 0x09, 0x2d, 0xe5, 0x55, 0x52, 0x58, 0x02, 0xfc, 0xa6, 0x83, 0xdf, 0xcd, 0xd1, 0xf9, 0xe5,
	0x37, 0x6f, 0x83, 0x5d, 0xcd, 0xc9, 0xd3, 0xae, 0x08, 0x79, 0x96, 0x40, 0x5c, 0x12, 0x41, 0x07,
	0xdf, 0x21, 0x09, 0x45, 0x4c, 0xe5, 0x88, 0xff, 0x7d, 0x17, 0x27, 0x1c, 0xf8, 0xa1, 0x08, 0x1f,
	0x00, 0x74, 0x05, 0x90, 0xf5, 0x12, 0xd0, 0xbb, 0xc9, 0xce, 0x69, 0x01, 0x89, 0x1e, 0x6f, 0x14,
	0x8a, 0xd4, 0xba, 0x8f, 0xef, 0xff, 0xa0, 0x82, 0xc5, 0xce, 0xd9, 0x42, 0xba, 0x0c, 0x42, 0x3a,
	0x13, 0xd9, 0x64, 0xaf, 0x0f, 0x6e, 0x60, 0x15, 0x6d, 0x20, 0xae, 0xd5, 0x13, 0x1e, 0xaa, 0x2c,
	0xb1, 0xdc, 0x76, 0xb5, 0x30, 0x5d, 0x15, 0x47, 0xfe, 0x9f, 0x82, 0x99, 0xe3, 0xcd, 0x2b, 0x03,
	0xbc, 0x6b, 0x00, 0x35, 0xd5, 0x93, 0x3a, 0x60, 0x37, 0x73, 0x28, 0x78, 0x75, 0xc9, 0xaa, 0x51,
	0xda, 0x8e, 0xb5, 0xf8, 0x67, 0x64, 0xb1, 0x3a, 0xc0, 0xb6, 0x94, 0xb6, 0xbf, 0xd2, 0x9c, 0x3b,
	0x5a, 0x3c, 0x64, 0xee, 0x87, 0x87, 0xcd, 0xd1, 0x59, 0xe3, 0x88, 0xb9, 0x0f, 0xd9, 0x45, 0xd7,
	0xfc, 0x28, 0x59, 0x2d, 0x4e, 0x2d, 0x8d, 0xff, 0xe7, 0xb4, 0xe2, 0xe7, 0x09, 0x34, 0xb8, 0x75,
	0x96, 0x9f, 0x5e, 0x9a, 0x91, 0x09, 0x61, 0x76, 0x1c, 0x37, 0xa1, 0xbf, 0x38, 0x34, 0x21, 0x08,
	0xe8, 0x87, 0x27, 0x74, 0x93, 0x9d, 0x8b, 0x45, 0x27, 0x08, 0xfb, 0x7c, 0x37, 0xd0, 0x61, 0x37,
	0xd0, 0xdc, 0xf6, 0x53, 0x48, 0xb5, 0x7f, 0x49, 0x33, 0x39, 0x4b, 0xd2, 0x87, 0x24, 0xdc, 0x44,
	0x19, 0x50, 0x79, 0x3a, 0xf4, 0x1b, 0xbd, 0xfc, 0xc3, 0x65, 0xc2, 0x7b, 0x19, 0x35, 0xb0, 0x8d,
	0xff, 0x57, 0x64, 0x62, 0x06, 0xb1, 0xc3, 0xf7, 0x80, 0xd6, 0x92, 0xbb, 0x39, 0xcc, 0x6b, 0xb1,
	0xd7, 0xf2, 0x9d, 0x13, 0xc9, 0x8e, 0x30, 0x16, 0x02, 0x5a, 0x2c, 0x12, 0x61, 0x0c, 0xa7, 0x23,
	0xc3, 0x9c, 0xfe, 0xfe, 0x88, 0x0c, 0x5e, 0x71, 0xf0, 0x65, 0x44, 0xb7, 0x72, 0x70, 0x1d, 0xb0,
	0x39, 0x0f, 0x6e, 0xb0, 0xab, 0xe5, 0x24, 0x8c, 0xd7, 0xd8, 0xf2, 0x9e, 0x47, 0x18, 0x50, 0x43,
	0x14, 0x78, 0xcb, 0xdf, 0x54, 0x46, 0xea, 0x17, 0xba, 0xcb, 0x56, 0x23, 0x68, 0x7d, 0x80, 0x1c,
	0x6e, 0x93, 0xf7, 0xca, 0xcb, 0xee, 0xff, 0x6d, 0x05, 0x4f, 0x2d, 0x26, 0x07, 0xbc, 0x7c, 0xb0,
	0xd4, 0xde, 0x17, 0xd9, 0x14, 0x9d, 0x8d, 0x8a, 0x88, 0x6a, 0x83, 0x01, 0x9d, 0xff, 0x3b, 0x1a,
	0xfc, 0x5c, 0x2e, 0xc7, 0xb2, 0xa0, 0xa0, 0xf2, 0x43, 0x05, 0x13, 0x2d, 0x04, 0x5d, 0x6a, 0x19,
	0x1e, 0xfc, 0x53, 0x1a, 0x7c, 0xa6, 0xc0, 0xe2, 0x3a, 0xe0, 0xfd, 0x96, 0xf2, 0x34, 0x02, 0x36,
	0x5f, 0x5a, 0x10, 0x48, 0xea, 0x43, 0xb7, 0xfa, 0x90, 0x95, 0x68, 0xb1, 0x2b, 0xb4, 0xc9, 0x2f,
	0x72, 0xfd, 0x3d, 0xcd, 0x6e, 0xd0, 0x23, 0x86, 0xac, 0x5e, 0xba, 0xcb, 0x07, 0x4c, 0xa4, 0x49,
	0x1a, 0xe4, 0x9a, 0xf7, 0xd9, 0x35, 0x2d, 0x3a, 0xd2, 0x40, 0xf6, 0x8e, 0xf1, 0xec, 0xf0, 0x49,
	0x80, 0x77, 0xd9, 0x12, 0x2b, 0x12, 0xe4, 0x3e, 0x62, 0x17, 0xcf, 0x11, 0xff, 0xc1, 0x2d, 0x7a,
	0x8e, 0x5e, 0x07, 0xf0, 0xa3, 0x40, 0xda, 0x7a, 0x01, 0x5d, 0x41, 0xa4, 0x17, 0xb1, 0x2a, 0x66,
	0xa6, 0x34, 0xb3, 0x86, 0x8e, 0xe1, 0x92, 0xfc, 0xc2, 0x54, 0x7e, 0xbc, 0xf3, 0x8f, 0xa5, 0x40,
	0x0b, 0xa9, 0xa9, 0x91, 0x59, 0xb3, 0x91, 0xdc, 0x53, 0x09, 0x5d, 0x95, 0x72, 0x07, 0x3c, 0xcd,
	0xe9, 0xcc, 0x88, 0x7a, 0x3a, 0x56, 0xe6, 0xb5, 0xd9, 0xe7, 0x47, 0x3f, 0x51, 0x5e, 0xf3, 0x62,
	0x0f, 0x6a, 0xec, 0xb8, 0xff, 0x44, 0x2f, 0x71, 0x7d, 0xf8, 0xe3, 0xb9, 0xf2, 0x57, 0x26, 0x9d,
	0x31, 0xe3, 0x7c, 0x93, 0xbd, 0x35, 0xa6, 0xaa, 0x16, 0xb1, 0xc4, 0xb8, 0x59, 0xf4, 0xf6, 0xda,
	0x41, 0x4f, 0xc6, 0x52, 0x18, 0xff, 0x9f, 0x2b, 0xee, 0x4c, 0x77, 0xa4, 0xb8, 0x5e, 0x21, 0x8d,
	0xbb, 0x4e, 0x61, 0xd5, 0xe1, 0xbd, 0x5a, 0xb9, 0x7e, 0x74, 0x8c, 0xa4, 0x3c, 0x84, 0xff, 0xe3,
	0xca, 0x48, 0x01, 0x49, 0xbe, 0x56, 0xb2, 0xe9, 0xdd, 0x2b, 0x6f, 0x1c, 0x98, 0x63, 0x24, 0x62,
	0x61, 0x05, 0xd7, 0xd8, 0x0f, 0x1d, 0xdc, 0xbb, 0xfb, 0xc9, 0x18, 0x5a, 0xb0, 0x8c, 0xd0, 0x26,
	0x20, 0x8b, 0x9b, 0x78, 0x92, 0x2d, 0x52, 0xf6, 0x72, 0xd4, 0xc8, 0x25, 0xb1, 0xc1, 0x35, 0x00,
	0xf4, 0xbc, 0x40, 0x77, 0x76, 0xcb, 0xc7, 0x17, 0xff, 0x42, 0xd6, 0xdf, 0x42, 0x55, 0x22, 0x48,
	0x2e, 0x9d, 0xe5, 0x57, 0x04, 0xc0, 0xfb, 0x96, 0x74, 0x67, 0xb7, 0x74, 0x9e, 0x51, 0x63, 0x33,
	0xd4, 0x57, 0x10, 0x7c, 0xf1, 0x1d, 0xbe, 0xc8, 0xf1, 0xb8, 0x29, 0x92, 0x21, 0xdf, 0xca, 0x64,
	0x6c, 0x65, 0x62, 0xfc, 0x7f, 0x73, 0xe1, 0x35, 0x33, 0xa2, 0xa1, 0xc5, 0xe2, 0x3b, 0x8b, 0x0f,
	0x1d, 0xa4, 0xe6, 0x10, 0xb0, 0xcb, 0x77, 0x45, 0x68, 0xb1, 0xcb, 0x01, 0x31, 0x8f, 0x6f, 0x09,
	0x2c, 0x7a, 0x9e, 0x0a, 0xff, 0xa7, 0x15, 0xac, 0x9e, 0x27, 0x49, 0x4e, 0xf7, 0x68, 0x6b, 0x02,
	0x0a, 0x9b, 0xa7, 0xc2, 0x8b, 0xd8, 0xc2, 0xe0, 0xee, 0x59, 0x10, 0xf5, 0x24, 0x5d, 0x0c, 0xea,
	0x12, 0x33, 0xb0, 0x8a, 0xc7, 0x22, 0x68, 0x97, 0xfb, 0xc8, 0xc6, 0xff, 0x77, 0xe7, 0x40, 0x85,
	0xde, 0x52, 0xae, 0x76, 0x0b, 0xb5, 0x36, 0xd5, 0xba, 0x08, 0xda, 0xa5, 0x2e, 0xb2, 0xf1, 0x9a,
	0xa3, 0x6d, 0x19, 0xb1, 0x27, 0x8d, 0x35, 0x8e, 0x56, 0x39, 0xd2, 0xa6, 0xb3, 0x58, 0xf8, 0xff,
	0x51, 0x39, 0xdc, 0x97, 0x59, 0x41, 0x30, 0xf1, 0x29, 0xa4, 0x6d, 0xcd, 0x2c, 0x16, 0xd3, 0x3b,
	0xcc, 0x3b, 0x7c, 0x57, 0xca, 0x9b, 0x60, 0xcf, 0x6f, 0x8b, 0x3e, 0x5e, 0xcb, 0x3f, 0xd5, 0x84,
	0x3f, 0xbd, 0x15, 0xf6, 0xb9, 0xdd, 0x20, 0xce, 0x04, 0xde, 0xb9, 0x3f, 0xb9, 0xb8, 0xf0, 0x99,
	0x05, 0xc0, 0x61, 0x8b, 0x4d, 0xd2, 0xfe, 0xe0, 0xb9, 0xf7, 0x2a, 0xd3, 0x1f, 0x32, 0xef, 0xf0,
	0xed, 0x94, 0xf2, 0x90, 0x2f, 0xd2, 0x90, 0x93, 0xe5, 0x21, 0x5f, 0x2c, 0x59, 0xb8, 0x7d, 0xfc,
	0xc4, 0xd4, 0x84, 0x7f, 0xfb, 0xf8, 0x89, 0xf3, 0x13, 0xd3, 0xb7, 0x8f, 0x9f, 0x98, 0x9d, 0xb8,
	0x7c, 0xfb, 0xf8, 0x89, 0xab, 0x13, 0xd7, 0x6e, 0x1f, 0x3f, 0xb1, 0x35, 0x11, 0xde, 0x3e, 0x7e,
	0x22, 0x9c, 0x88, 0x6e, 0xbf, 0x70, 0xe2, 0x77, 0x2b, 0x13, 0xdf, 0xa9, 0xdc, 0x7e, 0xe1, 0xc4,
	0x5f, 0x57, 0x26, 0x7e, 0x54, 0xb9, 0xf2, 0x69, 0x65, 0xec, 0x9b, 0x5e, 0x63, 0x2f, 0x63, 0x79,
	0x13, 0x71, 0x08, 0x65, 0xb0, 0x4b, 0xe8, 0xa5, 0x4f, 0xd1, 0xd3, 0x87, 0xf4, 0xd0, 0x7b, 0x95,
	0x9d, 0x0a, 0x33, 0xad, 0x45, 0x62, 0xf9, 0x60, 0x4e, 0xcf, 0x37, 0x5f, 0x72, 0x0f, 0x1f, 0xc2,
	0x33, 0xef, 0x22, 0x7b, 0x51, 0x26, 0xa1, 0xc6, 0xc6, 0x3d, 0xfd, 0x37, 0x41, 0x73, 0xf0, 0xc0,
	0xbb, 0xc4, 0x58, 0x92, 0xf5, 0x48, 0xdd, 0xd0, 0xff, 0x0a, 0x34, 0x5f, 0x4c, 0xb2, 0x1e, 0xea,
	0x9a, 0xeb, 0x3d, 0x76, 0x7a, 0xa4, 0x85, 0xeb, 0x5d, 0x62, 0xe7, 0x9b, 0x2b, 0x8d, 0xf5, 0xb5,
	0xfa, 0xd2, 0xe6, 0xda, 0xc6, 0x3d, 0x7e, 0x77, 0x63, 0x79, 0x85, 0x2f, 0xaf, 0xb5, 0x96, 0x6a,
	0xeb, 0x2b, 0xcb, 0x13, 0xc7, 0xbc, 0x8b, 0xcc, 0x3f, 0x24, 0x5e, 0xb9, 0x47, 0xd2, 0xca, 0x78,
	0xe5, 0xa5, 0xcd, 0xa5, 0xda, 0x52, 0x6b, 0x65, 0xe2, 0xb9, 0xeb, 0xff, 0x5a, 0x61, 0xa7, 0x86,
	0xea, 0x34, 0xef, 0x26, 0x3b, 0x43, 0x87, 0x3f, 0xee, 0x0a, 0x12, 0x64, 0x89, 0x89, 0x63, 0xd3,
	0x17, 0x3f, 0xf9, 0x74, 0xd6, 0x1f, 0x42, 0xae, 0x02, 0x8a, 0xbe, 0xa0, 0xf7, 0x0e, 0xf3, 0x48,
	0x09, 0x6f, 0xd7, 0x42, 0x05, 0x07, 0x5a, 0x95, 0xe9, 0x4b, 0x9f, 0x7c, 0x3a, 0x7b, 0xfe, 0xb0,
	0xd6, 0x47, 0x84, 0xf2, 0xaa, 0xec, 0x78, 0x90, 0x59, 0x35, 0xf1, 0xdc, 0xf4, 0xb9, 0x4f, 0x3e,
	0x9d, 0x3d, 0x33, 0x04, 0x5c, 0xca, 0xac, 0x9a, 0x3e, 0xf1, 0xbd, 0x1f, 0xcf, 0x1c, 0xfb, 0xe9,
	0x4f, 0x66, 0x8e, 0xd5, 0xbe, 0xfa, 0xb3, 0xff, 0x9a, 0x39, 0xf6, 0xb3, 0x83, 0x99, 0xca, 0xcf,
	0x0f, 0x66, 0x2a, 0xbf, 0x38, 0x98, 0xa9, 0xfc, 0xe7, 0xc1, 0x4c, 0xe5, 0x07, 0xbf, 0x9c, 0x39,
	0xf6, 0xf3, 0x5f, 0xce, 0x1c, 0xfb, 0xc5, 0x2f, 0x67, 0x8e, 0x3d, 0x7e, 0xf7, 0x7f, 0x76, 0xd3,
	0x6e, 0xf4, 0xdf, 0x61, 0xb6, 0x5e, 0xc0, 0x53, 0xe1, 0x9b, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xf6, 0x1b, 0x81, 0xb8, 0x2a, 0x33, 0x00, 0x00,
}

func (m *LocalOnlySessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalOnlySessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalOnlySessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptimizerUseExistsFilterHoistRule {
		i--
		if m.OptimizerUseExistsFilterHoistRule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd0
	}
	if m.PropagateAdmissionHeaderToLeafTransactions {
		i--
		if m.PropagateAdmissionHeaderToLeafTransactions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc8
	}
	if m.VectorSearchBeamSize != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.VectorSearchBeamSize))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc0
	}
	if m.UsePre_25_2VariadicBuiltins {
		i--
		if m.UsePre_25_2VariadicBuiltins {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb8
	}
	if m.AllowCreateTriggerFunctionWithArgvReferences {
		i--
		if m.AllowCreateTriggerFunctionWithArgvReferences {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa8
	}
	if m.OptimizerUseDeleteRangeFastPath {
		i--
		if m.OptimizerUseDeleteRangeFastPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa0
	}
	if m.OptimizerEnableLockElision {
		i--
		if m.OptimizerEnableLockElision {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x98
	}
	if m.OptimizerUseLockElisionMultipleFamilies {
		i--
		if m.OptimizerUseLockElisionMultipleFamilies {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x90
	}
	if m.BufferedWritesUseLockingOnNonUniqueIndexes {
		i--
		if m.BufferedWritesUseLockingOnNonUniqueIndexes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x88
	}
	if m.UseCPutsOnNonUniqueIndexes {
		i--
		if m.UseCPutsOnNonUniqueIndexes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x80
	}
	if m.RegisterLatchWaitContentionEvents {
		i--
		if m.RegisterLatchWaitContentionEvents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf8
	}
	if m.OptimizerPlanLookupJoinsWithReverseScans {
		i--
		if m.OptimizerPlanLookupJoinsWithReverseScans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf0
	}
	if m.OptimizerCheckInputMinRowCount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OptimizerCheckInputMinRowCount))))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe9
	}
	if m.BufferedWritesEnabled {
		i--
		if m.BufferedWritesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe0
	}
	if m.OptimizerMinRowCount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OptimizerMinRowCount))))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd9
	}
	if m.OptimizerPreferBoundedCardinality {
		i--
		if m.OptimizerPreferBoundedCardinality {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd0
	}
	if m.CatalogDigestStalenessCheckEnabled {
		i--
		if m.CatalogDigestStalenessCheckEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc8
	}
	if m.AvoidFullTableScansInMutations {
		i--
		if m.AvoidFullTableScansInMutations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb8
	}
	if m.LegacyVarcharTyping {
		i--
		if m.LegacyVarcharTyping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb0
	}
	if m.DistributeJoinRowCountThreshold != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistributeJoinRowCountThreshold))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa8
	}
	if m.AlwaysDistributeFullScans {
		i--
		if m.AlwaysDistributeFullScans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa0
	}
	if m.DistributeScanRowCountThreshold != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistributeScanRowCountThreshold))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x98
	}
	if m.DistributeSortRowCountThreshold != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistributeSortRowCountThreshold))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x90
	}
	if m.DistributeGroupByRowCountThreshold != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistributeGroupByRowCountThreshold))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x88
	}
	if m.RecursionDepthLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.RecursionDepthLimit))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x80
	}
	if m.DisableVecUnionEagerCancellation {
		i--
		if m.DisableVecUnionEagerCancellation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xf8
	}
	if m.UnsafeAllowTriggersModifyingCascades {
		i--
		if m.UnsafeAllowTriggersModifyingCascades {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xf0
	}
	if m.BypassPCRReaderCatalogAOST {
		i--
		if m.BypassPCRReaderCatalogAOST {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xe8
	}
	{
		size, err := m.OriginTimestampForLogicalDataReplication.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x8
	i--
	dAtA[i] = 0xe2
	if m.OptimizerPushLimitIntoProjectFilteredScan {
		i--
		if m.OptimizerPushLimitIntoProjectFilteredScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xd8
	}
	if m.OptimizerUseConditionalHoistFix {
		i--
		if m.OptimizerUseConditionalHoistFix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xd0
	}
	if m.OptimizerUseMergedPartialStatistics {
		i--
		if m.OptimizerUseMergedPartialStatistics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc8
	}
	if m.EnableCreateStatsUsingExtremesBoolEnum {
		i--
		if m.EnableCreateStatsUsingExtremesBoolEnum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc0
	}
	if m.OriginIDForLogicalDataReplication != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.OriginIDForLogicalDataReplication))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb8
	}
	if m.OptimizerUsePolymorphicParameterFix {
		i--
		if m.OptimizerUsePolymorphicParameterFix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb0
	}
	if m.PlanCacheMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.PlanCacheMode))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa8
	}
	if m.OptimizerPushOffsetIntoIndexJoin {
		i--
		if m.OptimizerPushOffsetIntoIndexJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa0
	}
	if m.OptimizerProveImplicationWithVirtualComputedColumns {
		i--
		if m.OptimizerProveImplicationWithVirtualComputedColumns {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x90
	}
	if m.OptimizerUseImprovedMultiColumnSelectivityEstimate {
		i--
		if m.OptimizerUseImprovedMultiColumnSelectivityEstimate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x88
	}
	if m.OptimizerUseImprovedZigzagJoinCosting {
		i--
		if m.OptimizerUseImprovedZigzagJoinCosting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x80
	}
	if m.OptimizerUseImprovedTrigramSimilaritySelectivity {
		i--
		if m.OptimizerUseImprovedTrigramSimilaritySelectivity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xf8
	}
	if m.OptimizerUseImprovedDistinctOnLimitHintCosting {
		i--
		if m.OptimizerUseImprovedDistinctOnLimitHintCosting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xf0
	}
	if m.OptimizerUseTrigramSimilarityOptimization {
		i--
		if m.OptimizerUseTrigramSimilarityOptimization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xe8
	}
	if m.OptimizerUseVirtualComputedColumnStats {
		i--
		if m.OptimizerUseVirtualComputedColumnStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xe0
	}
	if m.PLpgSQLUseStrictInto {
		i--
		if m.PLpgSQLUseStrictInto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd8
	}
	if m.CloseCursorsAtCommit {
		i--
		if m.CloseCursorsAtCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd0
	}
	if m.AutoCommitBeforeDDL {
		i--
		if m.AutoCommitBeforeDDL {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc8
	}
	if m.CopyNumRetriesPerBatch != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CopyNumRetriesPerBatch))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc0
	}
	if m.OptimizerMergeJoinsEnabled {
		i--
		if m.OptimizerMergeJoinsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb8
	}
	if m.CopyWritePipeliningEnabled {
		i--
		if m.CopyWritePipeliningEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb0
	}
	if m.CopyTxnQualityOfService != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CopyTxnQualityOfService))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa8
	}
	if m.DisableChangefeedReplication {
		i--
		if m.DisableChangefeedReplication {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa0
	}
	if m.OptimizerUseProvidedOrderingFix {
		i--
		if m.OptimizerUseProvidedOrderingFix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x98
	}
	if m.OptimizerUseLockOpForSerializable {
		i--
		if m.OptimizerUseLockOpForSerializable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x90
	}
	if len(m.UnsafeSettingInterlockKey) > 0 {
		i -= len(m.UnsafeSettingInterlockKey)
		copy(dAtA[i:], m.UnsafeSettingInterlockKey)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.UnsafeSettingInterlockKey)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	if m.SharedLockingForSerializable {
		i--
		if m.SharedLockingForSerializable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x80
	}
	if m.StrictDDLAtomicity {
		i--
		if m.StrictDDLAtomicity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf8
	}
	if m.MaxRetriesForReadCommitted != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.MaxRetriesForReadCommitted))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf0
	}
	if m.DurableLockingForSerializable {
		i--
		if m.DurableLockingForSerializable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe8
	}
	if m.ImplicitFKLockingForSerializable {
		i--
		if m.ImplicitFKLockingForSerializable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe0
	}
	if m.OptimizerUseImprovedJoinElimination {
		i--
		if m.OptimizerUseImprovedJoinElimination {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if m.ReplicationMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ReplicationMode))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.DefaultTxnIsolationLevel != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DefaultTxnIsolationLevel))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if m.OptimizerUseImprovedComputedColumnFiltersDerivation {
		i--
		if m.OptimizerUseImprovedComputedColumnFiltersDerivation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.TestingOptimizerInjectPanics {
		i--
		if m.TestingOptimizerInjectPanics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.OptimizerHoistUncorrelatedEqualitySubqueries {
		i--
		if m.OptimizerHoistUncorrelatedEqualitySubqueries {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.UnboundedParallelScans {
		i--
		if m.UnboundedParallelScans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.MultipleActivePortalsEnabled {
		i--
		if m.MultipleActivePortalsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.PreparedStatementsCacheSize != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.PreparedStatementsCacheSize))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x88
	}
	if m.AllowRoleMembershipsToChangeDuringTransaction {
		i--
		if m.AllowRoleMembershipsToChangeDuringTransaction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x80
	}
	if m.EnableCreateStatsUsingExtremes {
		i--
		if m.EnableCreateStatsUsingExtremes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf8
	}
	if m.OptimizerAlwaysUseHistograms {
		i--
		if m.OptimizerAlwaysUseHistograms {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf0
	}
	if m.EnforceHomeRegionFollowerReadsEnabled {
		i--
		if m.EnforceHomeRegionFollowerReadsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe8
	}
	if m.InjectRetryErrorsOnCommitEnabled {
		i--
		if m.InjectRetryErrorsOnCommitEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe0
	}
	if m.OptimizerUseImprovedSplitDisjunctionForJoins {
		i--
		if m.OptimizerUseImprovedSplitDisjunctionForJoins {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd8
	}
	if m.DeclareCursorStatementTimeoutEnabled {
		i--
		if m.DeclareCursorStatementTimeoutEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	if m.CopyFromRetriesEnabled {
		i--
		if m.CopyFromRetriesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc8
	}
	if m.OptimizerUseLimitOrderingForStreamingGroupBy {
		i--
		if m.OptimizerUseLimitOrderingForStreamingGroupBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc0
	}
	if m.OptimizerUseImprovedDisjunctionStats {
		i--
		if m.OptimizerUseImprovedDisjunctionStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb0
	}
	if m.AllowOrdinalColumnReferences {
		i--
		if m.AllowOrdinalColumnReferences {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa8
	}
	if m.ExperimentalHashGroupJoinEnabled {
		i--
		if m.ExperimentalHashGroupJoinEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa0
	}
	if m.DescriptorValidationMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DescriptorValidationMode))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x98
	}
	if len(m.SystemIdentityProto) > 0 {
		i -= len(m.SystemIdentityProto)
		copy(dAtA[i:], m.SystemIdentityProto)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.SystemIdentityProto)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x92
	}
	if m.TransactionTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TransactionTimeout))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x88
	}
	if m.VariableInequalityLookupJoinEnabled {
		i--
		if m.VariableInequalityLookupJoinEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x80
	}
	if m.OptimizerUseForecasts {
		i--
		if m.OptimizerUseForecasts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf8
	}
	if m.EnforceHomeRegion {
		i--
		if m.EnforceHomeRegion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf0
	}
	if m.CopyFromAtomicEnabled {
		i--
		if m.CopyFromAtomicEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe8
	}
	if m.DisableHoistProjectionInJoinLimitation {
		i--
		if m.DisableHoistProjectionInJoinLimitation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe0
	}
	if m.CopyFastPathEnabled {
		i--
		if m.CopyFastPathEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd8
	}
	if m.OptimizerUseNotVisibleIndexes {
		i--
		if m.OptimizerUseNotVisibleIndexes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd0
	}
	if m.TestingOptimizerDisableRuleProbability != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TestingOptimizerDisableRuleProbability))))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc9
	}
	if m.TestingOptimizerCostPerturbation != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TestingOptimizerCostPerturbation))))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc1
	}
	if m.UnconstrainedNonCoveringIndexScanEnabled {
		i--
		if m.UnconstrainedNonCoveringIndexScanEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if m.TestingOptimizerRandomSeed != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TestingOptimizerRandomSeed))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.ShowPrimaryKeyConstraintOnNotVisibleColumns {
		i--
		if m.ShowPrimaryKeyConstraintOnNotVisibleColumns {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.MultipleModificationsOfTable {
		i--
		if m.MultipleModificationsOfTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.ExpectAndIgnoreNotVisibleColumnsInCopy {
		i--
		if m.ExpectAndIgnoreNotVisibleColumnsInCopy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.EnableImplicitTransactionForBatchStatements {
		i--
		if m.EnableImplicitTransactionForBatchStatements {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.OverrideAlterPrimaryRegionInSuperRegion {
		i--
		if m.OverrideAlterPrimaryRegionInSuperRegion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.EnableSuperRegions {
		i--
		if m.EnableSuperRegions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.OptSplitScanLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.OptSplitScanLimit))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.DefaultTxnQualityOfService != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DefaultTxnQualityOfService))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.CostScansWithDefaultColSize {
		i--
		if m.CostScansWithDefaultColSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.CheckFunctionBodies {
		i--
		if m.CheckFunctionBodies {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.AvoidBuffering {
		i--
		if m.AvoidBuffering {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.IndexRecommendationsEnabled {
		i--
		if m.IndexRecommendationsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if len(m.CustomOptions) > 0 {
		keysForCustomOptions := make([]string, 0, len(m.CustomOptions))
		for k := range m.CustomOptions {
			keysForCustomOptions = append(keysForCustomOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForCustomOptions)
		for iNdEx := len(keysForCustomOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomOptions[string(keysForCustomOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForCustomOptions[iNdEx])
			copy(dAtA[i:], keysForCustomOptions[iNdEx])
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(keysForCustomOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xca
		}
	}
	if m.DisablePlanGists {
		i--
		if m.DisablePlanGists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.NullOrderedLast {
		i--
		if m.NullOrderedLast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.InjectRetryErrorsEnabled {
		i--
		if m.InjectRetryErrorsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.LargeFullScanRows != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LargeFullScanRows))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa9
	}
	if m.IsSuperuser {
		i--
		if m.IsSuperuser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.AutoRehomingEnabled {
		i--
		if m.AutoRehomingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.TxnRowsReadErr != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TxnRowsReadErr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.TxnRowsReadLog != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TxnRowsReadLog))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.TxnRowsWrittenErr != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TxnRowsWrittenErr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.TxnRowsWrittenLog != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.TxnRowsWrittenLog))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if len(m.SessionUserProto) > 0 {
		i -= len(m.SessionUserProto)
		copy(dAtA[i:], m.SessionUserProto)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.SessionUserProto)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PlacementEnabled {
		i--
		if m.PlacementEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if len(m.SequenceCache) > 0 {
		keysForSequenceCache := make([]uint32, 0, len(m.SequenceCache))
		for k := range m.SequenceCache {
			keysForSequenceCache = append(keysForSequenceCache, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForSequenceCache)
		for iNdEx := len(keysForSequenceCache) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SequenceCache[uint32(keysForSequenceCache[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(keysForSequenceCache[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.NewSchemaChangerMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NewSchemaChangerMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.SerialNormalizationMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.SerialNormalizationMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.DistSQLMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistSQLMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.ExperimentalDistSQLPlanningMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ExperimentalDistSQLPlanningMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.PropagateInputOrdering {
		i--
		if m.PropagateInputOrdering {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.ResultsBufferSize != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ResultsBufferSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.EnableStreamReplication {
		i--
		if m.EnableStreamReplication {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.ExperimentalComputedColumnRewrites) > 0 {
		i -= len(m.ExperimentalComputedColumnRewrites)
		copy(dAtA[i:], m.ExperimentalComputedColumnRewrites)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.ExperimentalComputedColumnRewrites)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.StubCatalogTablesEnabled {
		i--
		if m.StubCatalogTablesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.EnableUniqueWithoutIndexConstraints {
		i--
		if m.EnableUniqueWithoutIndexConstraints {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.EnableSeqScan {
		i--
		if m.EnableSeqScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.SynchronousCommit {
		i--
		if m.SynchronousCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.AlterColumnTypeGeneralEnabled {
		i--
		if m.AlterColumnTypeGeneralEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.InsertFastPath {
		i--
		if m.InsertFastPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.ImplicitSelectForUpdate {
		i--
		if m.ImplicitSelectForUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.DisallowFullTableScans {
		i--
		if m.DisallowFullTableScans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.OverrideMultiRegionZoneConfigEnabled {
		i--
		if m.OverrideMultiRegionZoneConfigEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.ImplicitColumnPartitioningEnabled {
		i--
		if m.ImplicitColumnPartitioningEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TempTablesEnabled {
		i--
		if m.TempTablesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AllowPrepareAsOptPlan {
		i--
		if m.AllowPrepareAsOptPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ForceSavepointRestart {
		i--
		if m.ForceSavepointRestart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.RequireExplicitPrimaryKeys {
		i--
		if m.RequireExplicitPrimaryKeys {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ZigzagJoinEnabled {
		i--
		if m.ZigzagJoinEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PreferLookupJoinsForFKs {
		i--
		if m.PreferLookupJoinsForFKs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SafeUpdates {
		i--
		if m.SafeUpdates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.LocalityOptimizedSearch {
		i--
		if m.LocalityOptimizedSearch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.OptimizerUseMultiColStats {
		i--
		if m.OptimizerUseMultiColStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.OptimizerUseHistograms {
		i--
		if m.OptimizerUseHistograms {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.PartiallyDistributedPlansDisabled {
		i--
		if m.PartiallyDistributedPlansDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.DefaultTxnUseFollowerReads {
		i--
		if m.DefaultTxnUseFollowerReads {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DefaultTxnReadOnly {
		i--
		if m.DefaultTxnReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DefaultTxnPriority != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DefaultTxnPriority))
		i--
		dAtA[i] = 0x40
	}
	if m.ReorderJoinsLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ReorderJoinsLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.NoticeDisplaySeverity != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NoticeDisplaySeverity))
		i--
		dAtA[i] = 0x30
	}
	if m.IdleInTransactionSessionTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.IdleInTransactionSessionTimeout))
		i--
		dAtA[i] = 0x28
	}
	if m.IdleInSessionTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.IdleInSessionTimeout))
		i--
		dAtA[i] = 0x20
	}
	if m.StmtTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.StmtTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.OptimizerFKCascadesLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.OptimizerFKCascadesLimit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SaveTablesPrefix) > 0 {
		i -= len(m.SaveTablesPrefix)
		copy(dAtA[i:], m.SaveTablesPrefix)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.SaveTablesPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SequenceCacheEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceCacheEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceCacheEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumValues != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NumValues))
		i--
		dAtA[i] = 0x20
	}
	if m.Increment != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.Increment))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentValue != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CurrentValue))
		i--
		dAtA[i] = 0x10
	}
	if m.CachedVersion != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CachedVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocalOnlySessionData(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalOnlySessionData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalOnlySessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SaveTablesPrefix)
	if l > 0 {
		n += 1 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.OptimizerFKCascadesLimit != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.OptimizerFKCascadesLimit))
	}
	if m.StmtTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.StmtTimeout))
	}
	if m.IdleInSessionTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.IdleInSessionTimeout))
	}
	if m.IdleInTransactionSessionTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.IdleInTransactionSessionTimeout))
	}
	if m.NoticeDisplaySeverity != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.NoticeDisplaySeverity))
	}
	if m.ReorderJoinsLimit != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.ReorderJoinsLimit))
	}
	if m.DefaultTxnPriority != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.DefaultTxnPriority))
	}
	if m.DefaultTxnReadOnly {
		n += 2
	}
	if m.DefaultTxnUseFollowerReads {
		n += 2
	}
	if m.PartiallyDistributedPlansDisabled {
		n += 2
	}
	if m.OptimizerUseHistograms {
		n += 2
	}
	if m.OptimizerUseMultiColStats {
		n += 2
	}
	if m.LocalityOptimizedSearch {
		n += 2
	}
	if m.SafeUpdates {
		n += 2
	}
	if m.PreferLookupJoinsForFKs {
		n += 3
	}
	if m.ZigzagJoinEnabled {
		n += 3
	}
	if m.RequireExplicitPrimaryKeys {
		n += 3
	}
	if m.ForceSavepointRestart {
		n += 3
	}
	if m.AllowPrepareAsOptPlan {
		n += 3
	}
	if m.TempTablesEnabled {
		n += 3
	}
	if m.ImplicitColumnPartitioningEnabled {
		n += 3
	}
	if m.OverrideMultiRegionZoneConfigEnabled {
		n += 3
	}
	if m.DisallowFullTableScans {
		n += 3
	}
	if m.ImplicitSelectForUpdate {
		n += 3
	}
	if m.InsertFastPath {
		n += 3
	}
	if m.AlterColumnTypeGeneralEnabled {
		n += 3
	}
	if m.SynchronousCommit {
		n += 3
	}
	if m.EnableSeqScan {
		n += 3
	}
	if m.EnableUniqueWithoutIndexConstraints {
		n += 3
	}
	if m.StubCatalogTablesEnabled {
		n += 3
	}
	l = len(m.ExperimentalComputedColumnRewrites)
	if l > 0 {
		n += 2 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.EnableStreamReplication {
		n += 3
	}
	if m.ResultsBufferSize != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.ResultsBufferSize))
	}
	if m.PropagateInputOrdering {
		n += 3
	}
	if m.ExperimentalDistSQLPlanningMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.ExperimentalDistSQLPlanningMode))
	}
	if m.DistSQLMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistSQLMode))
	}
	if m.SerialNormalizationMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.SerialNormalizationMode))
	}
	if m.NewSchemaChangerMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.NewSchemaChangerMode))
	}
	if len(m.SequenceCache) > 0 {
		for k, v := range m.SequenceCache {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLocalOnlySessionData(uint64(l))
			}
			mapEntrySize := 1 + sovLocalOnlySessionData(uint64(k)) + l
			n += mapEntrySize + 2 + sovLocalOnlySessionData(uint64(mapEntrySize))
		}
	}
	if m.PlacementEnabled {
		n += 3
	}
	l = len(m.SessionUserProto)
	if l > 0 {
		n += 2 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.TxnRowsWrittenLog != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TxnRowsWrittenLog))
	}
	if m.TxnRowsWrittenErr != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TxnRowsWrittenErr))
	}
	if m.TxnRowsReadLog != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TxnRowsReadLog))
	}
	if m.TxnRowsReadErr != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TxnRowsReadErr))
	}
	if m.AutoRehomingEnabled {
		n += 3
	}
	if m.IsSuperuser {
		n += 3
	}
	if m.LargeFullScanRows != 0 {
		n += 10
	}
	if m.InjectRetryErrorsEnabled {
		n += 3
	}
	if m.NullOrderedLast {
		n += 3
	}
	if m.DisablePlanGists {
		n += 3
	}
	if len(m.CustomOptions) > 0 {
		for k, v := range m.CustomOptions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLocalOnlySessionData(uint64(len(k))) + 1 + len(v) + sovLocalOnlySessionData(uint64(len(v)))
			n += mapEntrySize + 2 + sovLocalOnlySessionData(uint64(mapEntrySize))
		}
	}
	if m.IndexRecommendationsEnabled {
		n += 3
	}
	if m.AvoidBuffering {
		n += 3
	}
	if m.CheckFunctionBodies {
		n += 3
	}
	if m.CostScansWithDefaultColSize {
		n += 3
	}
	if m.DefaultTxnQualityOfService != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DefaultTxnQualityOfService))
	}
	if m.OptSplitScanLimit != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.OptSplitScanLimit))
	}
	if m.EnableSuperRegions {
		n += 3
	}
	if m.OverrideAlterPrimaryRegionInSuperRegion {
		n += 3
	}
	if m.EnableImplicitTransactionForBatchStatements {
		n += 3
	}
	if m.ExpectAndIgnoreNotVisibleColumnsInCopy {
		n += 3
	}
	if m.MultipleModificationsOfTable {
		n += 3
	}
	if m.ShowPrimaryKeyConstraintOnNotVisibleColumns {
		n += 3
	}
	if m.TestingOptimizerRandomSeed != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TestingOptimizerRandomSeed))
	}
	if m.UnconstrainedNonCoveringIndexScanEnabled {
		n += 3
	}
	if m.TestingOptimizerCostPerturbation != 0 {
		n += 10
	}
	if m.TestingOptimizerDisableRuleProbability != 0 {
		n += 10
	}
	if m.OptimizerUseNotVisibleIndexes {
		n += 3
	}
	if m.CopyFastPathEnabled {
		n += 3
	}
	if m.DisableHoistProjectionInJoinLimitation {
		n += 3
	}
	if m.CopyFromAtomicEnabled {
		n += 3
	}
	if m.EnforceHomeRegion {
		n += 3
	}
	if m.OptimizerUseForecasts {
		n += 3
	}
	if m.VariableInequalityLookupJoinEnabled {
		n += 3
	}
	if m.TransactionTimeout != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.TransactionTimeout))
	}
	l = len(m.SystemIdentityProto)
	if l > 0 {
		n += 2 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.DescriptorValidationMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DescriptorValidationMode))
	}
	if m.ExperimentalHashGroupJoinEnabled {
		n += 3
	}
	if m.AllowOrdinalColumnReferences {
		n += 3
	}
	if m.OptimizerUseImprovedDisjunctionStats {
		n += 3
	}
	if m.OptimizerUseLimitOrderingForStreamingGroupBy {
		n += 3
	}
	if m.CopyFromRetriesEnabled {
		n += 3
	}
	if m.DeclareCursorStatementTimeoutEnabled {
		n += 3
	}
	if m.OptimizerUseImprovedSplitDisjunctionForJoins {
		n += 3
	}
	if m.InjectRetryErrorsOnCommitEnabled {
		n += 3
	}
	if m.EnforceHomeRegionFollowerReadsEnabled {
		n += 3
	}
	if m.OptimizerAlwaysUseHistograms {
		n += 3
	}
	if m.EnableCreateStatsUsingExtremes {
		n += 3
	}
	if m.AllowRoleMembershipsToChangeDuringTransaction {
		n += 3
	}
	if m.PreparedStatementsCacheSize != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.PreparedStatementsCacheSize))
	}
	if m.MultipleActivePortalsEnabled {
		n += 3
	}
	if m.UnboundedParallelScans {
		n += 3
	}
	if m.OptimizerHoistUncorrelatedEqualitySubqueries {
		n += 3
	}
	if m.TestingOptimizerInjectPanics {
		n += 3
	}
	if m.OptimizerUseImprovedComputedColumnFiltersDerivation {
		n += 3
	}
	if m.DefaultTxnIsolationLevel != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DefaultTxnIsolationLevel))
	}
	if m.ReplicationMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.ReplicationMode))
	}
	if m.OptimizerUseImprovedJoinElimination {
		n += 3
	}
	if m.ImplicitFKLockingForSerializable {
		n += 3
	}
	if m.DurableLockingForSerializable {
		n += 3
	}
	if m.MaxRetriesForReadCommitted != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.MaxRetriesForReadCommitted))
	}
	if m.StrictDDLAtomicity {
		n += 3
	}
	if m.SharedLockingForSerializable {
		n += 3
	}
	l = len(m.UnsafeSettingInterlockKey)
	if l > 0 {
		n += 2 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.OptimizerUseLockOpForSerializable {
		n += 3
	}
	if m.OptimizerUseProvidedOrderingFix {
		n += 3
	}
	if m.DisableChangefeedReplication {
		n += 3
	}
	if m.CopyTxnQualityOfService != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.CopyTxnQualityOfService))
	}
	if m.CopyWritePipeliningEnabled {
		n += 3
	}
	if m.OptimizerMergeJoinsEnabled {
		n += 3
	}
	if m.CopyNumRetriesPerBatch != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.CopyNumRetriesPerBatch))
	}
	if m.AutoCommitBeforeDDL {
		n += 3
	}
	if m.CloseCursorsAtCommit {
		n += 3
	}
	if m.PLpgSQLUseStrictInto {
		n += 3
	}
	if m.OptimizerUseVirtualComputedColumnStats {
		n += 3
	}
	if m.OptimizerUseTrigramSimilarityOptimization {
		n += 3
	}
	if m.OptimizerUseImprovedDistinctOnLimitHintCosting {
		n += 3
	}
	if m.OptimizerUseImprovedTrigramSimilaritySelectivity {
		n += 3
	}
	if m.OptimizerUseImprovedZigzagJoinCosting {
		n += 3
	}
	if m.OptimizerUseImprovedMultiColumnSelectivityEstimate {
		n += 3
	}
	if m.OptimizerProveImplicationWithVirtualComputedColumns {
		n += 3
	}
	if m.OptimizerPushOffsetIntoIndexJoin {
		n += 3
	}
	if m.PlanCacheMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.PlanCacheMode))
	}
	if m.OptimizerUsePolymorphicParameterFix {
		n += 3
	}
	if m.OriginIDForLogicalDataReplication != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.OriginIDForLogicalDataReplication))
	}
	if m.EnableCreateStatsUsingExtremesBoolEnum {
		n += 3
	}
	if m.OptimizerUseMergedPartialStatistics {
		n += 3
	}
	if m.OptimizerUseConditionalHoistFix {
		n += 3
	}
	if m.OptimizerPushLimitIntoProjectFilteredScan {
		n += 3
	}
	l = m.OriginTimestampForLogicalDataReplication.Size()
	n += 2 + l + sovLocalOnlySessionData(uint64(l))
	if m.BypassPCRReaderCatalogAOST {
		n += 3
	}
	if m.UnsafeAllowTriggersModifyingCascades {
		n += 3
	}
	if m.DisableVecUnionEagerCancellation {
		n += 3
	}
	if m.RecursionDepthLimit != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.RecursionDepthLimit))
	}
	if m.DistributeGroupByRowCountThreshold != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistributeGroupByRowCountThreshold))
	}
	if m.DistributeSortRowCountThreshold != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistributeSortRowCountThreshold))
	}
	if m.DistributeScanRowCountThreshold != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistributeScanRowCountThreshold))
	}
	if m.AlwaysDistributeFullScans {
		n += 3
	}
	if m.DistributeJoinRowCountThreshold != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistributeJoinRowCountThreshold))
	}
	if m.LegacyVarcharTyping {
		n += 3
	}
	if m.AvoidFullTableScansInMutations {
		n += 3
	}
	if m.CatalogDigestStalenessCheckEnabled {
		n += 3
	}
	if m.OptimizerPreferBoundedCardinality {
		n += 3
	}
	if m.OptimizerMinRowCount != 0 {
		n += 10
	}
	if m.BufferedWritesEnabled {
		n += 3
	}
	if m.OptimizerCheckInputMinRowCount != 0 {
		n += 10
	}
	if m.OptimizerPlanLookupJoinsWithReverseScans {
		n += 3
	}
	if m.RegisterLatchWaitContentionEvents {
		n += 3
	}
	if m.UseCPutsOnNonUniqueIndexes {
		n += 3
	}
	if m.BufferedWritesUseLockingOnNonUniqueIndexes {
		n += 3
	}
	if m.OptimizerUseLockElisionMultipleFamilies {
		n += 3
	}
	if m.OptimizerEnableLockElision {
		n += 3
	}
	if m.OptimizerUseDeleteRangeFastPath {
		n += 3
	}
	if m.AllowCreateTriggerFunctionWithArgvReferences {
		n += 3
	}
	if m.UsePre_25_2VariadicBuiltins {
		n += 3
	}
	if m.VectorSearchBeamSize != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.VectorSearchBeamSize))
	}
	if m.PropagateAdmissionHeaderToLeafTransactions {
		n += 3
	}
	if m.OptimizerUseExistsFilterHoistRule {
		n += 3
	}
	return n
}

func (m *SequenceCacheEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CachedVersion != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.CachedVersion))
	}
	if m.CurrentValue != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.CurrentValue))
	}
	if m.Increment != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.Increment))
	}
	if m.NumValues != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.NumValues))
	}
	return n
}

func sovLocalOnlySessionData(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozLocalOnlySessionData(x uint64) (n int) {
	return sovLocalOnlySessionData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalOnlySessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalOnlySessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalOnlySessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveTablesPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveTablesPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerFKCascadesLimit", wireType)
			}
			m.OptimizerFKCascadesLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptimizerFKCascadesLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StmtTimeout", wireType)
			}
			m.StmtTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StmtTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleInSessionTimeout", wireType)
			}
			m.IdleInSessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleInSessionTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleInTransactionSessionTimeout", wireType)
			}
			m.IdleInTransactionSessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleInTransactionSessionTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeDisplaySeverity", wireType)
			}
			m.NoticeDisplaySeverity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeDisplaySeverity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReorderJoinsLimit", wireType)
			}
			m.ReorderJoinsLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReorderJoinsLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnPriority", wireType)
			}
			m.DefaultTxnPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTxnPriority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTxnReadOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnUseFollowerReads", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTxnUseFollowerReads = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiallyDistributedPlansDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartiallyDistributedPlansDisabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseHistograms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseHistograms = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseMultiColStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseMultiColStats = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityOptimizedSearch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalityOptimizedSearch = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeUpdates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SafeUpdates = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferLookupJoinsForFKs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreferLookupJoinsForFKs = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZigzagJoinEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZigzagJoinEnabled = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireExplicitPrimaryKeys", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireExplicitPrimaryKeys = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSavepointRestart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceSavepointRestart = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPrepareAsOptPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowPrepareAsOptPlan = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempTablesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TempTablesEnabled = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitColumnPartitioningEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitColumnPartitioningEnabled = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideMultiRegionZoneConfigEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverrideMultiRegionZoneConfigEnabled = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowFullTableScans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisallowFullTableScans = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitSelectForUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitSelectForUpdate = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertFastPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsertFastPath = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlterColumnTypeGeneralEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlterColumnTypeGeneralEnabled = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynchronousCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SynchronousCommit = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSeqScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSeqScan = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableUniqueWithoutIndexConstraints", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableUniqueWithoutIndexConstraints = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StubCatalogTablesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StubCatalogTablesEnabled = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalComputedColumnRewrites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExperimentalComputedColumnRewrites = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStreamReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStreamReplication = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsBufferSize", wireType)
			}
			m.ResultsBufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultsBufferSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagateInputOrdering", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropagateInputOrdering = bool(v != 0)
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalDistSQLPlanningMode", wireType)
			}
			m.ExperimentalDistSQLPlanningMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExperimentalDistSQLPlanningMode |= ExperimentalDistSQLPlanningMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistSQLMode", wireType)
			}
			m.DistSQLMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistSQLMode |= DistSQLExecMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNormalizationMode", wireType)
			}
			m.SerialNormalizationMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerialNormalizationMode |= SerialNormalizationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSchemaChangerMode", wireType)
			}
			m.NewSchemaChangerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSchemaChangerMode |= NewSchemaChangerMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SequenceCache == nil {
				m.SequenceCache = make(SequenceCache)
			}
			var mapkey uint32
			var mapvalue *SequenceCacheEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocalOnlySessionData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SequenceCacheEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SequenceCache[mapkey] = mapvalue
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlacementEnabled = bool(v != 0)
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionUserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionUserProto = github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnRowsWrittenLog", wireType)
			}
			m.TxnRowsWrittenLog = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnRowsWrittenLog |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnRowsWrittenErr", wireType)
			}
			m.TxnRowsWrittenErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnRowsWrittenErr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnRowsReadLog", wireType)
			}
			m.TxnRowsReadLog = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnRowsReadLog |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnRowsReadErr", wireType)
			}
			m.TxnRowsReadErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnRowsReadErr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRehomingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoRehomingEnabled = bool(v != 0)
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuperuser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuperuser = bool(v != 0)
		case 53:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargeFullScanRows", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LargeFullScanRows = float64(math.Float64frombits(v))
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectRetryErrorsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InjectRetryErrorsEnabled = bool(v != 0)
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullOrderedLast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NullOrderedLast = bool(v != 0)
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePlanGists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisablePlanGists = bool(v != 0)
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomOptions == nil {
				m.CustomOptions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocalOnlySessionData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomOptions[mapkey] = mapvalue
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecommendationsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IndexRecommendationsEnabled = bool(v != 0)
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvoidBuffering", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvoidBuffering = bool(v != 0)
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckFunctionBodies", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckFunctionBodies = bool(v != 0)
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostScansWithDefaultColSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CostScansWithDefaultColSize = bool(v != 0)
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnQualityOfService", wireType)
			}
			m.DefaultTxnQualityOfService = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTxnQualityOfService |= QoSLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptSplitScanLimit", wireType)
			}
			m.OptSplitScanLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptSplitScanLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSuperRegions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSuperRegions = bool(v != 0)
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideAlterPrimaryRegionInSuperRegion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverrideAlterPrimaryRegionInSuperRegion = bool(v != 0)
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableImplicitTransactionForBatchStatements", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableImplicitTransactionForBatchStatements = bool(v != 0)
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectAndIgnoreNotVisibleColumnsInCopy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectAndIgnoreNotVisibleColumnsInCopy = bool(v != 0)
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultipleModificationsOfTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultipleModificationsOfTable = bool(v != 0)
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrimaryKeyConstraintOnNotVisibleColumns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPrimaryKeyConstraintOnNotVisibleColumns = bool(v != 0)
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingOptimizerRandomSeed", wireType)
			}
			m.TestingOptimizerRandomSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestingOptimizerRandomSeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnconstrainedNonCoveringIndexScanEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnconstrainedNonCoveringIndexScanEnabled = bool(v != 0)
		case 72:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingOptimizerCostPerturbation", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestingOptimizerCostPerturbation = float64(math.Float64frombits(v))
		case 73:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingOptimizerDisableRuleProbability", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestingOptimizerDisableRuleProbability = float64(math.Float64frombits(v))
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseNotVisibleIndexes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseNotVisibleIndexes = bool(v != 0)
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyFastPathEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyFastPathEnabled = bool(v != 0)
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHoistProjectionInJoinLimitation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableHoistProjectionInJoinLimitation = bool(v != 0)
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyFromAtomicEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyFromAtomicEnabled = bool(v != 0)
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceHomeRegion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnforceHomeRegion = bool(v != 0)
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseForecasts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseForecasts = bool(v != 0)
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariableInequalityLookupJoinEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VariableInequalityLookupJoinEnabled = bool(v != 0)
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionTimeout", wireType)
			}
			m.TransactionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemIdentityProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemIdentityProto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorValidationMode", wireType)
			}
			m.DescriptorValidationMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorValidationMode |= DescriptorValidationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalHashGroupJoinEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExperimentalHashGroupJoinEnabled = bool(v != 0)
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowOrdinalColumnReferences", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowOrdinalColumnReferences = bool(v != 0)
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedDisjunctionStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedDisjunctionStats = bool(v != 0)
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseLimitOrderingForStreamingGroupBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseLimitOrderingForStreamingGroupBy = bool(v != 0)
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyFromRetriesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyFromRetriesEnabled = bool(v != 0)
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclareCursorStatementTimeoutEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeclareCursorStatementTimeoutEnabled = bool(v != 0)
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedSplitDisjunctionForJoins", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedSplitDisjunctionForJoins = bool(v != 0)
		case 92:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectRetryErrorsOnCommitEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InjectRetryErrorsOnCommitEnabled = bool(v != 0)
		case 93:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceHomeRegionFollowerReadsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnforceHomeRegionFollowerReadsEnabled = bool(v != 0)
		case 94:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerAlwaysUseHistograms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerAlwaysUseHistograms = bool(v != 0)
		case 95:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCreateStatsUsingExtremes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCreateStatsUsingExtremes = bool(v != 0)
		case 96:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowRoleMembershipsToChangeDuringTransaction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowRoleMembershipsToChangeDuringTransaction = bool(v != 0)
		case 97:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparedStatementsCacheSize", wireType)
			}
			m.PreparedStatementsCacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreparedStatementsCacheSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultipleActivePortalsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultipleActivePortalsEnabled = bool(v != 0)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnboundedParallelScans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnboundedParallelScans = bool(v != 0)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerHoistUncorrelatedEqualitySubqueries", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerHoistUncorrelatedEqualitySubqueries = bool(v != 0)
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingOptimizerInjectPanics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestingOptimizerInjectPanics = bool(v != 0)
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedComputedColumnFiltersDerivation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedComputedColumnFiltersDerivation = bool(v != 0)
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnIsolationLevel", wireType)
			}
			m.DefaultTxnIsolationLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTxnIsolationLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationMode", wireType)
			}
			m.ReplicationMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationMode |= ReplicationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedJoinElimination", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedJoinElimination = bool(v != 0)
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitFKLockingForSerializable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitFKLockingForSerializable = bool(v != 0)
		case 109:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurableLockingForSerializable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DurableLockingForSerializable = bool(v != 0)
		case 110:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetriesForReadCommitted", wireType)
			}
			m.MaxRetriesForReadCommitted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetriesForReadCommitted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictDDLAtomicity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrictDDLAtomicity = bool(v != 0)
		case 112:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedLockingForSerializable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SharedLockingForSerializable = bool(v != 0)
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsafeSettingInterlockKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsafeSettingInterlockKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 114:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseLockOpForSerializable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseLockOpForSerializable = bool(v != 0)
		case 115:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseProvidedOrderingFix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseProvidedOrderingFix = bool(v != 0)
		case 116:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableChangefeedReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableChangefeedReplication = bool(v != 0)
		case 117:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyTxnQualityOfService", wireType)
			}
			m.CopyTxnQualityOfService = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CopyTxnQualityOfService |= QoSLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 118:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyWritePipeliningEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyWritePipeliningEnabled = bool(v != 0)
		case 119:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerMergeJoinsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerMergeJoinsEnabled = bool(v != 0)
		case 120:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyNumRetriesPerBatch", wireType)
			}
			m.CopyNumRetriesPerBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CopyNumRetriesPerBatch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 121:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCommitBeforeDDL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoCommitBeforeDDL = bool(v != 0)
		case 122:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseCursorsAtCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseCursorsAtCommit = bool(v != 0)
		case 123:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PLpgSQLUseStrictInto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PLpgSQLUseStrictInto = bool(v != 0)
		case 124:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseVirtualComputedColumnStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseVirtualComputedColumnStats = bool(v != 0)
		case 125:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseTrigramSimilarityOptimization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseTrigramSimilarityOptimization = bool(v != 0)
		case 126:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedDistinctOnLimitHintCosting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedDistinctOnLimitHintCosting = bool(v != 0)
		case 127:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedTrigramSimilaritySelectivity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedTrigramSimilaritySelectivity = bool(v != 0)
		case 128:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedZigzagJoinCosting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedZigzagJoinCosting = bool(v != 0)
		case 129:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseImprovedMultiColumnSelectivityEstimate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseImprovedMultiColumnSelectivityEstimate = bool(v != 0)
		case 130:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerProveImplicationWithVirtualComputedColumns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerProveImplicationWithVirtualComputedColumns = bool(v != 0)
		case 132:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerPushOffsetIntoIndexJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerPushOffsetIntoIndexJoin = bool(v != 0)
		case 133:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanCacheMode", wireType)
			}
			m.PlanCacheMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanCacheMode |= PlanCacheMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 134:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUsePolymorphicParameterFix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUsePolymorphicParameterFix = bool(v != 0)
		case 135:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginIDForLogicalDataReplication", wireType)
			}
			m.OriginIDForLogicalDataReplication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginIDForLogicalDataReplication |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 136:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCreateStatsUsingExtremesBoolEnum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCreateStatsUsingExtremesBoolEnum = bool(v != 0)
		case 137:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseMergedPartialStatistics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseMergedPartialStatistics = bool(v != 0)
		case 138:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseConditionalHoistFix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseConditionalHoistFix = bool(v != 0)
		case 139:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerPushLimitIntoProjectFilteredScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerPushLimitIntoProjectFilteredScan = bool(v != 0)
		case 140:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginTimestampForLogicalDataReplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OriginTimestampForLogicalDataReplication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 141:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassPCRReaderCatalogAOST", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BypassPCRReaderCatalogAOST = bool(v != 0)
		case 142:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsafeAllowTriggersModifyingCascades", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnsafeAllowTriggersModifyingCascades = bool(v != 0)
		case 143:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVecUnionEagerCancellation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableVecUnionEagerCancellation = bool(v != 0)
		case 144:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecursionDepthLimit", wireType)
			}
			m.RecursionDepthLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecursionDepthLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 145:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeGroupByRowCountThreshold", wireType)
			}
			m.DistributeGroupByRowCountThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeGroupByRowCountThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 146:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeSortRowCountThreshold", wireType)
			}
			m.DistributeSortRowCountThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeSortRowCountThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 147:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeScanRowCountThreshold", wireType)
			}
			m.DistributeScanRowCountThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeScanRowCountThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 148:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysDistributeFullScans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlwaysDistributeFullScans = bool(v != 0)
		case 149:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeJoinRowCountThreshold", wireType)
			}
			m.DistributeJoinRowCountThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeJoinRowCountThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 150:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyVarcharTyping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LegacyVarcharTyping = bool(v != 0)
		case 151:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvoidFullTableScansInMutations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvoidFullTableScansInMutations = bool(v != 0)
		case 153:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogDigestStalenessCheckEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatalogDigestStalenessCheckEnabled = bool(v != 0)
		case 154:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerPreferBoundedCardinality", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerPreferBoundedCardinality = bool(v != 0)
		case 155:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerMinRowCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OptimizerMinRowCount = float64(math.Float64frombits(v))
		case 156:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferedWritesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BufferedWritesEnabled = bool(v != 0)
		case 157:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerCheckInputMinRowCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OptimizerCheckInputMinRowCount = float64(math.Float64frombits(v))
		case 158:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerPlanLookupJoinsWithReverseScans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerPlanLookupJoinsWithReverseScans = bool(v != 0)
		case 159:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterLatchWaitContentionEvents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterLatchWaitContentionEvents = bool(v != 0)
		case 160:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCPutsOnNonUniqueIndexes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCPutsOnNonUniqueIndexes = bool(v != 0)
		case 161:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferedWritesUseLockingOnNonUniqueIndexes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BufferedWritesUseLockingOnNonUniqueIndexes = bool(v != 0)
		case 162:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseLockElisionMultipleFamilies", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseLockElisionMultipleFamilies = bool(v != 0)
		case 163:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerEnableLockElision", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerEnableLockElision = bool(v != 0)
		case 164:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseDeleteRangeFastPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseDeleteRangeFastPath = bool(v != 0)
		case 165:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowCreateTriggerFunctionWithArgvReferences", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowCreateTriggerFunctionWithArgvReferences = bool(v != 0)
		case 167:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePre_25_2VariadicBuiltins", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsePre_25_2VariadicBuiltins = bool(v != 0)
		case 168:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorSearchBeamSize", wireType)
			}
			m.VectorSearchBeamSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VectorSearchBeamSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 169:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagateAdmissionHeaderToLeafTransactions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropagateAdmissionHeaderToLeafTransactions = bool(v != 0)
		case 170:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseExistsFilterHoistRule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseExistsFilterHoistRule = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceCacheEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceCacheEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceCacheEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedVersion", wireType)
			}
			m.CachedVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CachedVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			m.CurrentValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increment", wireType)
			}
			m.Increment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Increment |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValues", wireType)
			}
			m.NumValues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValues |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalOnlySessionData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalOnlySessionData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalOnlySessionData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalOnlySessionData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalOnlySessionData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalOnlySessionData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalOnlySessionData = fmt.Errorf("proto: unexpected end of group")
)

