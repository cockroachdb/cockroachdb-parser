// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sessiondatapb/session_revival_token.proto

package sessiondatapb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SessionRevivalToken is an opaque piece of data that can be used to
// authenticate a new SQL session for the user who created this token.
type SessionRevivalToken struct {
	// The payload to sign. This uses raw bytes so the data being signed is
	// deterministic and not dependent on the proto version.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// The signature of the payload, signed using the new signing key.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SessionRevivalToken) Reset()         { *m = SessionRevivalToken{} }
func (m *SessionRevivalToken) String() string { return proto.CompactTextString(m) }
func (*SessionRevivalToken) ProtoMessage()    {}
func (*SessionRevivalToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_12138428403833e1, []int{0}
}
func (m *SessionRevivalToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRevivalToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SessionRevivalToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRevivalToken.Merge(m, src)
}
func (m *SessionRevivalToken) XXX_Size() int {
	return m.Size()
}
func (m *SessionRevivalToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRevivalToken.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRevivalToken proto.InternalMessageInfo

// Payload is defined as a separate type so that itâ€™s easier to sign.
type SessionRevivalToken_Payload struct {
	// The SQL user who can use this token to authenticate.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// The algorithm used to sign the payload. Can be either Ed25519 or RSA.
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// The time that this token is no longer considered valid.
	ExpiresAt *types.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// The time that this token was created.
	IssuedAt *types.Timestamp `protobuf:"bytes,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
}

func (m *SessionRevivalToken_Payload) Reset()         { *m = SessionRevivalToken_Payload{} }
func (m *SessionRevivalToken_Payload) String() string { return proto.CompactTextString(m) }
func (*SessionRevivalToken_Payload) ProtoMessage()    {}
func (*SessionRevivalToken_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_12138428403833e1, []int{0, 0}
}
func (m *SessionRevivalToken_Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRevivalToken_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SessionRevivalToken_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRevivalToken_Payload.Merge(m, src)
}
func (m *SessionRevivalToken_Payload) XXX_Size() int {
	return m.Size()
}
func (m *SessionRevivalToken_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRevivalToken_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRevivalToken_Payload proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SessionRevivalToken)(nil), "cockroach.parser.sql.sessiondatapb.SessionRevivalToken")
	proto.RegisterType((*SessionRevivalToken_Payload)(nil), "cockroach.parser.sql.sessiondatapb.SessionRevivalToken.Payload")
}

func init() {
	proto.RegisterFile("sql/sessiondatapb/session_revival_token.proto", fileDescriptor_12138428403833e1)
}

var fileDescriptor_12138428403833e1 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4e, 0xf3, 0x30,
	0x1c, 0xc5, 0xe3, 0xef, 0xab, 0x28, 0x31, 0x4c, 0x61, 0x89, 0x0a, 0x32, 0x15, 0x53, 0x17, 0x6c,
	0x09, 0x24, 0x10, 0x63, 0x39, 0x01, 0x0a, 0x1d, 0x10, 0x4b, 0xe5, 0x24, 0xc6, 0xb5, 0xea, 0xd4,
	0xae, 0xed, 0x54, 0x70, 0x0b, 0x6e, 0xc2, 0x35, 0x3a, 0x76, 0xec, 0x08, 0xe9, 0x41, 0x40, 0x75,
	0x1a, 0x22, 0xc4, 0xc0, 0xf6, 0xff, 0x3f, 0xbf, 0xdf, 0xb3, 0x9e, 0x0d, 0xcf, 0xed, 0x5c, 0x12,
	0xcb, 0xac, 0x15, 0x6a, 0x96, 0x53, 0x47, 0x75, 0xda, 0x6c, 0x63, 0xc3, 0x16, 0x62, 0x41, 0xe5,
	0xd8, 0xa9, 0x29, 0x9b, 0x61, 0x6d, 0x94, 0x53, 0xd1, 0x71, 0xa6, 0xb2, 0xa9, 0x51, 0x34, 0x9b,
	0x60, 0x3b, 0x97, 0xf8, 0x07, 0xd8, 0x3b, 0xe5, 0x4a, 0x71, 0xc9, 0x88, 0xb7, 0xa6, 0xe5, 0x13,
	0x71, 0xa2, 0x60, 0xd6, 0xd1, 0x42, 0xd7, 0xf4, 0xd9, 0x27, 0x80, 0x47, 0xf7, 0x35, 0x92, 0xd4,
	0xe1, 0xa3, 0x6d, 0x76, 0x14, 0xc3, 0xae, 0xa6, 0x2f, 0x52, 0xd1, 0x3c, 0x06, 0x7d, 0x30, 0x38,
	0x4c, 0x9a, 0x35, 0x3a, 0x81, 0xa1, 0x15, 0x7c, 0x46, 0x5d, 0x69, 0x58, 0xfc, 0xcf, 0x9f, 0xb5,
	0x42, 0xef, 0x0d, 0xc0, 0xee, 0xdd, 0xce, 0x19, 0xc1, 0x4e, 0x69, 0x99, 0xf1, 0x01, 0x61, 0xe2,
	0xe7, 0x2d, 0x4d, 0x25, 0x57, 0x46, 0xb8, 0x49, 0xe1, 0xe9, 0x30, 0x69, 0x85, 0xe8, 0x06, 0x42,
	0xf6, 0xac, 0x85, 0x61, 0x76, 0x4c, 0x5d, 0xfc, 0xbf, 0x0f, 0x06, 0x07, 0x17, 0x3d, 0x5c, 0x77,
	0xc0, 0x4d, 0x07, 0x3c, 0x6a, 0x3a, 0x24, 0xe1, 0xce, 0x3d, 0x74, 0xd1, 0x35, 0x0c, 0x85, 0xb5,
	0x25, 0xcb, 0xb7, 0x64, 0xe7, 0x4f, 0x72, 0xbf, 0x36, 0x0f, 0xdd, 0xed, 0xc3, 0xf2, 0x03, 0x05,
	0xcb, 0x0a, 0x81, 0x55, 0x85, 0xc0, 0xba, 0x42, 0xe0, 0xbd, 0x42, 0xe0, 0x75, 0x83, 0x82, 0xd5,
	0x06, 0x05, 0xeb, 0x0d, 0x0a, 0x1e, 0xaf, 0xb8, 0x70, 0x93, 0x32, 0xc5, 0x99, 0x2a, 0xc8, 0xf7,
	0x63, 0xe7, 0x69, 0x3b, 0x13, 0x3d, 0xe5, 0xe4, 0xd7, 0xaf, 0xa5, 0x7b, 0xfe, 0xde, 0xcb, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x75, 0xe7, 0xc2, 0xd1, 0x01, 0x00, 0x00,
}

func (m *SessionRevivalToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRevivalToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRevivalToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSessionRevivalToken(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintSessionRevivalToken(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionRevivalToken_Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRevivalToken_Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRevivalToken_Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssuedAt != nil {
		{
			size, err := m.IssuedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionRevivalToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExpiresAt != nil {
		{
			size, err := m.ExpiresAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionRevivalToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintSessionRevivalToken(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintSessionRevivalToken(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionRevivalToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionRevivalToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionRevivalToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	return n
}

func (m *SessionRevivalToken_Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = m.ExpiresAt.Size()
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	if m.IssuedAt != nil {
		l = m.IssuedAt.Size()
		n += 1 + l + sovSessionRevivalToken(uint64(l))
	}
	return n
}

func sovSessionRevivalToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionRevivalToken(x uint64) (n int) {
	return sovSessionRevivalToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionRevivalToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionRevivalToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRevivalToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRevivalToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionRevivalToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRevivalToken_Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionRevivalToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = &types.Timestamp{}
			}
			if err := m.ExpiresAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuedAt == nil {
				m.IssuedAt = &types.Timestamp{}
			}
			if err := m.IssuedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionRevivalToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionRevivalToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionRevivalToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionRevivalToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionRevivalToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionRevivalToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionRevivalToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionRevivalToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionRevivalToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionRevivalToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionRevivalToken = fmt.Errorf("proto: unexpected end of group")
)

